{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Team - Predictive Model\n",
      "Baris Baloglu & Javier Pineda (de Mar)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### QuickRuns:\n",
      "Description: under each key section a quickrun bar helps to quickly navigate to the next necessary step of the parts of the notebook to improve overview and increase speed while running specific parts of the project:\n",
      "<br>\n",
      "\n",
      "<a href=\"#import_data\">Stanford</a>\n",
      "<br>\n",
      "<a href=\"#import_data\">Rottentomatoes</a>\n",
      "<br>\n",
      "<a href=\"#import_data\">NewYorkTimes</a>\n",
      "<br>\n",
      "<a href=\"#import_data\">NYT Popularity </a>\n",
      "<br>"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### 1. Importing"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 1.1 Normal Import Statements <a name=\"import_data\"></a>\n",
      "Collecting all import statements and global settings together in one spot."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import sys\n",
      "sys.version\n",
      "import nltk\n",
      "#nltk.download()\n",
      "\n",
      "import nltk.tokenize.punkt \n",
      "import nltk.data\n",
      "\n",
      "import nltk.tokenize as token\n",
      "\n",
      "from nltk.tokenize.punkt import PunktSentenceTokenizer\n",
      "\n",
      "from itertools import combinations"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#test if canvas stays in on plt.show\n",
      "%matplotlib inline\n",
      "# Not sure what we'll need exactly, so just importing all the usual suspects here\n",
      "import json\n",
      "import requests\n",
      "import pandas as pd\n",
      "import numpy as np\n",
      "import matplotlib.pyplot as plt\n",
      "import re\n",
      "import scipy.stats as stats\n",
      "import os, sys\n",
      "import math\n",
      "import time\n",
      "\n",
      "from sklearn.feature_extraction.text import CountVectorizer\n",
      "from nltk.corpus import stopwords #If this line doesn't work, use nltk.downloads() and download corpus#\n",
      "\n",
      "from sklearn.cross_validation import train_test_split\n",
      "from sklearn.naive_bayes import MultinomialNB\n",
      "from sklearn.naive_bayes import GaussianNB\n",
      "from sklearn.naive_bayes import BernoulliNB\n",
      "#%pylab inline\n",
      "\n",
      "pd.set_option('display.width', 500)\n",
      "pd.set_option('display.max_columns', 30)\n",
      "\n",
      "# set some nicer defaults for matplotlib\n",
      "from matplotlib import rcParams\n",
      "\n",
      "#these colors come from colorbrewer2.org. Each is an RGB triplet\n",
      "dark2_colors = [(0.10588235294117647, 0.6196078431372549, 0.4666666666666667),\n",
      "                (0.8509803921568627, 0.37254901960784315, 0.00784313725490196),\n",
      "                (0.4588235294117647, 0.4392156862745098, 0.7019607843137254),\n",
      "                (0.9058823529411765, 0.1607843137254902, 0.5411764705882353),\n",
      "                (0.4, 0.6509803921568628, 0.11764705882352941),\n",
      "                (0.9019607843137255, 0.6705882352941176, 0.00784313725490196),\n",
      "                (0.6509803921568628, 0.4627450980392157, 0.11372549019607843),\n",
      "                (0.4, 0.4, 0.4)]\n",
      "\n",
      "rcParams['figure.figsize'] = (10, 6)\n",
      "rcParams['figure.dpi'] = 150\n",
      "rcParams['axes.color_cycle'] = dark2_colors\n",
      "rcParams['lines.linewidth'] = 2\n",
      "rcParams['axes.grid'] = False\n",
      "rcParams['axes.facecolor'] = 'white'\n",
      "rcParams['font.size'] = 14\n",
      "rcParams['patch.edgecolor'] = 'none'"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "//anaconda/python.app/Contents/lib/python2.7/site-packages/pytz/__init__.py:35: UserWarning: Module argparse was already imported from //anaconda/python.app/Contents/lib/python2.7/argparse.pyc, but /anaconda/lib/python2.7/site-packages is being added to sys.path\n",
        "  from pkg_resources import resource_stream\n"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######<a href=\"#sentiment_data\">Stanford</a> - <a href=\"#sentiment_data\">RottenTomatoes</a> - <a href=\"#sentiment_data\">NewYorkTimes</a>"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### 2. Get Data\n",
      "\n",
      "Collect all different data sources used as training data in one chapter. All data will be stored in a CSV-File for later usage.\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 2.1 Sentiment Analysis Words (sentiment_df) (Run mandatory) <a name=\"sentiment_data\"></a>\n",
      "\n",
      "This is the sentiment data which is used as a reference for word sentiment scores. It is needed for almost all following actions this is why it should be run in any case."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# read sentiment data from text file\n",
      "sentiment_df = pd.read_table('sentiment_data.txt', sep='\\t')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "StopWordList = stopwords.words(\"english\")\n",
      "sentiment_df['in_stopword'] = False\n",
      "sentiment_df['in_stopword'][sentiment_df.word.isin(StopWordList)] = True\n",
      "sentiment_df_NS = sentiment_df[sentiment_df.in_stopword == False]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######<a href=\"#sf_make_data\">Stanford</a> - <a href=\"#rt_csv_get_data\">RottenTomatoes</a> - <a href=\"#nyt_csv_get_data\">NewYorkTimes\n",
      "\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 2.2 Stanford MovieDB (stanford_df) <a name=\"sf_make_data\"></a>\n",
      "25k reviews divided in 12.5k positive ones and 12.5k negative. Ratings range from 1-10 for 1 negative and 10 positive. All neutral reviews have been excluded beforehand. Dataframe will be constructed from filesystem structure. "
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Set up function to create stanford dataframe. A function is used to create reusability for the later use in case of testing data."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# here the parameter \"data_set\" is a string (either 'train' or 'test')\n",
      "def make_stanford_df(data_set):\n",
      "\n",
      "    # making lists of negative and positive training data filenames, respectively\n",
      "    path_neg = \"stanford_movie/%s/neg/\" % data_set\n",
      "    neg_list = os.listdir(path_neg)\n",
      "    \n",
      "    path_pos = \"stanford_movie/%s/pos/\" % data_set\n",
      "    pos_list = os.listdir(path_pos)\n",
      "    \n",
      "    # making sure we're only getting the filenames we want\n",
      "    # there seems to be hidden files at least in the neg folder\n",
      "    neg_list = [i for i in neg_list if i[0].isdigit()]\n",
      "    pos_list = [i for i in pos_list if i[0].isdigit()]\n",
      "    \n",
      "    # making dataframe for negative training data\n",
      "    neg_df = pd.DataFrame(neg_list, columns = ['filename'])\n",
      "    \n",
      "    neg_df['id'] = neg_df.apply(lambda x: \n",
      "                            'neg' + x['filename'][:x['filename'].index('_')], axis=1)\n",
      "    \n",
      "    neg_df['rating'] = neg_df.apply(lambda x: \n",
      "                            x['filename'][x['filename'].index('_')+1:-4], axis=1)\n",
      "    \n",
      "    neg_df['path'] = path_neg\n",
      "    \n",
      "    # making dataframe for positive training data\n",
      "    pos_df = pd.DataFrame(pos_list, columns = ['filename'])\n",
      "    pos_df['id'] = pos_df.apply(lambda x: \n",
      "                            'pos' + x['filename'][:x['filename'].index('_')], axis=1)\n",
      "    pos_df['rating'] = pos_df.apply(lambda x: \n",
      "                            x['filename'][x['filename'].index('_')+1:-4], axis=1)\n",
      "    \n",
      "    pos_df['path'] = path_pos\n",
      "    \n",
      "    # concatenating negative and positive training data into one dataframe\n",
      "    stanford_df = pd.concat([neg_df, pos_df], ignore_index=True)\n",
      "    \n",
      "    # adding column with the movie reviews\n",
      "    stanford_df['review'] = stanford_df.apply(lambda x: \n",
      "                            open(x['path'] + x['filename'], 'r').read(), axis=1)\n",
      "\n",
      "    return stanford_df"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######<a href=\"#sf_csv_get_data\">Stanford</a>"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Call function to create dataframe:\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_df = make_stanford_df('train')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Save dataframe to file:\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_df.to_csv('stanford.csv', index=False)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 29
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Load dataframe from CSV: <a name=\"sf_csv_get_data\"></a>"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_df = pd.read_csv('stanford.csv')\n",
      "stanford_df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>filename</th>\n",
        "      <th>id</th>\n",
        "      <th>rating</th>\n",
        "      <th>path</th>\n",
        "      <th>review</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>     0_3.txt</td>\n",
        "      <td>     neg0</td>\n",
        "      <td> 3</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> Story of a man who has unnatural feelings for ...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 10000_4.txt</td>\n",
        "      <td> neg10000</td>\n",
        "      <td> 4</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> Airport '77 starts as a brand new luxury 747 p...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 10001_4.txt</td>\n",
        "      <td> neg10001</td>\n",
        "      <td> 4</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> This film lacked something I couldn't put my f...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 10002_1.txt</td>\n",
        "      <td> neg10002</td>\n",
        "      <td> 1</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> Sorry everyone,,, I know this is supposed to b...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> 10003_1.txt</td>\n",
        "      <td> neg10003</td>\n",
        "      <td> 1</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> When I was little my parents took me along to ...</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "      filename        id  rating                       path                                             review\n",
        "0      0_3.txt      neg0       3  stanford_movie/train/neg/  Story of a man who has unnatural feelings for ...\n",
        "1  10000_4.txt  neg10000       4  stanford_movie/train/neg/  Airport '77 starts as a brand new luxury 747 p...\n",
        "2  10001_4.txt  neg10001       4  stanford_movie/train/neg/  This film lacked something I couldn't put my f...\n",
        "3  10002_1.txt  neg10002       1  stanford_movie/train/neg/  Sorry everyone,,, I know this is supposed to b...\n",
        "4  10003_1.txt  neg10003       1  stanford_movie/train/neg/  When I was little my parents took me along to ..."
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######<a href=\"#sf_csv_clean_data\">Stanford</a> - (<a href=\"#rt_csv_get_data\">RottenTomatoes</a> - <a href=\"#nyt_csv_get_data\">NewYorkTimes</a>)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some Statistics: <a name=\"sf_stat_get_data\"></a> \n",
      "<br>Compare with: <a href=\"#sf_stat_clean_data\">Clean</a>, <a href=\"#sf_stat_prep_data\">Prepare</a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 'length of set:', len(stanford_df)\n",
      "print 'average postlength:', int(np.mean(stanford_df[~stanford_df.review.isnull()].review.apply(lambda x: len(x))))\n",
      "print 'number of positive reviews:', len(stanford_df[stanford_df.rating >= 7])\n",
      "print 'number of negative reviews:', len(stanford_df[stanford_df.rating <= 4])\n",
      "print 'max postlength', stanford_train_df[~stanford_df.review.isnull()].review.apply(lambda x: len(x)).max()\n",
      "print 'min postlength', stanford_train_df[~stanford_df.review.isnull()].review.apply(lambda x: len(x)).min()\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "length of set: 25000\n",
        "average postlength: 1325\n",
        "number of positive reviews: 12500\n",
        "number of negative reviews: 12500\n",
        "max postlength 13704\n",
        "min postlength "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "52\n"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 2.3 RottenTomatoes (rottentomatoes_df) <a name=\"rt_get_data\"></a>\n",
      "Around 8k reviews divided in about 6k fresh ones and 2k rotten. Rating's range is binary for 1 fresh and 0 rotten. No neutral reviews have been excluded beforehand. Dataframe will be constructed from local CSV file out of HW3. <a name=\"rt_csv_get_data\"></a> "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rottentomatoes_df = pd.read_csv('critics.csv')\n",
      "rottentomatoes_df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n",
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n"
       ]
      },
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>critic</th>\n",
        "      <th>fresh</th>\n",
        "      <th>imdb</th>\n",
        "      <th>publication</th>\n",
        "      <th>quote</th>\n",
        "      <th>review_date</th>\n",
        "      <th>rtid</th>\n",
        "      <th>title</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> Owen Gleiberman</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td> Entertainment Weekly</td>\n",
        "      <td>                                               NaN</td>\n",
        "      <td> 2011-09-07</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>     Derek Adams</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td>             Time Out</td>\n",
        "      <td> So ingenious in concept, design and execution ...</td>\n",
        "      <td> 2009-10-04</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> Richard Corliss</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td>        TIME Magazine</td>\n",
        "      <td>                 The year's most inventive comedy.</td>\n",
        "      <td> 2008-08-31</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>     David Ansen</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td>             Newsweek</td>\n",
        "      <td> A winning animated feature that has something ...</td>\n",
        "      <td> 2008-08-18</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>   Leonard Klady</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td>              Variety</td>\n",
        "      <td> The film sports a provocative and appealing st...</td>\n",
        "      <td> 2008-06-09</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 56,
       "text": [
        "            critic  fresh    imdb           publication                                              quote review_date  rtid      title\n",
        "0  Owen Gleiberman  fresh  114709  Entertainment Weekly                                                NaN  2011-09-07  9559  Toy Story\n",
        "1      Derek Adams  fresh  114709              Time Out  So ingenious in concept, design and execution ...  2009-10-04  9559  Toy Story\n",
        "2  Richard Corliss  fresh  114709         TIME Magazine                  The year's most inventive comedy.  2008-08-31  9559  Toy Story\n",
        "3      David Ansen  fresh  114709              Newsweek  A winning animated feature that has something ...  2008-08-18  9559  Toy Story\n",
        "4    Leonard Klady  fresh  114709               Variety  The film sports a provocative and appealing st...  2008-06-09  9559  Toy Story"
       ]
      }
     ],
     "prompt_number": 56
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######(<a href=\"#sf_csv_get_data\">Stanford</a>) - <a href=\"#rt_csv_clean_data\">RottenTomatoes</a> - (<a href=\"#nyt_csv_get_data\">NewYorkTimes</a>)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some Statistics: <a name=\"rt_stat_get_data\"></a> \n",
      "<br>Compare with: <a href=\"#rt_stat_clean_data\">Clean</a>, <a href=\"#rt_stat_prep_data\">Prepare</a>"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 'length of set:', len(rottentomatoes_df)\n",
      "print 'average postlength:', int(np.mean(rottentomatoes_df[~rottentomatoes_df.quote.isnull()].quote.apply(lambda x: len(x))))\n",
      "print 'number of positive reviews:', len(rottentomatoes_df[rottentomatoes_df.fresh == 'fresh'])\n",
      "print 'number of negative reviews:', len(rottentomatoes_df[rottentomatoes_df.fresh == 'rotten'])\n",
      "print 'max postlength', rottentomatoes_df[~rottentomatoes_df.quote.isnull()].quote.apply(lambda x: len(x)).max()\n",
      "print 'min postlength', rottentomatoes_df[~rottentomatoes_df.quote.isnull()].quote.apply(lambda x: len(x)).min()\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "length of set: 27692\n",
        "average postlength: 117\n",
        "number of positive reviews: 11833\n",
        "number of negative reviews: 8458\n",
        "max postlength 256\n",
        "min postlength "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4\n"
       ]
      }
     ],
     "prompt_number": 208
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 2.4 New York Times DB (nytimes_df) <a name=\"nyt_get_data\"></a>\n",
      "Around XX lead paragraphs of articles based from given keyword arguments (article set can be changed by altering search parameter below). Note that lead paragraphs are low on words. Data is retrieved online and is saved into a CSV file in the end. "
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "API parameter: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "## NYT API keys\n",
      "api_key_article = \"851e7d0a131bee9bc01097470c238637:13:47475506\"\n",
      "api_key_community = \"519167db119ee6408c4ee51b3c391e11:0:47475506\"\n",
      "api_key_geo = \"a984ad78bf017f0ade1fcd980aa6353f:15:47475506\"\n",
      "api_key_popular = \"09dfaf288ad6c2ec46893a27ca758d41:19:47475506\"\n",
      "api_key_movies = \"e8a48f7d7731698b05267146c681c352:5:47475506\"\n",
      "api_key_semantic = \"9063b41607bbf486247b8e596a1456b8:7:47475506\"\n",
      "api_key_newswire = \"209ebb7b0ab44094970e8b39c63fea7e:2:47475506\"\n",
      "api_key_timestags = \"43b3366f288db10cb019fd532299723f:10:47475506\""
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 209
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Search parameters: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "begindate = \"20000101\" #YYYYMMDD\n",
      "enddate = \"20131112\" #YYYYMMDD\n",
      "\n",
      "## just picked a few terms meant to have a fair spread in content\n",
      "terms = ['mindfulness', 'debt', 'kardashian', 'obama',\n",
      "         'romney', 'obamacare', 'god', 'terrorism', 'nazi', \n",
      "         'hussein', 'war', 'depression', 'abortion', 'sex']\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 221
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Get data from nytimes.com: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# intially an empty dataframe\n",
      "nytimes_df = pd.DataFrame()\n",
      "\n",
      "# loop through terms\n",
      "for term in terms:\n",
      "    \n",
      "    # api request for each term\n",
      "    url = ''.join([\"http://api.nytimes.com/svc/search/v2/articlesearch.json?q=\", term,\n",
      "                   \"&begin_date=\", begindate, \n",
      "                   \"&end_date=\", enddate,\n",
      "                   \"&api-key=\",api_key_article])\n",
      "        \n",
      "    req = requests.get(url).text\n",
      "    \n",
      "    # decode into json dicts\n",
      "    jsons = json.loads(req)\n",
      "    \n",
      "    # loop through each article returned from API request\n",
      "    for doc in jsons['response']['docs']:\n",
      "\n",
      "        # making dataframe; a term will appear in multiple rows\n",
      "        doc_df = pd.DataFrame([term], columns = ['term'])\n",
      "        \n",
      "        # alternative way of dealing with none-types\n",
      "        if json.dumps(doc['abstract']) != 'null':\n",
      "        \n",
      "            # encode weird ascii stuff\n",
      "            abstract = [doc['abstract'].encode('utf-8')]\n",
      "            \n",
      "            # making dataframe and adding abstracts\n",
      "            doc_df['abstract'] = abstract\n",
      "            \n",
      "        # this way we take all data, and we can do away with what we don't want later    \n",
      "        else:\n",
      "            abstract = np.nan\n",
      "            doc_df['abstract'] = abstract\n",
      "            \n",
      "        # can add an if-else clause for anything you want to get, then add to doc_df\n",
      "        if json.dumps(doc['lead_paragraph']) != 'null':\n",
      "            \n",
      "            lead = [doc['lead_paragraph'].encode('utf-8')]\n",
      "            doc_df['lead'] = lead\n",
      "            \n",
      "        else:\n",
      "            lead = np.nan\n",
      "            doc_df['lead'] = lead\n",
      "        \n",
      "        nytimes_df = pd.concat([nytimes_df, doc_df]).reset_index(drop=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 223
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Save dataframe to file:\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "nytimes_df.to_csv('nytimes.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 224
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Load dataframe from CSV: <a name=\"nyt_csv_get_data\"></a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "nytimes_df = pd.read_csv('nytimes.csv')\n",
      "\n",
      "nytimes_df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>abstract</th>\n",
        "      <th>lead</th>\n",
        "      <th>term</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>                                               NaN</td>\n",
        "      <td> A term for mental training reaches the height ...</td>\n",
        "      <td> mindfulness</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> Mindfulness is terrific for the person practic...</td>\n",
        "      <td> The other night at a dinner party, a friend de...</td>\n",
        "      <td> mindfulness</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>                                               NaN</td>\n",
        "      <td> Mindfulness is terrific for the person practic...</td>\n",
        "      <td> mindfulness</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> Jennifer Egan article on her experience at Spi...</td>\n",
        "      <td> Peter Williams sits cross-legged on an upholst...</td>\n",
        "      <td> mindfulness</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> Two-thirds of doctors experience the emotional...</td>\n",
        "      <td>                                               NaN</td>\n",
        "      <td> mindfulness</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 228,
       "text": [
        "                                            abstract                                               lead         term\n",
        "0                                                NaN  A term for mental training reaches the height ...  mindfulness\n",
        "1  Mindfulness is terrific for the person practic...  The other night at a dinner party, a friend de...  mindfulness\n",
        "2                                                NaN  Mindfulness is terrific for the person practic...  mindfulness\n",
        "3  Jennifer Egan article on her experience at Spi...  Peter Williams sits cross-legged on an upholst...  mindfulness\n",
        "4  Two-thirds of doctors experience the emotional...                                                NaN  mindfulness"
       ]
      }
     ],
     "prompt_number": 228
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######(<a href=\"#sf_csv_get_data\">Stanford</a> - <a href=\"#rt_csv_get_data\">RottenTomatoes</a>) - <a href=\"#nyt_csv_clean_data\">NewYorkTimes</a>"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some Statistics: <a name=\"nyt_stat_get_data\"></a> \n",
      "<br>Compare with: <a href=\"#nyt_stat_clean_data\">Clean</a>, <a href=\"#nyt_stat_prep_data\">Prepare</a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 'length of set:', len(nytimes_df)\n",
      "print 'average postlength:', int(np.mean(nytimes_df.lead[~nytimes_df.lead.isnull()].apply(lambda x: len(x))))\n",
      "print 'number of positive reviews:', 'currently unknown'\n",
      "print 'number of negative reviews:', 'currently unknown'\n",
      "print 'max postlength', nytimes_df.lead[~nytimes_df.lead.isnull()].apply(lambda x: len(x)).max()\n",
      "print 'min postlength', nytimes_df.lead[~nytimes_df.lead.isnull()].apply(lambda x: len(x)).min()\n",
      "                            "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "length of set: 140\n",
        "average postlength: 314\n",
        "number of positive reviews: currently unknown\n",
        "number of negative reviews: currently unknown\n",
        "max postlength 1280\n",
        "min postlength 35\n"
       ]
      }
     ],
     "prompt_number": 232
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### 3. Clean Data\n",
      "\n",
      "Clear datasources from any empty or unneccassary data rows or specific entries.\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 3.1 Stanford MovieDB (stanford_clean_df) <a name=\"sf_csv_clean_data\"></a>\n",
      "Currently no cleaning neccessary. "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_clean_df = stanford_df\n",
      "stanford_clean_df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>filename</th>\n",
        "      <th>id</th>\n",
        "      <th>rating</th>\n",
        "      <th>path</th>\n",
        "      <th>review</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>     0_3.txt</td>\n",
        "      <td>     neg0</td>\n",
        "      <td> 3</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> Story of a man who has unnatural feelings for ...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 10000_4.txt</td>\n",
        "      <td> neg10000</td>\n",
        "      <td> 4</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> Airport '77 starts as a brand new luxury 747 p...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 10001_4.txt</td>\n",
        "      <td> neg10001</td>\n",
        "      <td> 4</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> This film lacked something I couldn't put my f...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 10002_1.txt</td>\n",
        "      <td> neg10002</td>\n",
        "      <td> 1</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> Sorry everyone,,, I know this is supposed to b...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> 10003_1.txt</td>\n",
        "      <td> neg10003</td>\n",
        "      <td> 1</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> When I was little my parents took me along to ...</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "      filename        id  rating                       path                                             review\n",
        "0      0_3.txt      neg0       3  stanford_movie/train/neg/  Story of a man who has unnatural feelings for ...\n",
        "1  10000_4.txt  neg10000       4  stanford_movie/train/neg/  Airport '77 starts as a brand new luxury 747 p...\n",
        "2  10001_4.txt  neg10001       4  stanford_movie/train/neg/  This film lacked something I couldn't put my f...\n",
        "3  10002_1.txt  neg10002       1  stanford_movie/train/neg/  Sorry everyone,,, I know this is supposed to b...\n",
        "4  10003_1.txt  neg10003       1  stanford_movie/train/neg/  When I was little my parents took me along to ..."
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######<a href=\"#prep_features\">Stanford</a> - (<a href=\"#rt_csv_clean_data\">RottenTomatoes</a> - <a href=\"#nyt_csv_clean_data\">NewYorkTimes</a>)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some Statistics: <a name=\"sf_stat_celan_data\"></a> \n",
      "<br>Compare with: <a href=\"#sf_stat_get_data\">Plain</a>, <a href=\"#sf_stat_prep_data\">Prepare</a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 'length of set:', len(stanford_clean_df)\n",
      "print 'average postlength:', int(np.mean(stanford_clean_df[~stanford_clean_df.review.isnull()].review.apply(lambda x: len(x))))\n",
      "print 'number of positive reviews:', len(stanford_clean_df[stanford_clean_df.rating >= 7])\n",
      "print 'number of negative reviews:', len(stanford_clean_df[stanford_clean_df.rating <= 4])\n",
      "print 'max postlength', stanford_clean_df[~stanford_clean_df.review.isnull()].review.apply(lambda x: len(x)).max()\n",
      "print 'min postlength', stanford_clean_df[~stanford_clean_df.review.isnull()].review.apply(lambda x: len(x)).min()\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "length of set: 25000\n",
        "average postlength: 1325\n",
        "number of positive reviews: 12500\n",
        "number of negative reviews: 12500\n",
        "max postlength 13704\n",
        "min postlength "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "52\n"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 3.2 RottenTomatoes (rottentomatoes_clean_df)\n",
      "Around 8k reviews divided in about 6k fresh ones and 2k rotten. Rating's range is binary for 1 fresh and 0 rotten. No neutral reviews have been excluded beforehand. Dataframe will be constructed from local CSV file out of HW3. <a name=\"rt_csv_get_data\"></a> "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rottentomatoes_clean_df = rottentomatoes_df[~rottentomatoes_df.quote.isnull()]\n",
      "rottentomatoes_clean_df = rottentomatoes_clean_df[rottentomatoes_clean_df.fresh != 'none']\n",
      "rottentomatoes_clean_df = rottentomatoes_clean_df[rottentomatoes_clean_df.quote.str.len() > 0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 58
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Save dataframe to file:\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rottentomatoes_clean_df.to_csv('rottentomatoes_clean_df.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 59
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Load dataframe from CSV: <a name=\"rt_csv_clean_data\"></a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rottentomatoes_clean_df = pd.read_csv('rottentomatoes_clean_df.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 60
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######(<a href=\"#sf_csv_clean_data\">Stanford</a>) - <a href=\"#prep_features\">RottenTomatoes</a> - (<a href=\"#nyt_csv_clean_data\">NewYorkTimes</a>)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some Statistics: <a name=\"rt_stat_clean_data\"></a> \n",
      "<br>Compare with: <a href=\"#rt_stat_get_data\">Plain</a>, <a href=\"#rt_stat_prep_data\">Prepare</a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rottentomatoes_clean_df = pd.read_csv('rottentomatoes_clean_df.csv')\n",
      "print 'length of set:', len(rottentomatoes_clean_df)\n",
      "print 'average postlength:', int(np.mean(rottentomatoes_clean_df.quote.apply(lambda x: len(x))))\n",
      "print 'number of positive reviews:', len(rottentomatoes_clean_df[rottentomatoes_clean_df.fresh == 'fresh'])\n",
      "print 'number of negative reviews:', len(rottentomatoes_clean_df[rottentomatoes_clean_df.fresh == 'rotten'])\n",
      "print 'max postlength', rottentomatoes_clean_df.quote.apply(lambda x: len(x)).max()\n",
      "print 'min postlength', rottentomatoes_clean_df.quote.apply(lambda x: len(x)).min()\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "length of set: 15572\n",
        "average postlength: 117\n",
        "number of positive reviews: 9486\n",
        "number of negative reviews: 6086\n",
        "max postlength 256\n",
        "min postlength 4\n"
       ]
      }
     ],
     "prompt_number": 262
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 3.3 New York Times DB (nytimes_clean_df)\n",
      "Eliminate all empty lead paragraphs."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "nytimes_clean_df = nytimes_df[~nytimes_df.lead.isnull()]\n",
      "nytimes_clean_df = nytimes_clean_df[nytimes_clean_df.lead != 'none']\n",
      "nytimes_clean_df = nytimes_clean_df[nytimes_clean_df.lead.str.len() > 0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 251
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Save dataframe to file:\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "nytimes_clean_df.to_csv('nytimes_clean_df.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 253
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Load dataframe from CSV: <a name=\"nyt_csv_clean_data\"></a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "nytimes_clean_df = pd.read_csv('nytimes_clean_df.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 254
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######(<a href=\"#sf_csv_clean_data\">Stanford</a> - <a href=\"#rt_csv_clean_data\">RottenTomatoes</a>) - <a href=\"#prep_features\">NewYorkTimes</a>"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some Statistics: <a name=\"nyt_stat_clean_data\"></a> \n",
      "<br>Compare with: <a href=\"#nyt_stat_get_data\">Plain</a>, <a href=\"#nyt_stat_prep_data\">Prepare</a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 'length of set:', len(nytimes_clean_df)\n",
      "print 'average postlength:', int(np.mean(nytimes_clean_df.lead.apply(lambda x: len(x))))\n",
      "print 'number of positive reviews:', 'currently unknown'\n",
      "print 'number of negative reviews:', 'currently unknown'\n",
      "print 'max postlength', nytimes_clean_df.lead.apply(lambda x: len(x)).max()\n",
      "print 'min postlength', nytimes_clean_df.lead.apply(lambda x: len(x)).min()\n",
      "                            "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "length of set: 134\n",
        "average postlength: 314\n",
        "number of positive reviews: currently unknown\n",
        "number of negative reviews: currently unknown\n",
        "max postlength 1280\n",
        "min postlength 35\n"
       ]
      }
     ],
     "prompt_number": 261
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### 4. Prepare Data\n",
      "\n",
      "Prepare datasources with neccessary extenstion including required featurelist. Result will be stored in local CSV files.\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "####Features <a name=\"prep_features\"></a>\n",
      "Collection of feature methods that can be called by dataframe to apply on all rows."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def post_length(text):\n",
      "    \n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))\n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]\n",
      "    tot_word_count = len(words_df)\n",
      "    return tot_word_count\n",
      "\n",
      "\n",
      "def avg_word_length(text):\n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))           \n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]      \n",
      "    average_length = round(np.mean(words_df.word_length.values), 2)    \n",
      "    return average_length\n",
      "\n",
      "\n",
      "def avg_senti_score(text):\n",
      "    #now = time.time()\n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))\n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]\n",
      "    words_df['in_sentiment'] = False\n",
      "    words_df['in_sentiment'][words_df.words.isin(sentiment_df.word)] = True\n",
      "    words_df['happiness_avg'] = np.nan\n",
      "    words_df['happiness_avg'][words_df.in_sentiment == True] = words_df.words[words_df.in_sentiment == True].apply(lambda x: \n",
      "                float(sentiment_df.happiness_average[sentiment_df.word == x].values))\n",
      "    average_score = round(np.mean(words_df.happiness_avg[~words_df.happiness_avg.isnull()].values), 3)\n",
      "    #later = time.time()\n",
      "    #print 'time used for entry:', float(later - now)\n",
      "    return float(average_score)\n",
      "\n",
      "\"\"\"\n",
      "def avg_senti_score2(text):\n",
      "    #now = time.time()\n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))\n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]\n",
      "    words_df['in_sentiment'] = False\n",
      "    words_df['in_sentiment'][words_df.words.isin(sentiment_df.word)] = True\n",
      "    words_df['happiness_avg2'] = np.nan\n",
      "    words_df['happiness_avg2'][words_df.in_sentiment == True] = words_df.words[words_df.in_sentiment == True].apply(lambda x: \n",
      "                float(sentiment_df.happiness_average2[sentiment_df.word == x].values))\n",
      "    average_score2 = round(np.mean(words_df.happiness_avg2[~words_df.happiness_avg2.isnull()].values), 3)\n",
      "    #later = time.time()\n",
      "    #print 'time used for entry:', float(later - now)\n",
      "    return float(average_score2)\n",
      "\"\"\"\n",
      "\n",
      "def avg_senti_score_2(text):\n",
      "    #now = time.time()\n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))\n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]\n",
      "    words_df['in_sentiment'] = False\n",
      "    words_df['in_sentiment'][words_df.words.isin(sentiment_df_NS.word)] = True\n",
      "    words_df['happiness_avg_2'] = np.nan\n",
      "    words_df['happiness_avg_2'][words_df.in_sentiment == True] = words_df.words[words_df.in_sentiment == True].apply(lambda x: \n",
      "                float(sentiment_df_NS.happiness_average[sentiment_df_NS.word == x].values))\n",
      "    average_score_2 = round(np.mean(words_df.happiness_avg_2[~words_df.happiness_avg_2.isnull()].values), 3)\n",
      "    #later = time.time()\n",
      "    #print 'time used for entry:', float(later - now)\n",
      "\n",
      "    return float(average_score_2)\n",
      "\n",
      "def dyn_senti_score(text):    \n",
      "    #now = time.time()\n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))\n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]\n",
      "    words_df['in_sentiment'] = False\n",
      "    words_df['in_sentiment'][words_df.words.isin(sentiment_df_NS.word)] = True\n",
      "    words_df['happiness_avg'] = np.nan\n",
      "    words_df['happiness_avg'][words_df.in_sentiment == True] = words_df.words[words_df.in_sentiment == True].apply(lambda x: \n",
      "                float(sentiment_df_NS.happiness_average[sentiment_df_NS.word == x].values))\n",
      "   \n",
      "    avg_sent_score = round(np.mean(words_df.happiness_avg[~words_df.happiness_avg.isnull()].values), 3)\n",
      "\n",
      "    sent_min = words_df['happiness_avg'].min(axis=0)\n",
      "    sent_max = words_df['happiness_avg'].max(axis=0)\n",
      "    sent_range = sent_max - sent_min\n",
      "    range_constant = 0.1\n",
      "    dispersion = range_constant * sent_range\n",
      "    ## lower and upper boundaries for dynamic exclusion\n",
      "    \n",
      "    dyn_exclude_min = avg_sent_score - dispersion\n",
      "    dyn_exclude_max = avg_sent_score + dispersion\n",
      "    \n",
      "    words_df['dyn_exclusion'] = 'True'\n",
      "    words_df['dyn_exclusion'][(words_df.happiness_avg >=dyn_exclude_max)] = 'False'\n",
      "    words_df['dyn_exclusion'][(words_df.happiness_avg <=dyn_exclude_min)] = 'False'\n",
      "\n",
      "    \n",
      "    avghdyn = np.nan\n",
      "    avghdyn = words_df[words_df['dyn_exclusion'] == 'False']['happiness_avg'].mean()\n",
      "    \n",
      "    return float(avghdyn)\n",
      "\n",
      "def google_rank(text):   \n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))\n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]\n",
      "    words_df['in_sentiment'] = False\n",
      "    words_df['in_sentiment'][words_df.words.isin(sentiment_df_NS.word)] = True\n",
      "    words_df['google_rank'] = np.nan\n",
      "    words_df['google_rank'][words_df.in_sentiment == True] = words_df.words[words_df.in_sentiment == True].apply(lambda x: \n",
      "        float(sentiment_df.google_rank[sentiment_df.word == x].values))\n",
      "    google_rank = round(np.mean(words_df.google_rank[~words_df.google_rank.isnull()].values), 3)\n",
      "    return float(google_rank)\n",
      "\n",
      "def twitter_rank(text):  \n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))\n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]\n",
      "    words_df['in_sentiment'] = False\n",
      "    words_df['in_sentiment'][words_df.words.isin(sentiment_df_NS.word)] = True\n",
      "    words_df['twitter_rank'] = np.nan\n",
      "    words_df['twitter_rank'][words_df.in_sentiment == True] = words_df.words[words_df.in_sentiment == True].apply(lambda x: \n",
      "        float(sentiment_df.twitter_rank[sentiment_df.word == x].values))\n",
      "    twitter_rank = round(np.mean(words_df.twitter_rank[~words_df.twitter_rank.isnull()].values), 3)\n",
      "    return float(twitter_rank)\n",
      "\n",
      "def nyt_rank(text):   \n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))\n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]\n",
      "    words_df['in_sentiment'] = False\n",
      "    words_df['in_sentiment'][words_df.words.isin(sentiment_df_NS.word)] = True\n",
      "    words_df['nyt_rank'] = np.nan\n",
      "    words_df['nyt_rank'][words_df.in_sentiment == True] = words_df.words[words_df.in_sentiment == True].apply(lambda x: \n",
      "        float(sentiment_df.nyt_rank[sentiment_df.word == x].values))\n",
      "    nyt_rank = round(np.mean(words_df.nyt_rank[~words_df.nyt_rank.isnull()].values), 3)\n",
      "    return float(nyt_rank)\n",
      "\n",
      "def lyrics_rank(text):   \n",
      "    words_df = pd.DataFrame(text.split(' '), columns=['words'])\n",
      "    words_df['words'] = words_df.words.apply(lambda x: str.lower(re.sub(\"\\W\", '', x)))\n",
      "    words_df['word_length'] = words_df.words.apply(lambda x: len(x))\n",
      "    words_df = words_df[words_df.word_length > 0]\n",
      "    words_df['in_sentiment'] = False\n",
      "    words_df['in_sentiment'][words_df.words.isin(sentiment_df_NS.word)] = True\n",
      "    words_df['lyrics_rank'] = np.nan\n",
      "    words_df['lyrics_rank'][words_df.in_sentiment == True] = words_df.words[words_df.in_sentiment == True].apply(lambda x: \n",
      "        float(sentiment_df.lyrics_rank[sentiment_df.word == x].values))\n",
      "    lyrics_rank = round(np.mean(words_df.lyrics_rank[~words_df.lyrics_rank.isnull()].values), 3)\n",
      "    return float(lyrics_rank)\n",
      "\n",
      "def num_sentence(text):\n",
      "    return len(token.sent_tokenize(text))\n",
      "    \n",
      "def lexical_density(text):\n",
      "    keep = []\n",
      "    tokenized = token.word_tokenize(text)\n",
      "    for word in tokenized:\n",
      "        if len(word) > 5:\n",
      "            keep.append(word)\n",
      "    lexden = float(len(keep))/float(len(tokenized))\n",
      "    return lexden\n",
      "    \n",
      "def words_per_sentence(text):\n",
      "    tokenize = token.sent_tokenize(text)\n",
      "    numsentences = len(tokenize)\n",
      "    wordsinsentence = []\n",
      "    for sentence in tokenize:\n",
      "        wordsinsentence.append(len(token.word_tokenize(sentence)))\n",
      "    return sum(wordsinsentence)/numsentences\n",
      "\n",
      "import nltk \n",
      "from nltk.corpus import cmudict \n",
      "d = cmudict.dict() \n",
      "\n",
      "def nsyl(word): \n",
      "  return [len(list(y for y in x if isdigit.y[-1])) for x in d[word.lower()]]\n",
      "\n",
      "\n",
      "\n",
      "def FK_GradeLevel(text):\n",
      "    #now = time.time()\n",
      "    #.39 * (words_per_sentence(text)) + 11.8 * (\n",
      "    tokenize = token.word_tokenize(text)\n",
      "    syllist = []\n",
      "    for word in tokenize:\n",
      "        try:\n",
      "            if len(nsyl(word)) > 1:\n",
      "                syllist.append(nsyl(word)[0])\n",
      "            else:\n",
      "                syllist.append(nsyl(word))\n",
      "        except:\n",
      "            syllist.append(0)\n",
      "            \n",
      "    syllables = float(sum([np.array(i) for i in syllist]))\n",
      "    \n",
      "    score = .39 * (words_per_sentence(text)) + 11.8 * (syllables/post_length(text)) - 15.59\n",
      "    #end = time.time()\n",
      "    #print 'time for fk', end-now\n",
      "    return abs(score)\n",
      "\n",
      "def syllablesComp(text):\n",
      "    #.39 * (words_per_sentence(text)) + 11.8 * (\n",
      "    tokenize = token.word_tokenize(text)\n",
      "    syllist = []\n",
      "    for word in tokenize:\n",
      "        try:\n",
      "            if len(nsyl(word)) > 1:\n",
      "                syllist.append(nsyl(word)[0])\n",
      "            else:\n",
      "                syllist.append(nsyl(word))\n",
      "        except:\n",
      "            syllist.append(0)\n",
      "            \n",
      "    syllablesI = float(sum([np.array(i) for i in syllist if i > 4]))\n",
      "    \n",
      "    return syllablesComp\n",
      "\n",
      "def FogIndex(text):\n",
      "    score = .4 * (words_per_sentence(text)) + 100 * (syllablesI(text)/post_length(text))\n",
      "    return score "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######<a href=\"#prep_function\">Stanford</a> - <a href=\"#prep_function\">RottenTomatoes</a> - <a href=\"#prep_function\">NewYorkTimes</a>"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Prepare Function <a name=\"prep_function\"></a>\n",
      "\n",
      "This function will add the desired feature columns to any dataframe that has a column of texts."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# \"text_col\" parameter is the column name (string) where the text is\n",
      "# features parameter is a list of functions to implement on the dataframe\n",
      "def make_prep_df(df, text_col, features):\n",
      "    \n",
      "    \n",
      "    # making copy of dataframe\n",
      "    df_copy = df.copy()\n",
      "    \n",
      "    # renaming text column to make it easy to deal with\n",
      "    df_copy = df_copy.rename(columns={text_col: 'text_col'})\n",
      "    \n",
      "    # deletixng rows where there are no words in the text column\n",
      "    df_copy = df_copy[~df_copy.text_col.isnull()].reset_index(drop=True)\n",
      "    \n",
      "    #map(features, lambda x: df_copy[x.__name__] = np.nan)\n",
      "    #map(features, lambda y: df_copy[y.__name__] = df_copy.text_col.apply(lambda x: y(x)))\n",
      "    #now = time.time()\n",
      "    #print 'started', now \n",
      "    start = time.time()\n",
      "    for func in features:\n",
      "        # making a column that has the same name as the function\n",
      "        #later = time.time()\n",
      "        #print 'later, func, difference', later, func, float(later)-float(now)\n",
      "        df_copy[func.__name__] = np.nan\n",
      "        df_copy[func.__name__] = df_copy.text_col.apply(lambda x: func(x))\n",
      "        end = time.time()\n",
      "        print 'function', func\n",
      "        print 'time elapsed:', float(end) - float(start)\n",
      "        \n",
      "    # deleting rows where there is no average sentiment score\n",
      "    #df_copy = df_copy[~df_copy.avg_senti_score.isnull()]\n",
      "    #df_copy = df_copy.sort('avg_senti_score', ascending=False).reset_index(drop=True)\n",
      "    \n",
      "    # changing text column back to its original name\n",
      "    df_copy = df_copy.rename(columns={'text_col': text_col})\n",
      "    \n",
      "    # returns prepared dataframe\n",
      "    return df_copy\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 236
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######<a href=\"#sf_csv_prep_data\">Stanford</a> - <a href=\"#rt_csv_prep_data\">RottenTomatoes</a> - <a href=\"#nyt_csv_prep_data\">NewYorkTimes</a>"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 4.1 Stanford MovieDB (stanford_prep_df)\n",
      "Add feature columns for Stanford MovieDB:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#functions = [post_length, avg_word_length, avg_senti_score]\n",
      "\n",
      "#functions = [post_length, avg_word_length, avg_senti_score, avg_senti_score2, dyn_senti_score, google_rank, twitter_rank, nyt_rank, lyrics_rank]\n",
      "functions = [avg_word_length, FK_GradeLevel, google_rank, lexical_density, lyrics_rank, num_sentence, nyt_rank, post_length, twitter_rank, words_per_sentence]\n",
      "\n",
      "stanford_prep_df = make_prep_df(stanford_clean_df, 'review', functions)\n",
      "#stanford_prep_df.head()\n",
      "#stanford_prep_df.to_csv('stanford_prep.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "KeyboardInterrupt",
       "evalue": "",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-39-eaa9aaf896f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mstanford_prep_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_prep_df\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstanford_clean_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'review'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunctions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;31m#stanford_prep_df.head()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m#stanford_prep_df.to_csv('stanford_prep.csv', index=False)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m<ipython-input-9-4ab865868cef>\u001b[0m in \u001b[0;36mmake_prep_df\u001b[0;34m(df, text_col, features)\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0;31m# making a column that has the same name as the function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0mdf_copy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m         \u001b[0mdf_copy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_copy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext_col\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;31m# deleting rows where there is no average sentiment score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/series.pyc\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, convert_dtype, args, **kwds)\u001b[0m\n\u001b[1;32m   2445\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_infer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTimestamp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2446\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2447\u001b[0;31m         \u001b[0mmapped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_infer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconvert\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconvert_dtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2448\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmapped\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSeries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2449\u001b[0m             \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframe\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/lib.so\u001b[0m in \u001b[0;36mpandas.lib.map_infer (pandas/lib.c:41822)\u001b[0;34m()\u001b[0m\n",
        "\u001b[0;32m<ipython-input-9-4ab865868cef>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0;31m# making a column that has the same name as the function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0mdf_copy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m         \u001b[0mdf_copy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_copy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext_col\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;31m# deleting rows where there is no average sentiment score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m<ipython-input-37-6568f8e69873>\u001b[0m in \u001b[0;36mFK_GradeLevel\u001b[0;34m(text)\u001b[0m\n\u001b[1;32m    195\u001b[0m             \u001b[0msyllist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    196\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 197\u001b[0;31m     \u001b[0msyllables\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msyllist\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    198\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m     \u001b[0mscore\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m.39\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mwords_per_sentence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m11.8\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msyllables\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mpost_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m15.59\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_prep_df"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>filename</th>\n",
        "      <th>id</th>\n",
        "      <th>rating</th>\n",
        "      <th>path</th>\n",
        "      <th>review</th>\n",
        "      <th>avg_word_length</th>\n",
        "      <th>FK_GradeLevel</th>\n",
        "      <th>google_rank</th>\n",
        "      <th>lexical_density</th>\n",
        "      <th>lyrics_rank</th>\n",
        "      <th>num_sentence</th>\n",
        "      <th>nyt_rank</th>\n",
        "      <th>post_length</th>\n",
        "      <th>twitter_rank</th>\n",
        "      <th>words_per_sentence</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 0_3.txt</td>\n",
        "      <td> neg0</td>\n",
        "      <td> 3</td>\n",
        "      <td> stanford_movie/train/neg/</td>\n",
        "      <td> Story of a man who has unnatural feelings for ...</td>\n",
        "      <td> 4.76</td>\n",
        "      <td> 9.74</td>\n",
        "      <td> 1270.878</td>\n",
        "      <td> 0.344828</td>\n",
        "      <td> 1237.895</td>\n",
        "      <td> 8</td>\n",
        "      <td> 1572.182</td>\n",
        "      <td> 112</td>\n",
        "      <td> 1446.405</td>\n",
        "      <td> 15</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "  filename    id  rating                       path                                             review  avg_word_length  FK_GradeLevel  google_rank  lexical_density  lyrics_rank  num_sentence  nyt_rank  post_length  twitter_rank  words_per_sentence\n",
        "0  0_3.txt  neg0       3  stanford_movie/train/neg/  Story of a man who has unnatural feelings for ...             4.76           9.74     1270.878         0.344828     1237.895             8  1572.182          112      1446.405                  15"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Save dataframe to file:\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#stanford_prep_df = stanford_prep_df[~stanford_prep_df.dy n_senti_score.isnull()]\n",
      "\n",
      "stanford_prep_df.to_csv('stanford_prep.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 50
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Load dataframe from CSV: <a name=\"sf_csv_prep_data\"></a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_prep_df = pd.read_csv('stanford_prep.csv')\n",
      "#XYZ\n",
      "print stanford_prep_df[stanford_prep_df.dyn_senti_score.isnull()]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Empty DataFrame\n",
        "Columns: [filename, id, rating, path, review, post_length, avg_word_length, dyn_senti_score, google_rank, twitter_rank, nyt_rank, lyrics_rank, FK_GradeLevel, lexical_density, num_sentence, words_per_sentence]\n",
        "Index: []\n"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######<a href=\"#train_data\">Stanford</a> - (<a href=\"rt_csv_prep_data\">RottenTomatoes</a> - <a href=\"#nyt_csv_prep_data\">NewYorkTimes</a>)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some Statistics: <a name=\"sf_stat_prep_data\"></a> \n",
      "<br>Compare with: <a href=\"#sf_stat_get_data\">Plain</a>, <a href=\"#sf_stat_clean_data\">Clean</a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 'length of set:', len(stanford_prep_df)\n",
      "print 'average postlength:', int(np.mean(stanford_prep_df.lead.apply(lambda x: len(x))))\n",
      "print 'number of positive reviews:', len(stanford_prep_df[stanford_prep_df.rating >= 7])\n",
      "print 'number of negative reviews:', len(stanford_prep_df[stanford_prep_df.rating <= 4])\n",
      "print 'max postlength', stanford_prep_df.lead.apply(lambda x: len(x)).max()\n",
      "print 'min postlength', stanford_prep_df.lead.apply(lambda x: len(x)).min()\n",
      "                            "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "length of set: 134\n",
        "average postlength: 314\n",
        "number of positive reviews: currently unknown\n",
        "number of negative reviews: currently unknown\n",
        "max postlength 1280\n",
        "min postlength 35\n"
       ]
      }
     ],
     "prompt_number": 261
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 4.2 RottenTomatoes (rottentomatoes_prep_df)\n",
      "Add feature columns:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "functions = [post_length, avg_word_length, avg_senti_score, avg_senti_score_2 ,dyn_senti_score, google_rank, twitter_rank, nyt_rank, lyrics_rank]\n",
      "\n",
      "rottentomatoes_prep_df = make_prep_df(rottentomatoes_clean_df, 'quote', functions)\n",
      "rottentomatoes_prep_df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n",
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n"
       ]
      },
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>critic</th>\n",
        "      <th>fresh</th>\n",
        "      <th>imdb</th>\n",
        "      <th>publication</th>\n",
        "      <th>quote</th>\n",
        "      <th>review_date</th>\n",
        "      <th>rtid</th>\n",
        "      <th>title</th>\n",
        "      <th>post_length</th>\n",
        "      <th>avg_word_length</th>\n",
        "      <th>avg_senti_score</th>\n",
        "      <th>avg_senti_score_2</th>\n",
        "      <th>dyn_senti_score</th>\n",
        "      <th>google_rank</th>\n",
        "      <th>twitter_rank</th>\n",
        "      <th>nyt_rank</th>\n",
        "      <th>lyrics_rank</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>        Derek Adams</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td>       Time Out</td>\n",
        "      <td> So ingenious in concept, design and execution ...</td>\n",
        "      <td> 2009-10-04</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "      <td> 24</td>\n",
        "      <td> 4.63</td>\n",
        "      <td> 5.385</td>\n",
        "      <td> 5.508</td>\n",
        "      <td> 5.493333</td>\n",
        "      <td> 1433.286</td>\n",
        "      <td> 1331.429</td>\n",
        "      <td> 1960.286</td>\n",
        "      <td> 1440.333</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>    Richard Corliss</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td>  TIME Magazine</td>\n",
        "      <td>                 The year's most inventive comedy.</td>\n",
        "      <td> 2008-08-31</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "      <td>  5</td>\n",
        "      <td> 5.40</td>\n",
        "      <td> 6.115</td>\n",
        "      <td> 6.630</td>\n",
        "      <td> 6.630000</td>\n",
        "      <td>  115.000</td>\n",
        "      <td>  888.500</td>\n",
        "      <td> 1312.000</td>\n",
        "      <td>  364.000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>        David Ansen</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td>       Newsweek</td>\n",
        "      <td> A winning animated feature that has something ...</td>\n",
        "      <td> 2008-08-18</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "      <td> 13</td>\n",
        "      <td> 5.08</td>\n",
        "      <td> 5.572</td>\n",
        "      <td> 5.957</td>\n",
        "      <td> 5.973333</td>\n",
        "      <td> 1601.600</td>\n",
        "      <td> 1186.400</td>\n",
        "      <td> 1180.600</td>\n",
        "      <td> 1370.000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>      Leonard Klady</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td>        Variety</td>\n",
        "      <td> The film sports a provocative and appealing st...</td>\n",
        "      <td> 2008-06-09</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "      <td> 17</td>\n",
        "      <td> 5.24</td>\n",
        "      <td> 5.588</td>\n",
        "      <td> 5.933</td>\n",
        "      <td> 5.940000</td>\n",
        "      <td> 1653.250</td>\n",
        "      <td> 1384.000</td>\n",
        "      <td> 1594.000</td>\n",
        "      <td> 1599.000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> Jonathan Rosenbaum</td>\n",
        "      <td> fresh</td>\n",
        "      <td> 114709</td>\n",
        "      <td> Chicago Reader</td>\n",
        "      <td> An entertaining computer-generated, hyperreali...</td>\n",
        "      <td> 2008-03-10</td>\n",
        "      <td> 9559</td>\n",
        "      <td> Toy Story</td>\n",
        "      <td> 14</td>\n",
        "      <td> 6.50</td>\n",
        "      <td> 5.744</td>\n",
        "      <td> 6.020</td>\n",
        "      <td> 6.028000</td>\n",
        "      <td>  785.333</td>\n",
        "      <td> 1710.167</td>\n",
        "      <td> 1186.000</td>\n",
        "      <td> 2164.500</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 63,
       "text": [
        "               critic  fresh    imdb     publication                                              quote review_date  rtid      title  post_length  avg_word_length  avg_senti_score  avg_senti_score_2  dyn_senti_score  google_rank  twitter_rank  nyt_rank  lyrics_rank\n",
        "0         Derek Adams  fresh  114709        Time Out  So ingenious in concept, design and execution ...  2009-10-04  9559  Toy Story           24             4.63            5.385              5.508         5.493333     1433.286      1331.429  1960.286     1440.333\n",
        "1     Richard Corliss  fresh  114709   TIME Magazine                  The year's most inventive comedy.  2008-08-31  9559  Toy Story            5             5.40            6.115              6.630         6.630000      115.000       888.500  1312.000      364.000\n",
        "2         David Ansen  fresh  114709        Newsweek  A winning animated feature that has something ...  2008-08-18  9559  Toy Story           13             5.08            5.572              5.957         5.973333     1601.600      1186.400  1180.600     1370.000\n",
        "3       Leonard Klady  fresh  114709         Variety  The film sports a provocative and appealing st...  2008-06-09  9559  Toy Story           17             5.24            5.588              5.933         5.940000     1653.250      1384.000  1594.000     1599.000\n",
        "4  Jonathan Rosenbaum  fresh  114709  Chicago Reader  An entertaining computer-generated, hyperreali...  2008-03-10  9559  Toy Story           14             6.50            5.744              6.020         6.028000      785.333      1710.167  1186.000     2164.500"
       ]
      }
     ],
     "prompt_number": 63
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Save dataframe to file:\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rottentomatoes_prep_df.to_csv('rottentomatoes_prep_df.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 64
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Load dataframe from CSV: <a name=\"rt_csv_prep_data\"></a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rottentomatoes_prep_df = pd.read_csv('rottentomatoes_prep_df.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 65
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######(<a href=\"#sf_csv_prep_data\">Stanford</a>) - <a href=\"#train_data\">RottenTomatoes</a> - (<a href=\"#nyt_csv_prep_data\">NewYorkTimes</a>)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some Statistics: <a name=\"rt_stat_prep_data\"></a> \n",
      "<br>Compare with: <a href=\"#rt_stat_get_data\">Plain</a>, <a href=\"#rt_stat_clean_data\">Clean</a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 'length of set:', len(rottentomatoes_prep_df)\n",
      "print 'average postlength:', int(np.mean(rottentomatoes_prep_df.lead.apply(lambda x: len(x))))\n",
      "print 'number of positive reviews:', len(rottentomatoes_prep_df[rottentomatoes_prep_df.fresh == 'fresh'])\n",
      "print 'number of negative reviews:', len(rottentomatoes_prep_df[rottentomatoes_prep_df.fresh == 'rotten'])\n",
      "print 'max postlength', rottentomatoes_prep_df.lead.apply(lambda x: len(x)).max()\n",
      "print 'min postlength', rottentomatoes_prep_df.lead.apply(lambda x: len(x)).min()\n",
      "                            "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "length of set: 134\n",
        "average postlength: 314\n",
        "number of positive reviews: currently unknown\n",
        "number of negative reviews: currently unknown\n",
        "max postlength 1280\n",
        "min postlength 35\n"
       ]
      }
     ],
     "prompt_number": 261
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 4.3 New York Times DB (nytimes_prep_df)\n",
      "Add feature columns:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "functions = [post_length, avg_word_length, avg_senti_score]\n",
      "\n",
      "nytimes_prep_df = make_prep_df(nytimes_clean_df, 'lead', functions)\n",
      "nytimes_prep_df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Save dataframe to file:\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "nytimes_prep_df.to_csv('nytimes_prep_df.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Load dataframe from CSV: <a name=\"nyt_csv_prep_data\"></a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "nytimes_prep_df = pd.read_csv('nytimes_prep_df.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "######(<a href=\"#sf_csv_prep_data\">Stanford</a> - <a href=\"#train_data\">RottenTomatoes</a>) - <a href=\"#nyt_csv_prep_data\">NewYorkTimes</a>"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some Statistics: <a name=\"nyt_stat_prep_data\"></a> \n",
      "<br>Compare with: <a href=\"#nyt_stat_get_data\">Plain</a>, <a href=\"#nyt_stat_clean_data\">Clean</a>\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 'length of set:', len(rottentomatoes_prep_df)\n",
      "print 'average postlength:', int(np.mean(rottentomatoes_prep_df.lead.apply(lambda x: len(x))))\n",
      "print 'number of positive reviews:', 'currently unknown'\n",
      "print 'number of negative reviews:', 'currently unknown'\n",
      "print 'max postlength', rottentomatoes_prep_df.lead.apply(lambda x: len(x)).max()\n",
      "print 'min postlength', rottentomatoes_prep_df.lead.apply(lambda x: len(x)).min()\n",
      "                            "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "length of set: 134\n",
        "average postlength: 314\n",
        "number of positive reviews: currently unknown\n",
        "number of negative reviews: currently unknown\n",
        "max postlength 1280\n",
        "min postlength 35\n"
       ]
      }
     ],
     "prompt_number": 261
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### 5. Train/Test Model <a name=\"train_data\"></a> \n",
      "\n",
      "Train different models with different data sources.\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### Make XY Function\n",
      "\n",
      "This function takes in the prepared dataframe source and outputs X (an array of features) and Y (an array of known scores)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# defining the make_xy() function\n",
      "# \"rating_col\" parameter is the name of the column where the ratings are;\n",
      "# can be continuous or binary values\n",
      "# features parameter is a list of the feature functions\n",
      "def make_xy(prep_data, rating_col, features):\n",
      "    \n",
      "    # using copy of dataframe just in case\n",
      "    prep_copy = prep_data.copy()\n",
      "    \n",
      "    # converting relevant columns to floats\n",
      "    \n",
      "    #map(features, lambda y:  prep_copy[y.__name__] = prep_copy[y.__name__].apply(lambda x: float(x)))\n",
      "    \n",
      "    for func in features:\n",
      "        #print func\n",
      "        prep_copy[func.__name__] = prep_copy[func.__name__].apply(lambda x: float(x))\n",
      "        prep_copy = prep_copy[~prep_copy[func.__name__].isnull()].reset_index(drop = True)\n",
      "    \n",
      "    feature_array = []\n",
      "    for i in xrange(len(prep_copy)):\n",
      "        feature_list = [float(prep_copy[func.__name__][prep_copy.index == i].values[0]) for func in features]\n",
      "        feature_array.append(feature_list)\n",
      "    \n",
      "    #map(features, lambda x: df_copy[x.__name__] = np.nan)\n",
      "    #map(features, lambda y: df_copy[y.__name__] = df_copy.text_col.apply(lambda x: y(x)))\n",
      "    \n",
      "    # making 2D array of features\n",
      "    x = np.array(feature_array)\n",
      "    \n",
      "    # renaming the column that contains the ratings\n",
      "    prep_copy = prep_copy.rename(columns={rating_col: 'rating_col'})\n",
      "    \n",
      "    # making numpy array of the naive happy values we made up\n",
      "    y = np.array(prep_copy.rating_col.values)\n",
      "    \n",
      "    # returning x and y in a tuple\n",
      "    return x, y"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### 5.1 Train Model - Low Level Features to Predict Sentimentscore - Stanford Moviedatabase / RottenTomatoes \n",
      "In this section we try to use our low level features to be able to predict a calculated sentiment score that has been processed for every review in the StanfordDB."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "##### 5.1.1 Set up Test data "
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Set up Test data of StanfordDB (no train test split neccessary because they provide a whole testing set, this is why the prepare steps have to be repeated now)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_test_df = make_stanford_df('test')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 85
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Save test data locally:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_test_df.to_csv('stanford_test.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Load test data: ##CLICK ON THIS###"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_test_df = pd.read_csv('stanford_test.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Prepare data with all available features (super time expensive!):"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#features = [post_length, avg_word_length, avg_senti_score, avg_senti_score2, dyn_senti_score, google_rank, twitter_rank, nyt_rank, lyrics_rank]\n",
      "features = [post_length, avg_word_length, dyn_senti_score, google_rank, twitter_rank, nyt_rank, lyrics_rank]\n",
      "\n",
      "stanford_test_prep_df = make_prep_df(stanford_test_df, 'review', features)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 71
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Save prepared test data locally:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#stanford_test_prep_df = stanford_test_prep_df[~stanford_test_prep_df.dyn_senti_score.isnull()]\n",
      "stanford_test_prep_df.to_csv('stanford_test_prep.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 71
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Load prepared test data: ##CLICK ON THIS###"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stanford_test_prep_df = pd.read_csv('stanford_test_prep.csv')\n",
      "\n",
      "#print stanford_test_prep_df[stanford_test_prep_df.dyn_senti_score.isnull()]\n",
      "#XYZ\n",
      "\n",
      "\n",
      "'''\n",
      "####test\n",
      "stanford_test_prep_df = pd.concat([stanford_test_prep_df.head(50),stanford_test_prep_df.tail(50)]).reset_index(drop = True)\n",
      "stanford_test_prep_df.head()\n",
      "\n",
      "features = [post_length, avg_word_length, avg_senti_score, avg_senti_score2, dyn_senti_score, google_rank, twitter_rank, nyt_rank, lyrics_rank]\n",
      "stanford_test_prep_df = make_prep_df(stanford_test_prep_df, 'review', features)\n",
      "'''"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "\"\\n####test\\nstanford_test_prep_df = pd.concat([stanford_test_prep_df.head(50),stanford_test_prep_df.tail(50)]).reset_index(drop = True)\\nstanford_test_prep_df.head()\\n\\nfeatures = [post_length, avg_word_length, avg_senti_score, avg_senti_score2, dyn_senti_score, google_rank, twitter_rank, nyt_rank, lyrics_rank]\\nstanford_test_prep_df = make_prep_df(stanford_test_prep_df, 'review', features)\\n\""
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Optional: add additional features if not already set."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "functions = [FK_GradeLevel, lexical_density, num_sentence, words_per_sentence]\n",
      "\n",
      "stanford_prep_df = make_prep_df(stanford_test_prep_df, 'review', functions)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 70
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Optional step to shrink dataset of 25k reviews to a smaller set for testing:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#make set smaller\n",
      "stanford_test_prep_df = pd.concat([stanford_test_prep_df.head(2000), stanford_test_prep_df.tail(2000)])#.reset_index(drop = True)\n",
      "stanford_prep_df = pd.concat([stanford_prep_df.head(2000), stanford_prep_df.tail(2000)])#.reset_index(drop = True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "##### 5.1.2 Feature selection\n",
      "This part tries to find the best feature selection to optimize the prediction results.\n",
      "There are a 1028 feature combinations "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\"\"\"\n",
      "#here is the spot for accuracy optimization\n",
      "\n",
      "features = [avg_word_length, FK_GradeLevel, google_rank, lexical_density, lyrics_rank, num_sentence, nyt_rank, post_length, twitter_rank, words_per_sentence]\n",
      "\n",
      "### TESTING COMBINATIONS OF FEATURES\n",
      "###\n",
      "###\n",
      "\n",
      "def test_features(train_df, test_df, all_features, min_max):\n",
      "                  \n",
      "    all_features_str = [i.__name__ for i in all_features]\n",
      "    \n",
      "    #sorted_feat = sorted(all_features_str)\n",
      "    \n",
      "    # generating list of combinations\n",
      "    \n",
      "    \n",
      "    combo_list = []\n",
      "    combo_list_str = []\n",
      "    \n",
      "    for i in xrange(len(all_features)):\n",
      "            \n",
      "        combo = list(combinations(all_features, i+1))\n",
      "        combo_str = list(combinations(all_features_str, i+1))\n",
      "        combo_list.extend(combo)\n",
      "        combo_list_str.extend(combo_str)\n",
      "    \n",
      "    \n",
      "    combo_list = [list(i) for i in combo_list]\n",
      "    combo_list_str = [list(i) for i in combo_list_str]\n",
      "    \n",
      "    combo_list_str = np.array(combo_list_str)\n",
      "    combo_df = pd.DataFrame(combo_list_str, columns=['combo_features'])\n",
      "    #combo_df['feat_combos'] = [['x'],['y'],['z']]\n",
      "    #print combo_df.tail()\n",
      "    \n",
      "    actuallist=[]\n",
      "    predictedlist=[]\n",
      "    differencelist=[]\n",
      "    accuracylist=[]\n",
      "    stdlist=[]\n",
      "    \n",
      "    bestpredictedvaluelist = []\n",
      "    bestrealvaluelist=[]\n",
      "    bestpredictedtextlist=[]\n",
      "\n",
      "    worstpredictedvaluelist = []\n",
      "    worstrealvaluelist=[]\n",
      "    worstpredictedtextlist=[]\n",
      "\n",
      "    \n",
      "    for i, val in enumerate(combo_list):\n",
      "        xtrain, ytrain = make_xy(train_df, 'rating', val)\n",
      "        xtest, ytest = make_xy(test_df, 'rating', val)\n",
      "        \n",
      "        clf = GaussianNB()\n",
      "        clf.fit(xtrain, ytrain)\n",
      "        \n",
      "        sim_df = pd.DataFrame(clf.predict(xtest), columns=['predict'])\n",
      "        sim_df['actual'] = ytest\n",
      "        sim_df['difference'] = sim_df.apply(lambda x: \n",
      "                    np.absolute(x['actual'] - x['predict']), axis=1)\n",
      "        \n",
      "        predicted = clf.predict(xtest)\n",
      "        actual = ytest\n",
      "        difference = abs(actual-predicted)\n",
      "        rangeval = abs(min_max[1] - min_max[0])\n",
      "        accuracy = (100. - float(np.mean(difference) / float(rangeval) * 100.))\n",
      "        std = np.std(difference)\n",
      "        \n",
      "        bestindex = np.where(difference == min(abs(difference)))\n",
      "        bestrealvalue = actual[bestindex]\n",
      "        bestpredicted = predicted[bestindex]\n",
      "        bestpredictedtext = test_df.irow(bestindex).review\n",
      "        \n",
      "        worstindex = np.where(difference == max(abs(difference)))\n",
      "        worstrealvalue = actual[np.where(difference==max(abs(difference)))]\n",
      "        worstpredicted = predicted[worstindex]\n",
      "        worstpredictedtext = test_df.irow(worstindex).review\n",
      "\n",
      "        actuallist.append(actual)\n",
      "        predictedlist.append(predicted)\n",
      "        differencelist.append(difference)\n",
      "        accuracylist.append(accuracy)\n",
      "        stdlist.append(std)\n",
      "        \n",
      "        bestpredictedvaluelist.append(bestpredicted)\n",
      "        bestrealvaluelist.append(bestrealvalue)\n",
      "        bestpredictedtextlist.append(bestpredictedtext)  \n",
      "        \n",
      "        worstpredictedvaluelist.append(worstpredicted)\n",
      "        worstrealvaluelist.append(worstrealvalue)\n",
      "        worstpredictedtextlist.append(worstpredictedtext)\n",
      "        \n",
      "    combo_df['actual'] = actuallist\n",
      "    combo_df['predicted'] = predictedlist\n",
      "    combo_df['difference'] = differencelist\n",
      "    combo_df['accuracy'] = accuracylist\n",
      "    combo_df['std'] = stdlist\n",
      "    \n",
      "    combo_df['bestpredictedvalue'] = bestpredictedvaluelist\n",
      "    combo_df['bestpredictedrealvalue'] = bestrealvaluelist\n",
      "    combo_df['bestpredictedtext'] = bestpredictedtextlist\n",
      "    \n",
      "    combo_df['worstpredictedvalue'] = worstpredictedvaluelist\n",
      "    combo_df['worstpredictedrealvalue'] = worstrealvaluelist\n",
      "    combo_df['worstpredictedtext'] = worstpredictedtextlist \n",
      "\n",
      "        #best predicted value, best predicted content; worst predicted value, worst predicted content \n",
      "    return combo_df\n",
      "      \n",
      "accuracy_df = test_features(stanford_prep_df, stanford_test_prep_df, features, min_max=[1,9])\n",
      "accuracy_df.to_csv('accuracy_analysis.csv', index=False)\n",
      "\"\"\""
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "KeyboardInterrupt",
       "evalue": "",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-22-1c3509b0caad>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    111\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcombo_df\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m \u001b[0maccuracy_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstanford_prep_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstanford_test_prep_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmin_max\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m \u001b[0maccuracy_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'accuracy_analysis.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m<ipython-input-22-1c3509b0caad>\u001b[0m in \u001b[0;36mtest_features\u001b[0;34m(train_df, test_df, all_features, min_max)\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombo_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m         \u001b[0mxtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytrain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_xy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rating'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m         \u001b[0mxtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_xy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rating'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m<ipython-input-11-155d267f17f5>\u001b[0m in \u001b[0;36mmake_xy\u001b[0;34m(prep_data, rating_col, features)\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mfeature_array\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mxrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprep_copy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m         \u001b[0mfeature_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprep_copy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mprep_copy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfunc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m         \u001b[0mfeature_array\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeature_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/series.pyc\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    634\u001b[0m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_bool_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    635\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 636\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    637\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    638\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/series.pyc\u001b[0m in \u001b[0;36m_get_with\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    674\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mkey_type\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'boolean'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 676\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    677\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/series.pyc\u001b[0m in \u001b[0;36m_get_values\u001b[0;34m(self, indexer)\u001b[0m\n\u001b[1;32m    700\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    701\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 702\u001b[0;31m             return Series(self.values[indexer], index=self.index[indexer],\n\u001b[0m\u001b[1;32m    703\u001b[0m                           name=self.name)\n\u001b[1;32m    704\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "### RE-DO! PREVIOUS FUNCTION WILL TAKE MORE THAN A DAY TO RUN  ###\n",
      "##################################################################\n",
      "\n",
      "#here is the spot for accuracy optimization\n",
      "\n",
      "features = [avg_word_length, FK_GradeLevel, google_rank, lexical_density, lyrics_rank, num_sentence, nyt_rank, post_length, twitter_rank, words_per_sentence]\n",
      "\n",
      "\n",
      "### TESTING COMBINATIONS OF FEATURES\n",
      "###\n",
      "###\n",
      "\n",
      "def test_features(train_df, test_df, all_features, min_max):\n",
      "    start = time.time()\n",
      "    #print 'start \\n', start\n",
      "    all_features_str = [i.__name__ for i in all_features]\n",
      "    \n",
      "    ### need to reorder features in dataframes to math all_features\n",
      "    ## training data\n",
      "    train_df_copy = train_df.copy()\n",
      "    train_df_copy = train_df_copy.rename(columns={'FK_GradeLevel': 'fk_gradelevel'}) ##need to sort to make lower case\n",
      "    \n",
      "    # pandas indexing is INCLUSIVE unlike normal indexing\n",
      "    nonfeatures_train_df = train_df_copy.ix[:, :'review']\n",
      "    features_train_df = train_df_copy.ix[:, 'post_length':]\n",
      "    sorted_features_train_df = features_train_df.sort_index(axis=1)\n",
      "    sorted_full_train_df = sorted_features_train_df.join(nonfeatures_train_df)\n",
      "\n",
      "\n",
      "    ## repeating same process above. testing data\n",
      "    test_df_copy = test_df.copy()\n",
      "    test_df_copy = test_df_copy.rename(columns={'FK_GradeLevel': 'fk_gradelevel'})\n",
      "    \n",
      "    # pandas indexing is INCLUSIVE unlike normal indexing\n",
      "    nonfeatures_test_df = test_df_copy.ix[:, :'review']\n",
      "    features_test_df = test_df_copy.ix[:, 'post_length':]\n",
      "    sorted_features_test_df = features_test_df.sort_index(axis=1)\n",
      "    sorted_full_test_df = sorted_features_test_df.join(nonfeatures_test_df)\n",
      "        \n",
      "    xtrain, ytrain = make_xy(train_df, 'dyn_senti_score', all_features)\n",
      "    xtest, ytest = make_xy(test_df, 'dyn_senti_score', all_features)\n",
      "\n",
      "    feature_nums = list(np.arange(len(all_features)))\n",
      "    \n",
      "    num_combo_list = []\n",
      "    combo_list = []\n",
      "    combo_list_str = []\n",
      "\n",
      "    for i in xrange(len(all_features)):\n",
      "        \n",
      "        # getting a list of all possible feature/function combinations\n",
      "        combo = list(combinations(all_features, i+1))\n",
      "        combo_str = list(combinations(all_features_str, i+1))\n",
      "        combo_list.extend(combo)\n",
      "        combo_list_str.extend(combo_str)\n",
      "        \n",
      "        # making corresponding combinations of numbers\n",
      "        # these will match the order of the previous combos and will correspond\n",
      "        # to the column indices of the features in the modified df\n",
      "        \n",
      "        num_combo = list(combinations(feature_nums, i+1))\n",
      "        num_combo_list.extend(num_combo) #combinations that correspond \n",
      "\n",
      "    combo_list = [list(i) for i in combo_list]\n",
      "    combo_list_str = [list(i) for i in combo_list_str]\n",
      "    num_combo_list = [list(i) for i in num_combo_list]\n",
      "    \n",
      "    combo_list_str = np.array(combo_list_str)\n",
      "    combo_df = pd.DataFrame(combo_list_str, columns=['combo_features'])\n",
      "    \n",
      "    #print combo_df.combo_features\n",
      "    \n",
      "    actuallist=[]\n",
      "    predictedlist=[]\n",
      "    differencelist=[]\n",
      "    accuracylist=[]\n",
      "    stdlist=[]\n",
      "    \n",
      "    bestpredictedvaluelist = []\n",
      "    bestrealvaluelist=[]\n",
      "    bestpredictedtextlist=[]\n",
      "    worstpredictedvaluelist = []\n",
      "    worstrealvaluelist=[]\n",
      "    worstpredictedtextlist=[]\n",
      "    \n",
      "    \n",
      "    xtraindf = pd.DataFrame(xtrain)\n",
      "    \n",
      "    #print '\\n', xtraindf\n",
      "    \n",
      "    xtestdf = pd.DataFrame(xtest)\n",
      "    ytestdf = pd.DataFrame(ytest)\n",
      "    \n",
      "    \n",
      "    print len(combo_list_str)\n",
      "    \n",
      "    for i, val in enumerate(combo_list):\n",
      "        now = time.time()\n",
      "        #print 'now:', now\n",
      "        print 'combo number', i\n",
      "        print 'time elapsed', float(now) - float(start)\n",
      "        \n",
      "        x_indices = num_combo_list[i]\n",
      "        \n",
      "        xtrainarray = np.array(xtraindf[x_indices])\n",
      "        xtestarray = np.array(xtestdf[x_indices])\n",
      "        \n",
      "        clf = GaussianNB()\n",
      "        clf.fit(xtrainarray, ytrain)\n",
      "        \n",
      "        #sum_df = pd.DataFrame(clf.predict(xtestarray))\n",
      "        #sum_df['actual'] = ytest \n",
      "        \n",
      "        predicted = clf.predict(xtestarray)\n",
      "        actual = ytest\n",
      "        difference = abs(actual-predicted)\n",
      "        rangeval = abs(min_max[1] - min_max[0])\n",
      "        accuracy = (100. - float(np.mean(difference) / float(rangeval) * 100.))\n",
      "        std = np.std(difference)\n",
      "        \n",
      "        bestindex = np.where(difference == min(abs(difference)))\n",
      "        bestrealvalue = actual[bestindex]\n",
      "        bestpredicted = predicted[bestindex]\n",
      "        bestpredictedtext = test_df.irow(bestindex).review\n",
      "        \n",
      "        worstindex = np.where(difference == max(abs(difference)))\n",
      "        worstrealvalue = actual[np.where(difference==max(abs(difference)))]\n",
      "        worstpredicted = predicted[worstindex]\n",
      "        worstpredictedtext = test_df.irow(worstindex).review\n",
      "\n",
      "        actuallist.append(actual)\n",
      "        predictedlist.append(predicted)\n",
      "        differencelist.append(difference)\n",
      "        accuracylist.append(accuracy)\n",
      "        stdlist.append(std)\n",
      "        \n",
      "        bestpredictedvaluelist.append(bestpredicted)\n",
      "        bestrealvaluelist.append(bestrealvalue)\n",
      "        bestpredictedtextlist.append(bestpredictedtext)  \n",
      "        \n",
      "        worstpredictedvaluelist.append(worstpredicted)\n",
      "        worstrealvaluelist.append(worstrealvalue)\n",
      "        worstpredictedtextlist.append(worstpredictedtext)\n",
      "        \n",
      "    combo_df['actual'] = actuallist\n",
      "    combo_df['predicted'] = predictedlist\n",
      "    combo_df['difference'] = differencelist\n",
      "    combo_df['accuracy'] = accuracylist\n",
      "    combo_df['std'] = stdlist\n",
      "    \n",
      "    combo_df['bestpredictedvalue'] = bestpredictedvaluelist\n",
      "    combo_df['bestpredictedrealvalue'] = bestrealvaluelist\n",
      "    combo_df['bestpredictedtext'] = bestpredictedtextlist\n",
      "    \n",
      "    combo_df['worstpredictedvalue'] = worstpredictedvaluelist\n",
      "    combo_df['worstpredictedrealvalue'] = worstrealvaluelist\n",
      "    combo_df['worstpredictedtext'] = worstpredictedtextlist \n",
      "    \n",
      "    return combo_df\n",
      "    \n",
      "accuracy_df = test_features(stanford_prep_df.head(7500), stanford_test_prep_df.head(7500), features, min_max=[1,9])\n",
      "accuracy_df.to_csv('accuracy_analysis.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1023\n",
        "combo number 0\n",
        "time elapsed 19.6186618805\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 1\n",
        "time elapsed 30.5982029438\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 2\n",
        "time elapsed 41.428704977\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 3\n",
        "time elapsed 52.5270109177\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 4\n",
        "time elapsed 64.2973239422\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 5\n",
        "time elapsed 76.2558479309\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 6\n",
        "time elapsed 88.9260568619\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 7\n",
        "time elapsed 101.136321068\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 8\n",
        "time elapsed 113.56646204\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 9\n",
        "time elapsed 126.294390917\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 10\n",
        "time elapsed 138.820177078\n",
        "combo number"
       ]
      }
     ],
     "prompt_number": "*"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "maxaccuracy = max(accuracy_df.accuracy)\n",
      "\n",
      "print accuracy_df[accuracy_df.accuracy == maxaccuracy].combo_features.values\n",
      "print accuracy_df[accuracy_df.accuracy == maxaccuracy].accuracy"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Read CSV for stanford database "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "accuracy_df = pd.read_csv('accuracy_analysis.csv')\n",
      "accuracy_df"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<pre>\n",
        "&ltclass 'pandas.core.frame.DataFrame'&gt\n",
        "Int64Index: 1023 entries, 0 to 1022\n",
        "Data columns (total 12 columns):\n",
        "combo_features             1023  non-null values\n",
        "actual                     1023  non-null values\n",
        "predicted                  1023  non-null values\n",
        "difference                 1023  non-null values\n",
        "accuracy                   1023  non-null values\n",
        "std                        1023  non-null values\n",
        "bestpredictedvalue         1023  non-null values\n",
        "bestpredictedrealvalue     1023  non-null values\n",
        "bestpredictedtext          1023  non-null values\n",
        "worstpredictedvalue        1023  non-null values\n",
        "worstpredictedrealvalue    1023  non-null values\n",
        "worstpredictedtext         1023  non-null values\n",
        "dtypes: float64(2), object(10)\n",
        "</pre>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 1023 entries, 0 to 1022\n",
        "Data columns (total 12 columns):\n",
        "combo_features             1023  non-null values\n",
        "actual                     1023  non-null values\n",
        "predicted                  1023  non-null values\n",
        "difference                 1023  non-null values\n",
        "accuracy                   1023  non-null values\n",
        "std                        1023  non-null values\n",
        "bestpredictedvalue         1023  non-null values\n",
        "bestpredictedrealvalue     1023  non-null values\n",
        "bestpredictedtext          1023  non-null values\n",
        "worstpredictedvalue        1023  non-null values\n",
        "worstpredictedrealvalue    1023  non-null values\n",
        "worstpredictedtext         1023  non-null values\n",
        "dtypes: float64(2), object(10)"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "features = [avg_word_length, FK_GradeLevel, google_rank, lexical_density, lyrics_rank, num_sentences, nyt_rank, post_length, twitter_rank, words_per_sentence]\n",
      "#num_sentence, lexical_density, words_per_sentence, FK_GradeLevel, syllablesComp, FogIndex: these are the new ones"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "features = [post_length, avg_word_length, google_rank, twitter_rank, nyt_rank, lyrics_rank]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 89
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "features = [post_length, avg_word_length]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "features = [dyn_senti_score]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "##### 5.1.3 Making XY - test/train\n",
      "Create Xtrain, Xtest, Ytrain, Ytest for given szenario:"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Try set up test and training data with rottentomatoes as an alternative (Predicting dyn_senti_score):"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#rottentomatoes test!\n",
      "X,Y = make_xy(rottentomatoes_prep_df, 'dyn_senti_score', features)\n",
      "Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 67
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Prepare predicting dyn_senti_score with StandfordDB:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "Xtrain,Ytrain = make_xy(stanford_prep_df, 'dyn_senti_score', features)\n",
      "Xtest,Ytest = make_xy(stanford_test_prep_df, 'dyn_senti_score', features)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 92
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Prepare predicting rating with StandfordDB:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "Xtrain,Ytrain = make_xy(stanford_prep_df, 'rating', features)\n",
      "Xtest,Ytest = make_xy(stanford_test_prep_df, 'rating', features)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 33
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "##### 5.1.4 Select Model\n",
      "Our basic assumption is the interdependency of each feature within the feature set. As we have only got experience with this naive assumption, we concentrated in this direction. As the characteristics of our features are continous values the classic Multinomial Naive Bayesian and also the Bernoulli based approach can not be used. The gaussian naive bayesian model is the only model capable of dealing with continous feature sets. Alternative model have been tested and showed similar outcomes based on the same feature set. Information based on: http://scikit-learn.org/stable/modules/naive_bayes.html"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Gaussian Naive Bayes:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "clfgaussian = GaussianNB()\n",
      "# printing fit and score\n",
      "clfgaussian.fit(Xtrain, Ytrain)\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictiongaussian = clfgaussian.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictiongaussian)\n",
      "\n",
      "xscale = list(np.arange(len(Ytest)))\n",
      "\n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predictiongaussian\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      "\n",
      "tempdf['xscale'] = xscale\n",
      "print tempdf.head()\n",
      "\n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "plt.title(GaussianNB.__name__)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "lenght of actual 4000\n",
        "length of pred 4000\n",
        "      Ytest  prediction  xscale\n",
        "0  4.607742    5.370000       0\n",
        "1  4.723333    5.945714       1\n",
        "2  4.758696    5.648000       2\n",
        "3  4.779487    5.469600       3\n",
        "4  4.780000    5.648000       4\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 108,
       "text": [
        "<matplotlib.text.Text at 0x178cbc18>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x12c805278>"
       ]
      }
     ],
     "prompt_number": 108
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "NearestCentroid:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn.neighbors.nearest_centroid import NearestCentroid\n",
      "\n",
      "clfnearestc = NearestCentroid()\n",
      "\n",
      "# printing fit and score\n",
      "clfnearestc.fit(Xtrain, Ytrain)\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictionnearestc = clfnearestc.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictionnearestc)\n",
      "\n",
      "xscale = list(np.arange(len(Ytest)))\n",
      "\n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predictionnearestc\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      "\n",
      "tempdf['xscale'] = xscale\n",
      "print tempdf.head()\n",
      "\n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "plt.title(NearestCentroid.__name__)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "lenght of actual 4000\n",
        "length of pred 4000\n",
        "      Ytest  prediction  xscale\n",
        "0  4.607742    5.853333       0\n",
        "1  4.723333    5.531000       1\n",
        "2  4.758696    5.320769       2\n",
        "3  4.779487    5.798421       3\n",
        "4  4.780000    5.339130       4\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 94,
       "text": [
        "[<matplotlib.lines.Line2D at 0x397e65f8>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n4cyZMxgcHMRnn32GtWvXorW1NeQxeqiT8XIpKirSZZ0Ak7t9ZEAkaibiX18uWLAARqNxzCc8Xq8X\naWlpkR5OVFgsFuTm5uLixYvqnIPlYbfbAQB2ux1+vx9Xr17V9Onr61P73O4C85hMDqP7/PcjeODm\nC+WPP/6Ii6zS0tKQmZmp3gkj3jPZtGkT9u/fj6NHj2LRokXqdr3Xy3i5BKOHmjGZTFi8eDEKCgqw\nfft2FBcXY+fOnVN6f72d8wgYL5dg9FAnwM2vFfv7+5GbmwuTyQSTyYTjx4+jqakJZrMZCxYsABC9\nmon4osxsNqOwsBAtLS2a7d9+++2Y03Hj1dDQEM6dO4e0tDQ4HA7Y7XZNHkNDQ3C5XGoehYWFMJlM\nmj6XLl3C+fPn4yaz6cqhpKQEPp9P85292+3GP//8ExdZXblyBZcvX1b/2cRzJhs3blQXHkuXLtXs\n03O9hMolGD3VTIDf78fIyIiu6ySYQC7B6KVOqqqqcPbsWZw+fRqnT59GZ2cnioqKsG7dOnR2dmLJ\nkiXRrZmpnL0wWfv376fZbObu3bvZ09PD119/nUlJSXF7SYzNmzfzu+++Y29vL9vb2/nYY4/RarWq\n8/3www9ptVp54MABdnV1sbq6mhkZGfT5fOrfeOWVV5iZmak5/bagoIAjIyPRmtYt8/l87OjoYEdH\nBy0WC9977z12dHRMew6PPvoo7777brrdbra1tTEvL4+VlZURn284QmXi8/m4efNmut1uejwetra2\nsri4mHfeeWdcZ0KSr776KpOTk3n06FH+/vvvavvvvPVYLxPloseaefPNN3nixAl6PB6eOXOGb731\nFg0GA1taWkjqs07I0LnosU5CWb16NV977TX1eTRrJiqLMpJsamriokWLOHv2bBYVFfHEiRPRGsqM\nW7t2LdPT02k2m5mRkcFnnnmG586d0/RpbGxkWloa58yZw7KyMnZ3d2v2Dw8Ps76+nikpKbRYLKys\nrOSlS5ciOY0pa21tpaIoVBSFBoNBfVxbW6v2mY4cBgYGuH79eiYnJzM5OZkbNmzg4OBgROZ4q0Jl\ncv36da5Zs4Y2m41ms5lZWVmsra0dM994y4TkmDwC7d1339X001u9TJSLHmumpqaGWVlZnD17Nm02\nGx955BF1QRagtzohQ+eixzoJ5b+XxAiIVs3IbZaEEEIIIWJA1G6zJIQQQggh/p8syoQQQgghYoAs\nyoQQQgghYoAsyoQQQgghYoAsyoQQQgghYoAsyoQQQgghYoAsyoQQQgghYoAsyoQQQgghYoAsyoQQ\nQgghYsD/AKCV83ZCuE6iAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1b797208>"
       ]
      }
     ],
     "prompt_number": 94
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "LogisticRegression (time expensive):"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn.linear_model import LogisticRegression\n",
      "\n",
      "clflogreg = LogisticRegression()\n",
      "\n",
      "# printing fit and score\n",
      "clflogreg.fit(Xtrain, Ytrain)\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictionlogreg = clflogreg.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictionlogreg)\n",
      "\n",
      "xscale = list(np.arange(len(Ytest)))\n",
      "\n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predictionlogreg\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      "\n",
      "tempdf['xscale'] = xscale\n",
      "print tempdf.head()\n",
      "\n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "plt.title(LogisticRegression.__name__)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "lenght of actual 4000\n",
        "length of pred 4000\n",
        "      Ytest  prediction  xscale\n",
        "0  4.607742    5.931273       0\n",
        "1  4.723333    5.717500       1\n",
        "2  4.758696    5.787500       2\n",
        "3  4.779487    5.620000       3\n",
        "4  4.780000    5.516667       4\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 95,
       "text": [
        "[<matplotlib.lines.Line2D at 0x39815550>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x4462c748>"
       ]
      }
     ],
     "prompt_number": 95
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Support Vector Machines:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn import svm\n",
      "\n",
      "\n",
      "clfsvm = svm.SVC()\n",
      "# printing fit and score\n",
      "clfsvm.fit(Xtrain, Ytrain)\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictionsvm = clfsvm.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictionsvm)\n",
      "\n",
      "xscale = list(np.arange(len(Ytest)))\n",
      "\n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predictionsvm\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      "\n",
      "tempdf['xscale'] = xscale\n",
      "print tempdf.head()\n",
      "\n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "plt.title(SVC.__name__)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "lenght of actual 4000\n",
        "length of pred 4000\n",
        "      Ytest  prediction  xscale\n",
        "0  4.607742        5.67       0\n",
        "1  4.723333        5.67       1\n",
        "2  4.758696        5.67       2\n",
        "3  4.779487        5.67       3\n",
        "4  4.780000        5.67       4\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 98,
       "text": [
        "[<matplotlib.lines.Line2D at 0x1b914198>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nLVu2zCguLg76XEtLi5GXl2c8+eSTvmONjY1Gr169jH/7t38zDMMwzp49a2RmZhpr1qzxnfOPf/zD\nSEtLM9avXx/bwcdIz549/QJIZ12Hzz77zHC5XMb777/vO2fr1q2Gy+UyPv/881h/rA6xXxPDMIx7\n773XuO2220L+TrJfE6+GhgbD7XYbb731lmEYfF+87NfFMPjOGIZh9O/f3/j3f/93vic23utiGHxP\nzp49a4wcOdLYtGmTUVpa6gtlif7OxH358uLFi/r44481ffp0v+PTp0/X+++/H+/hxE1NTY0KCgo0\nYsQIzZkzRwcPHpQkHTx4UHV1dX7Xo1u3biopKfFdj48++kjffvut3zmDBw/W9773vaS5Zh29Dtu2\nbZMkbdu2TT179tSkSZN850yePFk9evTwndOVuFwubd26Vbm5uRo9erTuu+8+nTx50vd8qlyT+vp6\ntbS0+Pbe5ftisl8XKbW/M83NzXr55ZfV1NSkkpISviet7NdFSu3viRR6+8hEf2faffdlR506dUrN\nzc3Kzc31O56Tk6Pa2tp4Dycurr/+elVUVGjMmDGqq6vTypUrNXnyZFVXV/s+c7DrcezYMUnmHa5u\nt1sDBgzwOyc3N1d1dXXx+RAx1tHr4P392tpaZWdn+z3vcrm67Pfrlltu0Q9/+EMNHz5cBw8e1GOP\nPabvf//7+uijj5SZmZky1+TBBx/U1Vdf7fsLju+LyX5dpNT8zuzatUuTJk3ShQsX1L17d/3Xf/2X\nRo8e7fuPaKp+T0JdFyk1vyde4baPTPTfLXEPZanolltu8f25uLhYkyZN0vDhw1VRUaHrrrsu5O9F\n2mc0VUS6DkYS30A8e/Zs35+Lioo0fvx4FRYWqrKyUrNmzQr5e8l0TR566CG9//772rp1a1T/m0iV\n70uo65KK35kxY8bo008/1blz5/TKK6/o7rvv1nvvvRf2d1LhexLqukyYMCElvyfS5W0f6RWP70zc\nly8HDhwot9sdMMNTV1enQYMGxXs4CeHxeFRUVKT9+/f7PnOw65GXlydJysvLU3Nzs06fPu13Tm1t\nre+crs77OS7nOtjPsU7BS+b/UE6cOJEU12rQoEEaPHiwbyeMZL8mixYt0l/+8hf97W9/07Bhw3zH\nU/37Euq6BJMK35mMjAyNGDFCV199tZ588kldf/31euaZZzr092tXvh5eoa5LMKnwPZHMZcVTp06p\nqKhIGRkZysjIUFVVlcrLy5WZmamBAwdKStx3Ju6hLDMzU+PHj9eGDRv8jm/cuDHgdtxk1dTUpD17\n9mjQoEEaPny48vLy/K5HU1OTtm7d6rse48ePV0ZGht85R44c0d69e5PmmnXWdZg0aZIaGhr81uy3\nbdumr7/+Oimu1cmTJ3X06FHff2yS+Zo8+OCDvuDx3e9+1++5VP6+hLsuwaTSd8arublZLS0tKf09\nCcZ7XYJJle/JrFmztHv3bn3yySf65JNPtHPnTk2YMEFz5szRzp07NWrUqMR+Zzpy98Ll+stf/mJk\nZmYazz//vPHZZ58Zv/71r41evXolbUuM3/72t8bmzZuNmpoaY/v27catt95q9OnTx/d5n3rqKaNP\nnz7Ga6+9ZuzatcuYPXu2UVBQYDQ0NPhe41e/+pUxePBgv9tvr776aqOlpSVRH6vdGhoajB07dhg7\nduwwPB6P8bvf/c7YsWNHp1+HH/zgB8YVV1xhbNu2zXj//feN4uJiY+bMmXH/vNEId00aGhqM3/72\nt8a2bduMgwcPGu+9955x/fXXG0OGDEnqa2IYhnH//fcbvXv3Nv72t78Zx48f9/1YP3cqfl8iXZdU\n/M4sXrzY2LJli3Hw4EHj008/NR555BEjLS3N2LBhg2EYqfk9MYzw1yUVvyfhTJ061ViwYIHvcSK/\nMwkJZYZhGOXl5cawYcOMrKwsY8KECcaWLVsSNZSYu/vuu438/HwjMzPTKCgoMH70ox8Ze/bs8Tun\nrKzMGDRokNGtWzejtLTUqK6u9nv+woULxsKFC40BAwYYHo/HmDlzpnHkyJF4fowOe++99wyXy2W4\nXC4jLS3N9+f58+f7zumM63DmzBnjnnvuMXr37m307t3b+OlPf2qcO3cuLp+xvcJdk8bGRmPGjBlG\nTk6OkZmZaRQWFhrz588P+LzJdk0Mwwi4Ht6f5cuX+52Xat+XSNclFb8z8+bNMwoLC42srCwjJyfH\nmDZtmi+QeaXa98Qwwl+XVPyehGNtieGVqO8M2ywBAAA4QMK2WQIAAEAbQhkAAIADEMoAAAAcgFAG\nAADgAIQyAAAAByCUAQAAOAChDAAAwAEIZQAAAA5AKAMAAHCA/w+vCBGsQowG7gAAAABJRU5ErkJg\ngg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1bb1f0b8>"
       ]
      }
     ],
     "prompt_number": 98
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#from sklearn import svm, cross_validation, datasets\n",
      "#cross_validation.cross_val_score(clfsvm, Xtest, Ytest, scoring='precision')\n",
      "#Valid options for scoring are \n",
      "#['accuracy', 'adjusted_rand_score', 'average_precision', 'f1', 'log_loss', 'mean_squared_error', 'precision', 'r2', 'recall', 'roc_auc']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 104
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Decision Tree:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn import tree\n",
      "\n",
      "\n",
      "clftree = tree.DecisionTreeClassifier()\n",
      "# printing fit and score\n",
      "clftree.fit(Xtrain, Ytrain)\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictiontree = clftree.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictiontree)\n",
      "\n",
      "xscale = list(np.arange(len(Ytest)))\n",
      "\n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predictiontree\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      "\n",
      "tempdf['xscale'] = xscale\n",
      "print tempdf.head()\n",
      "\n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "plt.title(DecisionTreeClassifier.__name__)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "lenght of actual 4000\n",
        "length of pred 4000\n",
        "      Ytest  prediction  xscale\n",
        "0  4.607742    5.591613       0\n",
        "1  4.723333    6.250000       1\n",
        "2  4.758696    5.540000       2\n",
        "3  4.779487    6.134400       3\n",
        "4  4.780000    6.181250       4\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 99,
       "text": [
        "[<matplotlib.lines.Line2D at 0x178c71d0>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nTdg+4CKE+XIYqoYM3uIEJcw86bImQ0YIZTU19dEXdTJq4N5O+GLiWM1DD63mww/DQg62kawvQrxn\nSLXQlu7Gb7/2wYNFbN6sntUC7MUw5gL1QDYFBduYM2eqpQypEB6tA2D8wTCWeag37yGTIub6G6uA\nPB+Yj2HA5z5X3+/7bprvSb7PeoShQsWt/cR/v6dKGzDLmW4zkpMxY0bw/PPLo59rapa6TqCxyjB6\ndFHSv5G49fuamqUJuU94Re5BPSUl73PRRWdYxtdUt4fa2ipGjXoKv99aVml+k/c9mWfsTZl68/t0\nmudjtY+FC+Vc40MKZMNpoJTvU4YQvD4AhgBvAKdhCmQfAEeYBcC4cUUMHbrEUadpI206uAQBEdWw\nbFmjUV29xCgpmdFrNXAqVKXJqKG9VMSJRIV4RdZkypYr8XA+Q3L1Fi/CK1Y9WFX7vTNvuD9DYhFV\nbr8rLf2GUVl5a8a/N8NILPo10XaYCnN0b++dyHXs78lp7kjM9GYfRzItatILs5ze0bAnW9+J1kVv\n6izV9ZxoezUj9+z9/Fue/SXV7aG3fSsdfVIllXNUutve+vUbo+bH4Swz/l0xT05GRFVWuZgtP8Vw\nRx9R56x0ik4ZoSlrbq7mxRefjJgRGlzPSURTlQptUaKanFjasHiq7FjRjEePjsyILVfiYa/rLVt2\nc9gl9Zfbe4u3coqnabSq9hcQy6wQi94GHdif/ejRPezfP4TNm02n0kx9b4lqcRPVVqcj4WgqHejB\nnox0KuvWqf27mpycWywmzPLy55kz5/yY+QlPlYhZs5wb2LPnA/z+mYwaVUpZ2aCUmboSrYve1Fmq\n6znR9lpbW8WaNUSiL2cBeZx5ZhE/+MEM13unoz1konN9KvtnKq4Vr95ra6uYPLmZt5qnciYtDEFs\nmdSB0IrlILRiIzG1ZPuA0VPnMz6/3nEtic+nRmKmmLSJewkCGMk4VPYF8TQ569dvjLm5aTxNmddK\n5mS0hIk+V7q0cKl0dI2VW0yWf9Cgr1o0G7DUgGVGUdHlFo2V1MC6PXOqVpSnitO3YSRW1mS1xanU\nEPRFXdr797JljZ79/VTQXJ9MGZOt797eK1Pq8VTRcBpGZjrX98U4n8q+vnH9emMiIu/YVWDURjRh\nlREN2TWYm40vBeNqMO6cNSvuddMpOmWEpszq1xHboTKdWP2LDL7znUtdcxO5h9kLOjuz+c53Lo2p\n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\n9bceYruTXBRIX9YW/vKXh+jp+RRig/qnSRcZJJTFltoliQxovU3PkKjQ4l6G2OU6mSipiy8enfDz\npDIK0h78g8GPAAAgAElEQVR5M2rUKEaPLvIQKNKzckrFBOYlEBcXH1Z8imbiNvAMHRrm2mvV6LLV\nZGV9mfz8wRQUhLjttiomT65waG3i+TiWls6jtHQxfr+ZcLagYBuBqDIu9p6eqcarnv3+I7S3P4JX\ntLGXBhacQSvW52sBngA6+NvfwkyaND/qw2HVSJo+LDk5b/GFL5zDwYP5lkS9oGoDapDaVOFJ8kXG\njNng8bzmteX5+flByzvx0lb2pl2q/SmRsc7r96pjs1rWWEK7u5ZrjGd5Sktv5ODB/IQiXtVxU138\nyN9BfJ9Y55jdOyHIeh33PlRfX0d9/RNs25ZridaOVX/ifZ/8YjSWMO9MpeQWAOcMwqivfyKSSPse\nku2nscYSs82YiYeLirLp6AhRUDAqKszbg6Huu29LzGjcRLC3h/FUUMBW9rwgeuoIhC6+KHK+1I6d\nQOxjuQXYj1Uge5vTaOOQ5T7muBG0leApxF6+kmZ6es7Grk1LC2kzjCYIEPUxUJM4VlbOc922Jpkt\nPeJt5dNbvLbZET5l7j4HyWzv4eYTECvBZaqeSfVzWLas0dOXq7T0xpjPmupypWvrLLn9hvkcNxkw\n3Rg4cGY0qWg8nxlxTmw/qVjJcO1JTM1ntbcXUcbBg+emJfmmVz2bvijxffrcrun+fBsN8PbhsPqU\nib+cnJvi9qVk/Ca9+nBh4SxbnXtvh5ZMu3TzdywomG5UVNyeUMLak9nWLNnyVFbO65V/rNfYVVl5\na0JlVduLSM7dO18meR13H9CNRn7+LUnX3/r1G13GAtEnS0quT5nPm73PzJp1p218Md+TvKfVfzP5\nfirvW129xJg48SZj2DDr9eO9X3VuTtQ3PBEmFxcbE8GYCMb5kb8vRv6uwvQN+yIYnwfjQjBqcPqO\nnYvPY0wVf2ec8TUjK+tapd42GmD3N11m+z1JP0+iZISmTN2QHBIz9SWypUcsM5ZcbUIexcUjLP9P\nZGXoLMMNbNrU6hnFlOjK2isi7JVX6i2b+8YjGRVy7HBpNfJG4Pc/yvjx11BQkFi07MmQ6PuO9bxe\nq1PhaeCMujSMW1i48DJWrWqO6evY1NTCffdtjBlWHuv+xcVjeP75BssxaQp69dV3FPNfbDNMKvCq\n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\nYR8kIAAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1b8fd208>"
       ]
      }
     ],
     "prompt_number": 99
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Linear discriminant analysis:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn.lda import LDA\n",
      "\n",
      "clfLDA = LDA()\n",
      "# printing fit and score\n",
      "clfLDA.fit(Xtrain, Ytrain)\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictionLDA = clfLDA.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictionLDA)\n",
      "\n",
      "xscale = list(np.arange(len(Ytest)))\n",
      "\n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predictionLDA\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      "\n",
      "tempdf['xscale'] = xscale\n",
      "print tempdf.head()\n",
      "\n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "plt.title(LDA.__name__)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "lenght of actual 4000\n",
        "length of pred 4000\n",
        "      Ytest  prediction  xscale\n",
        "0  4.607742    5.591613       0\n",
        "1  4.723333    5.531000       1\n",
        "2  4.758696    5.787500       2\n",
        "3  4.779487    5.798421       3\n",
        "4  4.780000    5.864444       4\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 109,
       "text": [
        "<matplotlib.text.Text at 0x12f79a630>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nCgzHVsiyJkzgf+rrw5RjN3A9emKWnb2ZOXOmJN+fDOJog4uSaLIQCxNoT025ydw12d20e+NDsGzZ\naist7dprzqJ8AAAgAElEQVSQZaG8vDt6VNZYBdSNpR+Hl5k/Vj43hYX3WUVFi42lncTLjLePyve7\n5ReYDB+ocG0we/YPPcsze/YPPX3vou0v3SljX9813ZP8e92TmXmFIdPu+uta3pNRj4l2e+hu34l3\nf41lnS9btjqiH61l9X659OoJE6wJqOVJvURp7qqcblwzDxUPt1wZrhx+/zd7lU/LOgmWL7siFrPN\nnppy4z3TjWSl6W7avbEqVVTczjPPbGDrVuf9Bw8+2iMrSawC6oabYTc27qKsbGnU1q1ws7jc3INs\n2VLl+G5XdRaubJWVNaiJmXN5LT//Q1auvD3uszC1y7KKRx+dRXt7Fn5/C3feWdKtHbSxskp3x/IY\nTm5PP72cJUvOj7o8XcmcztemTZ9EXcZkW7qiJVyd9yT/Xvfs3n0m9fVlKJn+2HWH+n5+/iyKis72\nTCPR9ZgMt4fu9p1491evOp88eTSVlTU8/PDr3VpJeeutPTQ3/8xxzT1O9uQdG84qBsriBfYyZTPK\n6aATOANlHduLc7myZcwY/t/27Z5pVVfXsXbtbtrbv9ztfCaUuKl7URLPLJgzJadTpXJSBXU9WbPe\nWO9I6q2VI9FWkp6eGVpQcFPYnWDdTSsvb25MLXF92apiWb0vQ09kOhFy58xXciyZ8SLa3Y96LCwu\nnm8VF9/WLQuSs/+kfv0lY2NBsqyB3dkQEE3f9LIwRtNHu1PnP5w9O6JV7LvGtWKwirCPSir2sI5N\ny8gIax0LzV/vZSOeektKWMqmTq2Iedya0JlSHX7/rbS3Xw88BYwA4MCBM1iw4CnWrIn9US5dEWt/\nqd5aORLt9xGNE7TXbG///iw2bnzE8ayu6i3cLE55IoTSkzL3FatKJHpbhp7IdCLkzpkv25KZl7eD\nSZPG9Ll2Mumqzp1joe2kb3+3awuSs6+q72Vnz6SwcASjRg1MufqLZLWJ17iejP7fnTSj6ZuRVhS8\nMPtoV+O5dtoH8BHZKgawD7UFZzDQhnLi/zswGqdl7PdhLGNubJmIfLpKskkJpay2tgKIrXk5VABL\naG+HtLQKOjsvxgwc19CwhPLypxO+6y/WO5J6u9Mr0TvFoh1Q3A6vU6dWeD4vUr2Fe/GPGzeAIUNi\nV+ZonHNTnd6UoScynQi5C81XCVDC+edX8MorFTFLJxl0VefOsdDtpB/dRNC7r94RF1mPhdIUye0h\nnuN6ovp/vCIJhFPciosXUFjYvQm01fghh977Ffd+80fci1qeTEftewRbEQNbGdOKGCizyYHATzbO\nZcrxs2fz4+eei1heN7ZMeLuXAN1yiYkXKaGUaaIZHKIVRqcA2jsKOzv74x6U4EG2bZvtuOIUTnX/\nli0ZzJu3mqeeik0HjrWFoLczte7eH6uTDmI14Eaqt3Av/uXL5wJ927qVSkRqm1j6PcUyX5A60eZ7\nQldlc46FPZ8IJkLhiGYyXF1dR3n502zb1oRl9eO003JYvnwWYJ840NjYQEHB3TQ02Bb1wsL7gcyk\nn7DQW3pqMGhs3O95/cgRe4d9OMUtN3c0y5dfFgyb09BwiOzsEcEdz9oiW1lZw+43VkFbI2mAhVMR\ng8hWsf46T8AuVDT+MYHrjcDI2fNY+dyTYcsYiVBrbwmFhfcHFbJw5wK/9daehI4LKaWUQeTBoTvC\naA9UbnP9vDBPz3T8Zwun8/5YHgwbDwtBbwfOaO+PhyUx2hdjT+qtqxd/XxmQe0qilI5wbTN58uiI\n8tJTuY32OKBIMpOKsfA00bRbV/3BqbSldmiKaJZi58z5OYcOjQHWALBxI8yZcwNZWUMdSlhBwXwm\nTryDgQOHBvv7ww+/7pluyjh5R0HP3V7acC/bwf1Ylu3CEc3GARWL8TEOHFBxDD/ddB33NkwJfjcd\nyMd5aFW0VrEjqDexaRX7gBK2o86cSvuiPEL5IhPpHVBWttSjTst46KHnHBsc9LgQV7pyOtuzZ481\nd+5ca+jQoVZWVpZ17rnnWrW1kR0XN23aZJWUlFjZ2dnWqFGjrAceeCDsd4Gone16djyKvkc791/t\n+YyJE28Pk1b4SNax2Gbd26N1kkVXUe27uxW9uw7ivam3detqreLi+VZe3kxr8OC5VnHxbX2m3ntC\noo+48WqbeDhe9+Q4IH1MVn6+fWJBbw8498pXLEIxdKfdIvUH5wkG4Z30u5tv/f0xY75r+f3ftPr3\n/wcrP/+6iCEdukrDDivjHHPz8mZaU6YsswYO/HYYR+3o2jBWcpjMU0ai3RjjzqOq21oLlloqrMlS\nC2od93W1ccDsK2cwNBhlv8jlsH9NGKd9Hc6iCBV9f3LAaX9C4O8rAs78pWAN9TgKKV6bzrzrNLys\nRKE69ZiIlrJDhw5xySWXUFJSwh/+8AeGDh3K1q1bGTZsWNh7GhsbmTZtGlOnTuXPf/4zmzdv5qab\nbiInJ4e77747ooJozly9Zofd8VfRWvENNzzOwYOmtasOuBswZ1R38cADMx3327PPDOOqM5J1TU34\nGXW0loneWraStezSVVT77lodysuf71Zoit5YVhYseIqGhgLMmfaCBXd7bvY4EUjGodiWZTl+xyOi\nu1e5GhpGEO6gYR3A0j3Tz8qa2+O8ufvfxRePZO3a3TGxunWn3bruD+YJBvvIzLyaESNyaGpqJzt7\nBOXlT7N3b67D0hQp37Z1cRQqpvrPaG+HY8fgwQdvBapCQjt0ZZGsrq5jy5a9rpTUmHvw4POBA7rn\nEbrAU4dzMczG3YaxWJ3ojWW1u+N1cElw92c0NBxixIgR7N3rVUc1bNq0k7KypUFrsRrnRgS/lZm5\nDb1sZ5KVtT74dyRrUnV1HUc3Ps4EfgpEtog1Y1vBwGkV6w8MwdtX7LyAr1hZ2VI+q6lwlA/8vPvu\n20yceDu5ucNi8r7T9fvnP79vXNXp7fK8J+5W1Uga23333Wd99atf7ZaWV1VVZQ0aNMhqaWkJXlux\nYoU1atQoz+8Djm3aXoc9FxTcbBUX32bl5c20zHAW6net4+By9+xFafZe1q6lVl7e3IhWltBAc0tc\n6c+34LYQq1k0gfZ6grt8oWcWRt4KH8sZXbgZp5rJdm8mum5drZWVdUNUs7/Y5Du55/AlP6ilkuFB\ng+YF5ShcfnpiPfGSyVhbo7zLZVldHTQc3bmO0eXNq6zZ2bE799S7fLbVqGfhLOznOMeo7tWB/Ux3\neZVs+f3XhuTPvsc5hhcXzzc+d1vy3Pma6bpWG8hD91ZRTKtiJPmPvj57Gog88mqA+v5qC25xlNkO\nOhtq+SwouNnKzp4Wch1utjIzF7jSjxyy46tDhwYtWROI3iI2BawvGd8vQ1nI9HOKCT0s3DvYsFk+\nLytvz9+rzvaYH3h2rfE7fF/uQnXqFREtZS+99BJXXHEFM2fO5I033mDkyJEsWLCAO+64I+w9b731\nFl/72tfo18/Wn0tLSykvL2f79u2MHTs25J577rksMPMoQ1mwXgp8Ugc8TUNDJg0NVcC9wDPAz7G1\n2Z/x3ntNFBbOZOdOOH78jOBz3377J0AO3rMoi85OH1ZgJu/GDjR3D/Y6/KcoS1kZ8DRqY29V0Gq2\nadPd3HJLPQ89VEtz8y8dz9uy5UHKyxeEzKrfemuPYxY0cuSAoPZvzqoaG3eFzGTffHOmK50qtmz5\nhG9/+xOys/+VnBw/X3yR7aiTTZu8w39EgzM/oY60BQU389lnOUAVUIuaBzUD43j77e3B0Ce63Loe\nPvvsC1paxhgp2TOj+vrNVFRUedbTxReP5He/+wsffLCV1tYswCI9PY3Ro0cyZIgFZIbMqEItNnWB\ntmzitdc6mTjxdq66qijEuRMIcS72+l40M2X3LHvTpvmMGPE8ubnDaGzcBWTS1tbB9u07gf74/TlB\nZ+auLLLuul20qNTlJ1KH6l+PcPgw1NTU8cc/PktHx2PBb5h+EwsWvERDw9WB9viM9esfYsyYZ8LW\nb6h1p44tW3zk5OwmO/tWh39G//6lvPZaBn7/LCxrP7m5/fD5BtHa2oxlNZOenusoO+DoD5988oVH\nDXs7M+tgw//zP16z31Kysm6jpeWnwSvRWE+8LFnNzbE79zTUv8dtNarjzTdXU1j4G8e44cZb5le7\nxg6v79SwYYOqN1OuGht38dFHxwLfy3bdo1YS2tvrqKmpoa5uDeec8zzLl89iz54m4zv2kT3vvfcF\nFRVVgXw6d8bBTle+LFTI0CWBZ7wKnANchttfKivrViZPPp+JExeEbApYuHAalZU17Nr1GQ899FlY\nv6HwKzbmcXSqz7755h5OOWWmY3wyx63W1g6amn7tuHfLln3Mnv0IEyc6g7lWV9cxb95qDhy4A1gN\nmG2lIgnk58+isxMOHnze0QZqFeAooRvaHicjYzoTJizgo4/20trqp6Ehh/Jy+/6K+bfRvO+D4P96\nxyR4O+u7LWKfozzX0oFCYGvgf7fTfhPw9/7/i0+PbVA3Hq7j29/+F7KzK4N9fs6cIh59dDUHDvwS\nLbPOelB+X/PmraaoKPpguHrMfOedT4y6G42SodXAHSi5uoNwoTNefXUFcSOSxtavXz8rKyvLuv/+\n+6333nvPeuKJJ6wBAwZYjz76aNh7pk2bZs2fP99xbfv27ZbP57M2bNgQ8n3AmCHdbMENLq3YnF1d\nZ4VqzPrv+VbozEB/35yld61tr1tX6xFsdr4FVxr3e8/8Bw68xvKerddaGRl6RrfMgvlWevqCsPkJ\ntYJ5zc7MdPRsSuf11kD53XVyf3Bm2h3C+e9MnHh7cMY5fvwNFsyw3LM6WOD43320iLKSmfm/3+P7\nodfVsVDXeNwXvo2dljItc87npqd/P6ScgwfP6fJ70czaQmfZXvn2ypdlFRTc1cXRNaF1GypLbrkN\nP+tX1i0zT13Xr9O6E9pm2dnKl2v48FJDLszyepd98OA5Hn5R4WTCfe8/GPd6l7e4eH63fRS764cS\nTR+LbAnvKoCrt/x5B3515938TjSWGS9L2ZKweSsouNnKzPyOZa82uC2Mt4SxprrzfnPgZ74F3/RI\n1/aXGj9+hlVQ0JUshZeHcFat4mLzXRNeFkPHrWVW5H6k+sfYsdcHrJjLLPt9EZrHKVOWecigLs9s\nz3v69ZvuqJPTGeOwhOlgrkU4/cDCBXadgtMi9h2wvoxtVTOtYaczxsrLm2tZluVq6/Dj3dix5jvS\nXdbuW86cY6b5vCXGNbfMKZnKz58ZfHYXqlOviPjkjIwM65JLLnFcu//++61zzjkn7D2lpaXdVsqU\nYC0xftyVZFnqZbLM9Zn590wPIVxmhTZe5EHTbjQvYV9s3G9GgjfN8TPCpGGaR5cY+fXOj1MpdAuQ\n+xl6cDQHzFoLrvJ8dl7erJB26GqZKhqT/eDBcy2lJIUbVMOV16wbd7nDbbjQsnKdx+eRNyHYg5LX\nUma45S2vJZPI9eFF+EHUXdbISz3ebRL+Hr1kk55+bQS5sn+mTFkWaE+v+g9fv848hf9eqFuAV9m7\nqiddVjVo2s90vpydS+qxi0Yf3bKg8/nh+lm4pa1ly1YHlUXn6RNeyv18y++/KmTzivPZkTYwddUH\n3TLmXlpbFubZ+lqtpSbd3vWWkXGx5ZzAWRbMsAYM+L5H2kstmBexTb1dV9z585Z/5SrjLbtOhSLS\n+ORVd5Hk2KuNloUpg1d/M8vj7UZyOpkhSph7SdJLCXM76381cI87yr470n4JGdYA1gXT1xvq1Nji\nVS/OsSs9/coo6ji0XqLrs171H1kJ1sRTKYu4fDly5EjOPfdcx7Wzzz6bHTt2hL2noKCAhoYGx7V9\n+/YFP/Ni587XgbTAf9egTIbawb4d25FzSOBv06Sti2C6G+olqX2B/02T+BbPPIQGWlzq+oYfZbTV\n6eltxO5NBJvxihis8jIX23Svy+DdBO3t2e4rgd9VwCbgZ4G/bw38nY0dGLIi8Pdgz2eb4T90zJ9N\nmyw6Oh4PXn/nnTt55hl7mTMaR+329qNArusb7vu8npOJXVfmlnWzrd1L0Po52a7/w6Wh8jp9eglr\n1hAocyMdHVq+3c6d5vLETuA047peMvFOIxKhS1JmXs3N4qNwypZi8+bbqK6uC7MU6w97D8Arryxn\nyJBZHHQE5zZDx+jyttPY2IDP12rkT/+uQsXVDqWlJZ177rnMcKQOvxmkvT3LlW+vvzXh+jyYjss5\nOTdy+LDzGkBa2o2u7wOUM2jQTiZPPrXHMdFCncbryM5ezbBhfpqa1DKWGe0+nIP4O+/U8+ijtYFl\nGozPHmTDBnuDwsSJtxtt547D+BRQQHv7Gg4dcm5eAcjN3UdOznSOHtX1rscoexkxM3Mj6en1NDcX\nu57tVfe6vtajXLavxOdTry/vNtRLk897fK5k9vjxU4EbsJcudwHDOXbsU/LzZ9LcnMGxY6acNrvy\nou4bMOAdcnPHsnXrMWCYkYbZnzXeISDa2nye11ta0snNHUboeOEuU5PH9VL05iLnd8AZ1NeMPP8I\namOa832SnX0LCxf+A0BABnU76nNdh6M3tJ3BMDJRscjM0clcjgRn2Ap37vT/h1Bv6knAh8BBQqPs\n78zMZep9P+JHP9pIW9vPg/ebG+rU2KLxDj8FdXR0/BnQ+kYpzk16kd9JXpsqnGOm+3n7UC5KAz2e\n+ga7dr1ORYVnkjElolJ2ySWX8OGHHzquffTRR4wbNy7sPRdffDH33nsvra2tQb+y9evXM2rUKE9/\nMoDKyhXMmPEIbW1FwGLs9WNQFbcadQTpSOA5nAc0aB8SK/DbHqCUEjQfFQXFj/JFaDa+53wJgal8\njMRWeEB1Xp0Xnd4SlFhWYQuUXo/Wh/emk529mc7O/rS21mD7QZxqPNdE5evo0YOuaw3ATJQy+FLg\n2m7g+kA6B4BxxjP9KH+60Ge3tR0P+omonWJtKCXW5uDB67j22n9j0iS1Vr9z546QOlO+OHbwzba2\nY4QeW+R+6b/v+rwO5f/g9f1XsdtV7zjS/motwHnY7dlVLKY66us3B/3ali+fS3n582zcqJV+PRjc\nbvyvB7pG45l68FwasT7CEfoiN8u7N1C+z1GDag1KOZuJ9s9raZnCqlXrmT69xEPB249zcFe0tPw0\nuGNv3LgBHDxoDvClwHWo/mXft3fv3eTlHeHgwc1GPvWEYKhn2dyHIL/99scuBVCV8+OPD+Js8/2o\nCZf7b4w0dX+pA97zSL2Oo0cPeObL72/2uGqRlmahJr2Rd8VVVFTx6KO1tLdn09Gxn2HDTqG9vZk9\ne1pISwO//1vk5fWjqekUmpt/iT71ZfDgJSxcOM3lIxTqE6NiIZ2DLU+foV5/I3j77Qaqq9WBzXv3\ntmK/nE3fuRrUGOf0c2loeITy8gU0Ng5nyxY9IdTKRglQjxpP1RjX1qZ3orr7oDneumXOAiYwYMDb\n+P35HDq0xEhDP8NUFmZhj6Ga51HtfCO2Qm33yc7OKg4cqAX24H5p22O0uq+g4GbgrMAxbEuxJ/Xm\nfbcb928GvofyU9ZcbiivznJs2rSTlpY9wHHU+KDLYtZLFfCRx3WtlOrnmbsozVexzvPTget6LFqA\nUns6GDEiOxjY9Pjxj0hLa6Cz83GgjvGcQja6L/xfT58wiE4JazT+NxWxt1BSURD43haG8nFAJosn\nLOCxxz6hrc1WsDMz3+eWWy4N9oXjxxuxZdk9tur6eRW4EDB9Rw8b9dBofNf5Lu/6uChdv3uAS1GT\n7v8IfFaF0htsI0VBwdPk5hbxxhvhY7nFjEhmtHfeecfKyMiwHnzwQevjjz+2XnjhBWvQoEFWVVVV\n8Dv/9E//ZH39618P/n/48GGroKDAmjVrllVfX2+9+OKLVm5urvXII494pgFY69bVBnx2zHVl05yr\n46u4fcpMH4ObLbjLwxRqxiwyfde8/XWc/m3zLZhlqaXKSwNm9NUWXBv4/JrA516mUOc6tDJ5L3Pl\nLZKvjtfn11m2z53b3Ptdy47Btjrwt1l+Lz8OXZ/fdZlqQ31K4HLXNctKT/9+MCaRXW/TLLcPGXzH\n1V7uMoYzI+u6vt+C71u2/5jO43csb58yr/w7l0VsP7GbLadc6f+9ZMxc1nanYVl+/y0RYzRpzN1f\n48fPCPim6fr7ppHmZSFpwC3WmDHfDT7Heci26ZPpbXq3l2/t5T2//0rPe4qL51v9+08LPNfM2zUh\n+UpP/15I2cPvTlxiwQ8DbeLuw2Zdu/u8+3O7fVUdei9jOX2zvP2dwsU2mz1b59O8N7Ttw8U/1Evm\n3i4RZj927/5y5sVeMtM+o6a/6DJLjZGh6Q8Y8B1XOl25cpg+X173hPOhMr+rfVrDjW1u/1ft/+Tl\nn2bWtZfPWa01cOCMoC+gt6+S2z/YlCFdXt0f5ltqXIk0Ln/box7csvH9MPW02lLytMRyls3Lp8+r\nTu1yaD+/0xnouUPSvSQZaTlSxw8zfcoWoJYpzWebPmJnkunRb+4L+BaHyuLEibe7dlXqcej7lhrn\nzfu8/H7dPq5eY4F6l4fb7V1cPN9wX5nvIR92/ebnzwxGhnCXswvVqVdEtJRdeOGFvPTSS9x///0s\nX76csWPHsmLFCm677bbgdxoaGti6dWvw/9zcXNavX88dd9zBhRdeyJAhQ/jHf/xH7rrrrrDpVFbW\ncOjQM9ja62zgGD7fEXJyvktLy3Ha20uA3wTu0OZqvRvjdmxr1U+BswKf6xmYxjShu+MbPcKqVeUs\nWlTKG2/8K21tZ2PGMoMbaG4+gJrdHEdp0XNR+0n0szX28klRUUVwxj1jRmXAGmiWYT3wOX7/t8jK\n6hfYneNVRlAzUDM99wzwXtTy77nANNQsWFvSPsaepSnsnWJtxtU6lCXKnNHXAF/GPRPv6HiMDRtU\nhGV759RSYCXwLaA/aWlNDBuWQ0ODti49HkjDzFMd9qxJldvnW4VlfQy8gNNyqi2XfwEGBerkI+DH\nqNnTFYHP78NeBnkPe0evwo5npWVGl/Nx4Ac4LWI6z+aSeL2RFzVTa28v4NFHa7nooiLHkTDuOEMZ\nGU3onYuHD/vp6PiHQBolwL9jt/2PUO23FNsadz179jwMqKVltfQ1k0OHWujo+E9sK4ATbcHTy7er\nVq2npQWysmD37jOorw+9p60tndzcIo4duxolp3qJ/FyUhU3XbwcdHXPYsGG9436vmEe7d4+gvt4f\nqPt7gX8F/hCoQ73zWtf1wyi5A7vfDsFuN53+Zjo6THl1LmO98UYmubn7mDjxDj799IBrt1r42Gbl\n5Qv461/3Ab8PXNUyMRP3LjC4ILQCUUsp4V0iwB439BL+Upxjk9q9mp5+ANsi0BRI3+xHVpj0tVuI\nuWPw80AZ3DEYlZXO53sKy5qHbSlwLg/m5LxHWtpmjhz5jXHfLuO72tLl3i23D5iN399Ofv4xDh5c\nS1ub6dIyBdvypevFHIu84mOWMHHi69xzz2VUVtYEliztzxQ/Na7pPn47tquHudy9FLUYZ5bZHDtr\ngC8RapF+GvVu+AvwcuA5pejxXVkIC/D7twR29Ou6vR5l+dkb+L0GZb35WSBvuhw1aBkNLke2AzwW\n9ZKk2xKmd0p2opYk+wd+tI3NbQ3bSjav8L/Rfb64eC+PLL/a0b8nTx7Ngw9+jBefftrksWN5PTCC\nAQN20dHRTHPQqO1eJl+Jklf3uKzb0aah4RFaW+d55KCObduaaGtrDdw7Czgd7wXDEoqKXueNNyoo\nK1vKxo1x3G3postjlq688kquvPLKsJ8/8cQTIdeKioqoVXu2o8JeMnSari3rQZqaAOrw+2+lvf0U\n464SbP8jc42/Cacfmkm78X0Tde+bb9bz5z9/RFubhVMhqwPa6OjQCtMPAr992L4Z3j4I5svwvvvq\nWb58PZ2dZhmU0H3960qwndVmlhGU35yZnntg+DFKSPWym4UaGEfg93fSHmJ11ReOYytFNYT6S4UX\nE71+7zzs1fbPmTZNlUu5GbrbucL4H7RZOj29k/79OzhyJMf1ubns0YRTyTSXHNfglKWthGLmpcZ1\nzfQd9JLN+ag6M9MNPYYLMEK9vAo8xoEDbkW6wpUH/dwSlFJi+ivWAGvo6OgILmmtXbs7sCRWEbhv\nFm7/E6+Dg00fqrKypQGlzLkMsGPHPo4c0cpsCepF7q4Pm5aW0CNsvNPSsvJjnDLwupGH0YG6MIXW\n7Ldm+hUe1+tob9/Hxo32pKywcAmjRmV4LKl6y/e2bU10duZ7fC/D49vhj6dpaTF9hMy2qSMt7d3A\neKDL5vYVU+3f0bEAWxYqjO9YqMnJbtztDvfj9x8L9PtduH0NVXs60wGwLOUbl57eERh/wazvr35V\nj1XmfW6F0xy79PeUP1V7OzQ2zqSt7d9RY+kMI+9VKBnWCZu+tdEcMu6VD3Oc0PWr69vLx9M9llV4\nfO6WmeGB8t0Y+L8UpwvECLKzNzNsWAHbt+v+rp9hoZaf9wLfxvSnHkA1Y/k2KvCEah+thHWieolJ\npCXJPa7PzgC2oRxBOvA+4mgzJWznUlcdKHJzKxz9u6Kiioce2kR7ezi/2jaXT5fdVzMyPmTs2EFs\n3arD5riXfWtQy5h6crGTUNcXe/w6cuQL1/WngYzAhEyXpR/O9nYSGkbHHB/jR3yfHiU7d+qXpul/\n8LzjWnu7RVran0hP/z7Hj/87tj8Agd/HUUJ7C0q4K4GzXc/9DOU/MNxIXcdtuppjxyyOHXsQ+I7x\nmWpM1Wn0tW2Bv1uxXwxPA7dhz8rUwLZ79wgmTlyAjj2VmXmI1tabsaz/CH4vM/Nf+e//7k9Li34h\nm5gCk4PtC/IrVzk0h3EPBrAZn++Iqy78QAOZmd+jre08lLvmAtQ6/ZkR8uD0e/nzn9OC/mlOh1M/\n2dmbmTx5Cm+9pYcDdwwp9/9qYOvogCNH6lAvbU0J8BPjf/fGDj0rX4ptTSSQF/N/M22zLLcCWunX\nDrZeedSDvJYHtzXWjrpuWZbxotAvQ7ciretWv7BNawHYCpn50oQFC+Zz9OjBgLXCfI7TqpGf/yFz\n5mGRINEAACAASURBVKj4YQ8//HowDpoZX2zRolI2bZpPQ0MbMDaYs6NHnefBqrytx+kIW4WSxWxq\na/vTr983GD16JNnZ2Z6x91RaT9HQoJ3MNxvPcisO2trg9j3RuP2VTGocccdAtUt+/kyP75ptrPt8\nEwcPdmD7LGKkf9go+zrU+HAI29Kh8PtvYfLkCwLy77ZS+UlLy6Kz8wqcsmeWUctKHcrZeY3xHbff\n435MP1b1mr0cv/89VP2Zm2k0U7DHQ9OXp4bm5nMYMODtQCxCHafO3adNWQ7dOGArnKF+jrYP3V5C\nY5OdwfjxH+DzLWHLFtMHeDNOXx81xn78cQdNTWuwfW/NcbgqcE3L0EZXPbsV5XZCy2LKl9u3WJev\nDCWv2s4U6rPX3Az792v508/QL3yt1MEozmBwYJKfhlLZtL2zN35hI1BSotdFPkRJ3QiUBB8gg79w\nDRsd1k1zlcKU90zefvuYI4bk5s376ez8LaofOCcfsJq2tjTq6zcb12pQ751cDh58PjBZqiM7eybD\nhvnZv9+Ma/gZqu43oN71LSj5zzGeZ09g29v/BtyMUpJ/gurHL2PLUR2qH5vtbU5+/8R7743Dslbg\n9DPWZfo/xIuUUMqUyXk+ylBq7kx0VkRnJwwbNh/Lms7+/QVYVn/ULKsTu7KGokT3/6EqWz9XV/hT\nODuufqnqF+e9KGVLp12AsxPWoER5CQSd/XXaT6NmOq1kZo6hufmX1Nebg6eyluhlh4yMv9LZ2Y+2\ntmLa2nT+nLPdgoI9gA7SOgu1OykT+AqhgRVBdUGdlv2c48evYfDgGwIH+drX/f6rAB9tbYWoF8aZ\nhA5UpSgl12wjVZajR+3jpiZNamfPHvsA1+ZmWLt2CXPmjAq89MEp/KbjstvJ82lCX3TfwHbKtYzv\nmrsh/TgDSTbhnInre7ZiDpjq2nL8/u/R3n4DSvGYH/jM2Sbp6Qfo6JiF02LmxLkLM9LuQnddryc9\n/WPgm3R06O+6X2o6QKTpgG3uJNJOz3dx6aVjeeihTYE2cQ8sqt1WrizDsj5DbZxYEUyjs/NdV15v\nRyllxwJ5HoVa2jsLVY91tLW9ytatpmVQHWVkHkOzZg0sWrSSTz9twLLuwN6McwDn7jTT2lCOGsB1\nnzNlPLTfZGXtoKXFri+taH3xRSOZmd8PWGn09YPGM/UmoTWoMcHc8KP/zkItkw8EirEtRc4l3fb2\nf2DDhvVcfPFIXn/9Odrbr8eeKL1DZ+e9gTJcjz2pm22URVsFnsL5+tXjkd5UFKq4g7KQZmefSX19\nGc4lPM0e1HhiKznmM5qawO+fQWbmWtra5qCVtYcequXqq8eRlbXXqONQJaSzU69wmEuUpiLdjjNA\np1LOsrNvobJyMQCLFn3I1q3fRVkDz8aWhf1AeyAAboWRd62clQMb8fkysKzfBq5NQb0fdFubMlNO\nVtZ2Ro5s49ixYzQ0nG6UxZQvLZPjsMeiz4x60zviryfUDQSam+8wgijXo5buv8QotgYVMT1yuI8w\ngq6VsH2oEUkrcaZz/i6UxBaglikbgfdYxme0Y/Z75xitN6/NQMmjlndobq7jgQfWYln/jpJ/PVGd\ni5JZ3U4+4JccPQpHj9aRlnYdnZ1noNqgHts9RCnzzc1nMGRIA6tXXx9cGv3v/94TWPb9ceC+97D7\nq145Mt/xWlaWodp8kFGecagg9Hej2s/cSJGBGgcHGYaTA3gFro0XKaGUwa+xl93M3T6hM6yGhnn4\nfP8Xy/oy8FuUpvwl4xt6wNJ+ZQewB50a1NlpT6Nmnt/GuUxVB3yAElvdCN8L3KcHjwyU0XgYyteg\nAbsx56IHHHvQNy04uizqpXn8uDa1rzCuA5STl7eDSZPGsHDhjYDtl/OXvxzhyJGiQDm1QJrKhrnu\nbvJbOjquDrl+7Nj5gfRN36nQ3aNXX13IunV/58iRxwn1e1FWiEOH3CcM2Nv6R4zoFziVwcufTFvo\ndBnMF6NezrAYOLCd4uJc3n9/Fl988TmWZe5+1XXZjnPmvYXQmfh7qF09pp9ACbCe885bwI4depec\n6atob9Pv6NAWUtNi5iQrqwPL0opjpJ2hKm/5+bMoKjqbrCxYuHAZ06eXUFa2lJoaCO2mpl+FiXm+\nYQctLdt58cU02tp+7brPRlv1Dhzw4ZSjV1FKl7l7uR01Q9UzzodRIVC0Ymvmyzsdvdyh/H9KUX0x\nDdUWFZ51k5f3U84//yzq69MCEc61v9nvHd8z+83+/QPYuFGXxZYny4K2tiqU4j4eW850Xz0D22et\nATV+nI+SwWbgfwe+l4mawGgZ0j6VoUu6b721J6CQuZetvfySfkpa2kFycr6DZfloamoP1P8+43va\nv9a832vsuJzKyhrq60sI3fFo5lkvnYfKx6FD2n/QzntzM7z00q2MHAm2O3EdoUqIijzv9z8cWEJ1\nWjNsNwOVb/UCP4TPl0ZlZU1gp/KLFBbOZetW0+9P+67q/9vD1MVHWNY5xrUc1LumDqevVwtlZeex\ncOECj52yTgtnv35NZGRYHDuWRmfnDwP53oOabIMaM+5FyZxX2JwSxo9/ltGjy9n12r9BRzNQTTqh\ny5HZOENYQHi/MI2e2mj7otcuyQ0By/DgwTPo6Pgb6ccy6AhuGrfbIz19U8BPFZS1yZR3gJqAQqZz\nNsD1jPWoMclcPi6hs1P7dC9AjR/uCcW9bNy4m299azXp6ce49tpzOfvsQurra1D982mUyqr9A+tw\nvuNNWRkQSOMItkXTPDUIdL9T3/khqq9oH9E6lGps7giPLymilIFSckxzvRmrzOR5LOsC1ACQj9KI\n3evPv8EOn2EqbJ/hfOGD6pRgd+x8lHJVhR2eYBROv6YzUB3RdEI3Z60VeFtw3Hg7GEIJ559fwSuv\nVASv6nX7qVMrAn5npkCaM5KMMM+FtDSvuGXueDpmh0onL+/vPPPMHUyfXmKk7f380NhqCju2j10+\n5wt4OKpNdLnMTnU72nn9K1+xYzapvAxDxZUB55KDqahuwjkTr0NtDPAuQ27uaIqKCJTTnWedHx03\naBjhjndZuPB6wIwhZM603T5fr7By5e0hsbLs8Bluf0UvHyUtDzaHDi0lspVO0dKSjmWZc3LdD29B\nvcjMWbTe6q83JXg9P3w6mt27tXWhAOfL1U0Jkyat55VXKjjvvB9w4ICX/Oj82P1GbYnXdWfKUx3K\n/+orOBXBcD5Q6gXu86XRv38OR4+a44D5iuzKp8xr2VrXk9PnSq0IKAvzj3+8gZaW8Shl2JQb0+/R\nuw40SoYG45Y7e+lYy5HXeOuVd2hu/hmDBi2gsHCJ4TPprYScddaztLTotjAVp+eNv0FbV48ds63v\nAKeeOt5Q/sx8adzxv8yx12wXU2kw+9p1wXEF1FhbVPS6y2dOPbe19RlaW3+Oc4PAD3CSgeqL9qRp\nPEVk63BA78Ou9yMfXwShRxiBczmyE2V62IaSDgg9zqgReJd5fEYz9uYQNS4cOnQuxcUNDB1aEJj8\naVS5cnPnGf6XuYSPOamXod1WzxJ8vtlYIXtQ9LjahHK0N+XrXpTv2MtYlvI//MUvvkdBwWEgD7V6\n4sPpoG9OLJpwxufUhzrdgZKRp3HG0rT92tLTH6WjQ/tUm2E6vNxf4kda119JFOYgVUKov4nmaOC7\naSgN1lwT1gzA3sFidkoV+8c5wAxAWQMaUEtazYH0h6AUv7uMfJSgGncvdkC7ElQjmoJlztzajWte\nZQ4/mHuhHOrddbUcZaL9GcpE/1fPe0PjNenO5M6ffmYFkyadHpw92v4A3nn2jgelyhIa28UUelNZ\n8RPNS72xcT+qjccbeS5Dz4DT0i4jI2MtyhStrX4VqJfp+LBlcObV6ztHccqn/ls/v5xzzmkPWoRW\nriyjrGw9EyZ8HrCG/YbiYrUTcMqUCsrKylm50jt4qb6/uLiBrKzbjE/MfKkdbcry6MbtxBq+zJmZ\nZtvp+j+Ec8NLDfaGFu2T4eVz1bVMNzQcwl6i07j7sd6kMI3q6jq2bDHjOkVOQ9ddXt5OVxpa3vQ1\nd/14WV2WY1nPGfkvQS0SmfkJn3clT17L1ro/uZful7JlSwaPPlrLyJE6X/moMUrLWQPe8dqc9azr\nIT//EG45hSlkZ99K+PFW+9+En8CoZ6/G2+dPMXr0MObMGYXf7w46rDel6Imtl3V1vTHmmbjHK1Od\nMcdes128zkCuA44wdaraZac30Kg03cpoDXY8My9lD0ZxPRN4kAn4jN8+BvB+8BxJH8p6NTLwM8D4\naXL9NKAUrT2Bn7NRKkUHaiH/w8B9p6HsWPn4qGcdL2PxIrWs5zo+YzTqHaWVTD0ZWcHmzRlcfPFI\nCgtDZXfcODPOZTOhbaB9MfVKkrnCcgswnX79WghFP0dvXNthfPYBzphxAD9n//7PSUvbE0inA2f/\nAdtVaZsrn8cD6WgZaSJUyVL10tFxJmbMSft9VIp93mr8SRGl7FaclaxNxoMDn9n4fIcC3z2MmsW7\n/U4qgP8hPd1tQQF7GcZkIqoa1gTS047W2oJWYlzT/8/D5/vMeIZ70DUFTacfOmgXFOxh8ODtHtfv\nYuHCaXixaFEpBQV7cQpkHbZ/2e2o7jnf8Xl29kzS0o6SljbfuEdb+LzzZ74QFy9+NbB0FP67d945\nxbNzL1w4jUWLSl2fleL334o9UJovhsgv3OrqukAgzR2uvKgXaFaWjwsuODuwIUTLh1Iy1eDk3cl0\nvdt5DS2nkj+dlq4PW4ktLOxg+fK5we9Pn17CK68sp77+MT7//Hn+9ref8Je/rOHdd1fzxhsVvPLK\n8ojR5KdPL+Evf1nDr389m7KycqZMqaC4uIHBg2/Atq78AmW9deN+KYVv4xEjMlFL9fo+CF2a9WP3\nhRqUX1Ujdt/QPlfh09GMGKGfbTrZ2wpuXt48h8JaWVlDc7Ou78hl0UyfXsJFF52KU57cypi7fswJ\nl5OCgsGGDH8DpaCbslcGzKR//9mOvC9aVEp2tlvhUeOK6o9ui5l6aR448EuOHcsIjBEDcC9U+f3K\nPy5SHeh6eOqpOygsNPvBcgoLd/HDH54fkKvXKS4eSEHB3a683IH35FjtTqusrDEs5N5tMnnyCNau\n3U17+1muJ5QAo0hL81rqU8rphg07+eyzBo9xspT09FuM/2cFxhNwWpLNd8NRbBnXaTwDvExtbQU1\nNStYvPhVqqvrWLSolKwstxx4TyDOYFVQ+crnFw7lKx2nAjYSO/q9lyL2ObYC1og61DsDpYZ0oJYj\nBwRq61SgjUxqsViHxW+x+KjgRgYU/BHnO1T774VaPFtafsqGDXsDk8dyJky4hfz8mWRnHwPaDHmY\ngrKS6zYwfYL1MrieFOtVm2paWu7C672nnqs3rpkKtem4vxQlq0uxrGxOPbUg8P1svN/LTajJizm2\nfwN788UsbIXOzJNpGNAn8mj3jXfR73x7AuwVbiN2+Cwr1LiYSHw+H0o5qENV3gBUHCR75piZuYoz\nzxzFqFED+fjjj9i69XSU0++gwI+Oo6T8hZYtK+V3v6s3tsO7o8Cb6+Kmb4LpS1ONMhC/bHym0vD7\n32XJkisC0fD1cqvbEVD7I5n37sfv38PZZxcGjl9Rg2d5+dNs23YUyOS00wbwwAMzI76o1aCxkk8/\nHRyIJ6QjdZvlUmnm5Gyis3MEzc3ap6UMe0fpcOylVt2ZDtO/v4+vfe30YDRy5du0wvFcr7Joi5qK\ngaXi1ujrOt/mZ0OGtPHLX34U2LFj5lsvMZsbHu5izZprXPkxfb50+6v4Obm5o6mtrfBsu/b232M7\neat6HzjwML/4xd0hed21az8NDYcZMaLAJX/OnUU5OWl89aunO8rbXSJFlXczceLtjnAPXo7eKrr5\n4MDuOVX+zMy3OfXUoYwefZqjfezl4DpUP8knNEq87itVwBuo5fsqlJ8OqPn6PLR8pKXt4dRTCzj7\n7IIQOVA+O3fQVVtrVP4qcLb1LnJyDnDhhReEyJpZpwsWPBXYGKH93bTPmOnftJ6MjL/i97cElnNf\nxk1ZWTkLF04L9NcmDh06hGXdjyl7MI2ysvWO5TCwwwXYu8mUwjJpUge/+tUHAZk0xyKb4uIFAHz0\n0d6AbORw1ll5wSNrwvU3N159E3DI3MUXj2TDhr2B0xj08qJ5tJtuIy1bOnK+e3xQO3+feup2Kitr\nAv01VEazs7Ufqtc4bO+Gy8jYhN/fQnp6LhkZOZx22gC+9a0JbNiw14iRNcIj787xKiPjC5qbc7HV\nIe92fuWV5R59bCkDuNgIUaHwoab17p2RGrdzPjhtdma8sAEob0WtRvhwHmH0CUP5hFuwfX3H8cUX\nmY42feedepes3Y5SSPTynUkdeXlVnH/+2TQ27mLv3txAmyoKCubTv/9RDh6EI0d20d7uRy2QdqLe\nkV7vPrccqzawfR3t9159vY/jx/UE80FUfMt7cMsJ3ERxcXagPepQPmGPYPfdT+noOExnpzm270Up\njPtQNsYnUa5JT+McRz5FjUNgy/r5gd9uX1DVb7ds+RFxU53iFpY2SoBgdPOysqVhowEXF8+3SkuX\nWBMmfN/KzLzWsqOum1H3bw8e2OyMHGxGtXdHAHZH2VbRndPTrzIiK5ufzw9GLl+2bLU1YMAVge+W\nWHCT4zk64rL+Pzv7OquoaLHngd/hiHRQ+Lp1tcbB5ZEO5XVHjNZ/u6Nfq8NY8/Ovc6QTeoi2+jEP\naO0J9ikAznxnZn7XGj9+ppWXN8vKy5sbjAQdmp/wh0uHO0B9/PgZPTowWn9WXDzfysi4zjIj4hcU\n3NSjA61Nwh1IHe653m1Sa+XlzQr2pXXrah2nB+hr4dvC3Q/mWz7ffOPa6kD/8YoG746greQpL2+u\nVVw83youvs0VHdsdrd+uT/PQ9fD5Uz/uw4e92k+3W17eLCsn5yorM/N7jnSzsm6wxo+faUTt1uOE\nfTCybuPQUxSiP9zc3Rb2SQP6OfHpZ+GIJHOh8qXqatCgeWEi54evB/UsPb58P9Dui628vFlWUdFi\nj2d4RfPvuk+EL5d7LFanOOTkzLYi1fe6dbXWWf3PcUS0Pw876n1XEfPDRc43D/Q+H6zJYJUYaRTj\njJw/lvMt+7SA6yyYZ6WlfdMqKbkxINczHYfQe/dlHRHf67r7veD8jhov3d9dFuE53mNTTs6Vjrwu\nW7Y62C/797/KGjhwhpWbe6kV7nSM4uL5rr6n+q5+PzgPOXfnqdbKzLzCysoqs3y+mxzPzcz8Tkhe\nQ0+BcJ7QE0/VKSUc/c1Z5dSpFR5OnXXU1x/h+PEC1Oy9A5/v78CT2NtWlQa7fLkKkqlni7NnP+IK\ngAnwNGlpVzFoUB4tLV8YUYT1d7STo7bETEdp3P3IyjrGRRcVUV1dx2OPvUtTk71FWFn1rg1a9SZP\nPp8NG8rZtWs/W7f6AiEyVIiATZvmM2LE8454URA6a7Wtcf8/c+8eX1V1Jvx/z8nJPeTCNQlXiaAo\naqGjg/POhI7zSmqxarWKWgRHqSh4aZ3X2ldgiCJTLzOdgpKpU5ypaK22TtvXYkdDa02s1dERWorF\nWxAEIYAxIeR6ck72749nP2etvfY+IfrW98fz+ZxPTvbZe+21nvWsZz3ruQrYqQWMQ6o9Nom+q6h4\ni3XrbuD++59HTgV2IfaDBNXPwRQamgBVa6v993+/Qfj0UczWrT2Z4tifBEwVANNvSDNt2kh27Hgo\ndL9qkqQ/OuYdaG3IRKKNhQvPy/THLRadl3cPe/dOYGDg9Mwz8XgbZ511ypAFoxXkN+P8XVCwi1NO\nGcFdd139iXGgEM50bbLKuzTx8sv72b793YhWjFO8DcPpW7Amp2gnCgqSVFf3U16+nP7+lE/DizEZ\nyDVnVDPBs7/RdLS3N9Devh05qTf696lTtl2hw/SxtDTY/3D/BMQ0NoHZs5ewe3cX/f29pFLj/Mhn\ngZYWcZgX8MjNLWfcuCOUly9nxIgxfrTrEkubo1BG8LQvZpzgPEVHPGbDd1Qi3eCcuxGSMg/bt++l\nrm7lkJpTF2yta1RuOjUJ2+sDGmlpyWXx4g1MmjTKaVHmaM4c0SJ97nP1mWeMNmI5ZWXdoSLv8n5X\n87GCKVOKGTOmxE8bpLzlQsQHKCqaMxjFmw3sShepVCHd3W2+JtLgVTSnwQCaE5lMPu/zYRPMjEke\nKjv85VgpKqI81kAwY3sIDwJzMKkqopO2TmIPfhHVTLqV51B8DA4209y8HnH1F560bVsjX/rSv5KX\nN+j0QHBVXHwv6fQNVv4+O79agugUS0/4Gjfb8gNhnz7QdRCP99EWKEMr1o/u7s/Q3S00sG1bM9u3\n/4B02gRo1NRIep6//dvvcdj2DvJBKowcpKLiCjwvj6lTS/jiF+fw8sv7uf/+5+nv/9C62x3bPpLJ\nqcCDaHBcbu57nHZaGSedVMPPfnZ9QIsdiw3iefb4ZIx2hZ5PDT41cW+Y4HYh+kRs14XT09Y1AQm2\nsPCyyLqDQenZfCoqFll1AN3aWV9zas1lq0U3vNN79pNL8OTm1tcytSmzt38sDcKsWW59L62LadcW\ni679ZU5IX/JMvc9wnbHVqzdk1S4NBcPVfnieq/m0ayNm1y6pZuLUU6/zxxKtmSssXDqkdq2ubuXH\n6usngWyar4KC6Hp3H1dLMxxQjVLwnVG1F4On1VjsAi9aE6u0ZT+zOuK+4eE0StMUXL/RJ33RrEfX\nuo3Gf/Z+/Sm1xkGNr/K1oeb32FoixdPQ2jxXGzbceqCGvoSv3OHg4Y6QlnPz5iZvxIgLI3E2e/Yy\nb/XqDV487s6P1i/+ZLgOa8rcdlZ4JzIpoAE7lWDdR1cL9nnwvsTQWjC7dqTdTp3/m/u+YB3JUi/I\nh29w+u/SpFvjOZvGK2gBWb16Q4aOi4svcJ6L0qRdZf11f4vmP6tXb7D2jhUeLMjS/4/Da5tCFo4g\njWqdZP3/Om/oscln6tQF1r6idThVS56dN32aotNxoSmzT4FRJ+JY7DCet4hgSQ87Z43kztE6jDbE\nYv1Z3ppk/fpGWlv1pL8EOaPk0919hAsumEdnpxvGLdDSspaKisVE12JzE4filJaA6Pxr4fp7pjZl\n9vazaRBMWZ08JJJUnRvfRSJK9YRipwII9lFODisRHz+FYB9bWy/ivvseD5wybG3eUHDsvhsI1g/U\nOQsn9HPzYakP2htvaMRRdHj/Aw+sipgnAXc+h/tbfX0DDz7YRCpVSCLRy403zqW+Pro2ZTg6FcJZ\n6RtJpRTPH09LMxxQ7YnUeTNakJaWGMXFGhvvRibW4nn1BFODJKx7oyKTFaLSg0TPv/bP1TQF103U\n/DWSTLr5lUytW20viP/sdBA9T9mjpYcCaSucdiEev5iiorhVB1dgOFoicLV52XPT5ed7We9pbX2Y\nWbOWcMYZqyx/JZu+oioErCUWW575TzXPR49+higYMWIML7+8n8FBd340xUV0KoJj4doe/3iupJwf\n4mZg17xgGukW5Q/m+oJlS1HRQXTtSPz73TQVXUDbpFqefd8tRbgUsx6S1vdDhPeaqIhiBTs9UNAC\n8thjoo2aP7+W0aMXZDRXAknrOU3wqykr3LkQOjD5FdOZdfvYYx/Q23s6JvluPWHIvsZuu+2c0L5Q\nWLghlAMzWL+4CZOiys0dB8FyTArN7NrVSZCf2T6nw+dNf0o4LoSyxsa7Axu5rXpOJHrp6iqgv98m\nPDtaSdXnKfbtC+s8p0wpob3dzc8j4b7799sK51JUUDl6FB566FaWLj2R9ev/K6JWHojpb3gMOszI\no9Aede3Y7UcVfbaZZzA/GMhCs3MEZXuP9sfN++JCY0AgA2hpqWPx4g3MnPl8pMO6bVrRQtFiSnIZ\nvwEjMNmpQKKEyaGEYo2SDdINzDvmhiuHIxckTcjnPlcfGmd9fQNr124nlVqeededd27h7bf38JWv\nzA859EcJqMGs9PbYFaLzUg0Xooql79vXTpRDdk/PxVn6AOGEve9Y90ZFJrsZ3BdQU1PlB4wMX7AM\nC9Hu/GlU8gnONZmPV199J2N+D+I/ig5krisry62M7AKflFnffPM8XnzR3WxqGRysxfOuIBudHguC\neBnO5qf5yYLvSyZzQgELCoavBGHEiDHW+Daya9cmoguxu3VBbVD+FFW66ffMmRMdmQ7QUF/PB41r\nOdWnXVf4guEJYBA2R/YiMf+2cdDOmJ+9dqQIX2qe04OiBPnaOO8AvoKsoRQmy3wH4cqVhzAJTaP4\ngibtVbNt0Dx94407rGL1NhbGExSmzkH2xSWE8zE+ziOPLMtikl+GCQzJlg7KHX+Kzs7WyD3tgw+q\n/Pq8NriHPx17VO44VzmjPO4s57o96xptmUdxcScLF56bKVf3acJxIZSBOb2BXWRZIC/vIoJd1ROm\nRmAIvPPOVzNMVjecZDKHvLx3SCaNz1JlZSsXXPBn3HefnlS01JIhkNbWIh59tJkzzzzRSawn9yST\nveTlvU0yGSRUSavwpcDYwhtuFJG6NRYB5g1rA3A1CDYEBY1ajN+KXbg6rLEoLNxJb28zkvdlZmTb\nAi4JCbG3tT2ZKa5uC9xBvy31XXqfGTM8brvt8mGMw8bTxxWK5wH3YOqkKqygs/Mga9YsGlJz5/qo\nJRKPZx2naMjshMICP/zhxfz61z8LRDhpqaN16+oCjMhkpQeTM+rY44VjR3KaeQiWRJINNKw58byv\n+bQ4mjDYdFrr4+Z6UqnRhOsERmn4ln8iDV9YiHZr2Gl1EHsDMPPR3m6Kx9sbwb59h63CyGDPteCo\ngXj8ixQUlFFYOMDChXM/Uf/nz6+lpuYnEZtNM93dbUT5YXV2HnRvDkEQL1GCqviprV/fyMKF43nw\nwSba2sKC+K5d12f1GT2WxrC+voFdu9y0I+F1tX59Y6gNgcspLHzc0bhIYt3HHlvBmWdKv86dPJkD\n75vUFZqOAj55NKSCmy0fJPHMLuu6mzG/a8wY/vPQISdiXcDWdJp6s3bkcTM5OT8gnX4IWYcqvPER\nRAAAIABJREFUnN6M5O6yabsfk/rBTS4NUMuIEQ9n6kkGNWbNrF37OKlUjfPMAR87tjClfQj7/mo+\nRhvkQOD6mEZVn5lHLHYpnjcdmy4OHLg1Q3OusBdcJzY/dPMxgpll3dOPOu+PqorSAOzBTeYM0Nd3\nHt/61u8sf9VPr/blcZISQ7owd65oHFxihma/tNJPM/+HSyUIzJ69nLvuWuA4bEvhWnMaP9d37FXn\nyX2I03KQKcViS/j7v5/tpL6wQ7U3AbuJx4soLCzJhKlHMTE7HL2zcx/vvddPR8dk1AkxFmvH8062\n2m4kN3c3EycOUF4+2tIkDR3y7m7EgJMSwA5v17Dgd6ms7KG6ekLmPXPmVPGtb20mmaxCWJAWpw6m\nL8jL+7JVxgeiw/obSCT+k+LiUZbTbTjM3j5JumMxQQ8HMQWUo9NAVFUVhAIoDD1oSHQQZs9ezuuv\nbxh2So8dO3YGDg4KGk5fXn41R45MiMBFdNoDfc6GsOAUrmlaU3NHJh+WrfkSp/xo3Mr7dNOICl+P\nCp2HU09dSm/vh+za5SEmbWGGlZX7Wbr0z0LpCZ5+eis7d+bS13ca4bm+I2vS3OFCON2F9D8vbz15\nefjmPzvFips2Ru4fNWoDM2fOCDjEd3buIxbLZ8SIMc5ch2luKLo9lnN+ePNWs3w+UXNQU7OYd999\nJHTdxUvw4DNUfUwJhLjvvqaQecjGjTuWqKAYe05Hj15AW9s0hkqVMX9+LfX1DXzrWy+QTE7DPdz+\n9V/nWelCBKYxljyMRcTWG1YS1IhFCV9wbAFMNWtFBNNTKNiasLbSUl49ciTw+zPPNLNw4cN0dNjz\nJDy9rGwff/7nE7j55nmsWvWEk3JD7hs1qoHKyjJ/Dff6b1ST2haCJerWIXq6E3ALtefkpP014K7x\nqLQwIObTXgzd6e9D8x0bTGk4CM69BnLEKS4ewUknVdDRcdTXpOK0MRQvtOlY+xXDLQUm92gghD7z\nCCKq22kw7LY0b6frFhPlKhPLYj35E8Cn5q02TAACTnTZHGknTfqy4+gXHc5cUbFoWE7ZQSdX11E5\n+Iw6QCcS5w/h5Dg8J1zP8/wAA9uJ1nbYvNaDJY5D49dDbbuh/ya8PtwnOyVARcUib9y4L3gjRlzs\nlZUt9kaNWhAZIOF5nldScolnHOuv9eALHvyNB/O9goLLMo66QzvVumHtq73swQUG31FjWb16g1dR\nschyylzt92uZV1a22Eq3EI2DujoJ6Y9678d11D6Ww7ekKom6x75mnHArKhZE0k8w7YkXGLuGZ2tq\nFpO+4uPQf1Qfo51iBb/XeMaZVtfc8iHTQMyada1XXPwFL5G4wCsuviKU4uT/Blza1raD86Pr6lJn\nTG7QwnDSQwzNJ1y6ray8JpMOJCoIJtopf7UnKX6i+dtwYPXqDd6oUZd5ZWWLvZKS87zKygss/hXu\nu0lNkQ03K7yCgqsyaRe079nSrcg6s9MR6efqwPPGyVpSG8ViX/ZqahZl+Mo0CkPO+Nkc8S/h2Kko\nbId8bed0/9nPEnbGd9NTnJw3IZJGwvPpOtuHcZktJcepp16XSf8E8601qvxicZZ2V3q5uV90Ur5E\npVpx14bwE6GPKGf/lV5x8QXeqFELvJkzbxkytc7mzU1eQYEGB3zdi1pXuiY+Li9WequoWBCxtq/3\n3JQh5eUXRI6lomJRBE+1+bW7FqKCThjWOvwkcNyYL4+lzp4x42QaGs61qsZ3+0VuXUhmcdhu5tVX\n38n4/3R2fuRfr8UUKA+D+nB0do4jlZrgX83uPDuck78EGNjla2w/KTWlGmhtvYgrrvgOs2c/nzVV\nxosvRhcDf+CBVcfMGp8NEoliomoqAsyda04zZ57ZnJkX0SrYd7ph7ZpZOnsQQ7b0EK+8soozz5xI\nY2MwhQLAnDmr8DzPd1IPPmfjIHiSM/BxHbWPZb6ZN28KP/xhVLmr4ZvS9LtJewJuePZrr+3wfddm\nM7TDe1SZKrs/NlweaTaHPFpbR+Jqm9rbH8y4Hrhaotde28Gbbybo7X1G3paCI0c+ebmSKE3U1q0b\nQ/cF+YjizPVtstfxcBziYSjchulWUi+0tkantLH/PvDAKivp6UrCPjAKrkEtDM880+y4gDTT1/c4\nqVRB5P0ffHCU6uoSxzxk1yEWOu3rg23bgnSaja+YkmtHsE1e8AGrVj3B/fc/H9BATuPLogHzgBZ4\n6s5NFBDUhLnmSFcTlq1Yt+tTNg1TL1JX/ZvAaCThUi7QRi5b+SldzM88N2rUgpB23OX7hgZsR/Fo\nXEb72jWza1fMD0wC8eXaSZBf6HPhoJuBgXAQXDjViuvSIveddtoSDhzop7U1aGrOy9vJCSecQHV1\nSSB10/33m/3o5Zf3Z9akKVR/hCitk1kT0UFPx3LHCNbp1f43EIu9judpyhDo61vktGJ8cG+77Ry/\nNq76tj5v4cWlrCjz6KcHx4VQJpmyjSo0m1+PzQRmz17Ctm1BJ1DYSUVFytow1Z58GIjR3v5EZnMr\nL7+YvLzrSCYX+vdGevNTUJB2Iv9gOJueCzZR/f73bj4Ye8I7nN9E7Xr06CmZvr/wQiPJ5K2YHCwp\nenvdkjgy9lde2fexcxwpnHBCMdu2HVvAvfnmeRkBzRSC1vlzi5QfO7Iq6Pxr5nDLlnfIy8sjFluC\n59n5bYQ+vvnNn7jNATIvtmnvT+GofazI0ba2XEy5KyPU5uW9xciRt9LaWsRwBXsRoMJO3wUFad93\n7UlMhNNwfc/sSCvXL/L7fhZvkw/orrsWDOngunPnm1x66eEAXrdvv5aPPjpCMnkzNq22tNTxwANb\nPjY9Zssjp/n07ICF3NwuKitvdbKT7wfsax/XIb6OoepNhp3WXUGvmZaWGFdd9TBnntnIqFEDNDbu\nzgQ0lZaW+j5A84CthAuIu/UIo4XUsHCoUbsLIvt+4EAr99yzzBpjI+LSETWG4R1Ab7xxLnfe+c9A\nsFrHiXyH5LYtfIiYGyv5EWCy4tvwcYWwDqDH+t+OhrQpP1oAW8MbvONfuQIRgIxAVlNzB4WFVdaB\nMzpgxCgEbB+sbLh0fSAbicX+QG/v/7HuWQR8B7BxeawC8jZIPwoK7Pxk83yfzyAP1PJwUrHiCpLJ\nHgYGxpFMPuXn12zmhRfuwfMm+CXsBA/PP/94oK3KymvJy1vvu7W4DveKgwZEbD62T3Z43UcJs/vx\nvKDyoK8v+x7jBhPIAUHLuLk80S5X50Yc/+nhuBDKbPvxsaIJFdasWcTChd+ho6MN21elp+dWzj67\n2nGiDPvNdHTMwESabESq038VuxhqIrGUOXPO4IUXVKugExPlWClJEjWRpeflc8IJxaxZIzU0hyYq\nO8rIDd3dhLAv0/9k8gLCTsA2wzWnqiNHoLFxeGkqXAZ/wQUzeeON50kGDufSti3gugltAVatEjy0\nt3c6b3Ejq+zgAsH3gw+qWsi29z/C4ODZ9PUpAzPJ/7TcTLBgtYHOzn0RPoafLOJP4Vh0KsxZ/TaC\niXHvvfcirrrq4cioXlewf+aZZt57rxXb2RkgJ2cpI0eW096uWhw7vYIyl+zh3KWlE5DIqi0Ic7wc\nqKS4+B3gJHbt+rfMvarZyqYdhGb27UsxOPjdwLXWVq1FF3ZY37fvQz4uRGtQ6/yULFoO5aHMxllZ\neS2zZ0vi29bWDkaPriI3t5Pq6uWWr5i2lF3zqRHh3/rWgySTo8i2kYS1/O7hQhPqQmNjA7ANW4vQ\n1mZvRoWIcB0MUFqz5urMHdmE1MJC5SEqOKhQUI4bzQg7KS4ezIzRpLcZ6gAaPpS566e+fhnf//42\ncvdIQlaF4QhfCsPVhCnkIILWB4jCLSoa8mDZRLYd0f40AL9B6ieqY7f6bf2eESMuYfLkiRkesX59\no69NzK7lDgdW2RraaIGpuHg+6fQk+vr+BUkvE74nHv8Og3bYJwf9jwtRdFzLjBmbGDt2leXzKYnN\no3hX2O/UjDmZtDXyEEzTI9Da+jDFxVeQTDYjfmQ2aCCAm8JCaLyq6miIlsLrPrx3hCPV5b6gMBrk\ng/Z+FfTfVZ54DgUFZeTkDDIwcMhX4GhfPz04LoQyF4ZSi9v3nHDCE2zbdjn2Kby19SJeeWULVVX5\nltkg2wl2JWajOwpchU0gqdRXeOWVLXR2KufWPm0CbgDMZFdWXsN77w3Q0TEJjdrYtg2WLLmVoqIP\nHYfGMFHl5W0jlfo9g4OVzm92BnSFQsIS+3Li8WsZHPwsUs/t54Ffj3W6zcbgL7nEzXY89Mn5mWea\nWbVqk+/g/QRRwm48fpiysh/R3n4Zim+t4yZmFxUqNEfcSoJ1GFVVD2PGrMqYJU3B6qCgB3nOoq6l\nt7eW8ePFrPnMM83U1a0ctnO2wvCiXoOm1gkTVvk4CHEQIKy6X7++kY6OU3BNhun0V/jZzx5ncFC3\nKo1ytE0FgttRo95k3bpg6Lrpn4fgdgwwj3j825YmyQ2jn8v27a9HmDfWk0yeYb1XN60ZiGDhVmdY\nS2vr5ZHjHwqi3RKesIQI13RYxdGjf2BgYCzJ5JOWsHYrGzeeA9gmjKFzpr388n4r35m9keyju/tD\nbr/9B+zZs5fc3OssLYIdKeyum3C2eskfeDGCt/9ABYTc3Hf9w8fVgU1E6oeGzWmjRi0g2tw1BhGB\nggL+4cMSZfnyy/utdZ7tAJr9UPbUfat4rbk5c2cJQ5sf7fuiwBXCupAi3WqOtM2QoMZRt1bkJLb5\nmfE1qOHAQ7f69WCb/FZcMyCARyKxl+rqkkCwj2gTo3NXPvDAKs4+u5rnnw9qoeLxtygru5H29qjU\nQrXE49+mu1v3kmihqqJigx8huwnRkKkA6R4QVBt8ESp4Fxbu5IILgjkSdb4BPM/LXLMP5cGUURr8\nU+/0LSr6vpG+vh7//S5Pdt1XgvwxqppHeN0bYTYvbwSQTyrVFSGU1VJdvY4jR0x6LY2UjtIwS/S7\nBuOlOXDgMwFeaAcLPvdcqJt/MjguhLJPal5LJtNkO4WPHm2b87LlCbPznXXhEgjAvn0/oK0tRTC3\nUi3l5QuZOtXk1zp0qIBt26oxTFtTa3QiKRhskHdUVFzBiBEp9u0rJZn8BSYvzCME/TBccE2V0mZJ\nST2dnXHgs9a4sudxswkzKpqwpWUtJ564ih//+MqMRmj79r1ZNTxGsFPNXrP/7lmIJqaAeLyNBQtO\n4Stfme9EOS73T0S28KHq6OxkqpqlbCWbpk7NllNJTvszZy4NRSoON/ntUDBUWaBbbnnOEjyza7PM\nuKKg0U8X8DZy0v8upmwRHKs0yNlnV/OrXz1KOm2E5VjsErq7NcrWDaOXVARLl36Wp5/eyu7dkr+n\noqKfgwfzSCbtNWYfeqJoFaqqKkPXjhW5GNbU2aH30Vqp7m63PIwkjv37v5doWzDazs7Og8Ri0Tnz\nwvPgoSXHjh69lTfeEC2dCmwFBXsYHNxnpcxxn3fN+iAb9L0MDrp+QubwoXgSGor2y6ysLKenx85/\nZmvibcFd+ENvbyWLF2+gqsqeK3MADboLyNxqSSIAWuD28/8hkI5iEBGObPg40ZAQLk9k5wRLE2WG\njLGVz8LM/8GBAwci+dnTTy9B5m4DIhhoHi4FV6MZ5gdBLXfQjHnoUBup1JXYPGhw8CamTNnElCmt\n7NwZ1NxUVl5DW5uNmejDwfjxRTQ3P0rQahKVXuZqR+MpidXtNCJRB/Dt268FygJCSDx+v/+9AbOH\numvQ/t/gLp3WKG6bJx9C8gaWIklpwxDlT5ZNQz84OJH2dpO2JifnqwF+Vl6+kJ6eybS1GReGxx5b\nATREli9ct64uY7Wrq1vp+CcHD/KxWDiC/k8Fx4VQ1th4N9u338rGjR9vI2xt7SDbKXz8+DHWNZfQ\nXQKLylhs3iGLO6hmPeGEggxTB/xacBAOM45OnAi1TJmyiTffPMrgoGao34k5iWzx/7oCHWRjbz09\nxYhGamVEP5p54401jBjxZRKJYkaO7KOnZ7x1ooraJETosTVCQznKGzWzjsE+gS4DmhkcbOTZZ/fS\n1tYY2nSDPku1/vMwlJOlLuKhNFOeF7WZy2m/vT2coiJKq/hxUx0AlJYepLh4vv9MMaWl5Tz9dAct\nLbaQkF2bFRyX9luF7L1IaPxfIDqIyxFtbxg6O/dlNIGa9uHttw+QTv80cJ/nVeB52ka0RvSVV1Zl\nHOuVuXd3a0i6K4C4OcoMjB8/IvD/UHVHFSdhQVfXretHZ/c9KpM3vPdeV6ZtW9iROTbaA4Wgn6pb\nWcTW0gn99fU1E4t9FxGE7IS6OoduogX5bXCwwLkvfKAy6yzaUXrChLHEYoWW434tUiN2A4afhIXu\nnh7X56yWydxEibedYLDP2oDwFWd4CVmzCV92VnwbpiEVe7XHbk6wFvJoygRENAAvANPZsSNBNh9h\ncal4AuFRmofLFsqi6D6YDHvKlOLI/F/t7dDbu4iow30y+QPGjx9DMnmY1tYFlJQk6OpK0dWVZmDg\nZILzLXVEKyq6OOusScyZM4H77mtBhOl6Z0TGeV0TSK9f7yb0DvoyHj78ES0ttoVpH62t7dgpNeA5\nBgdvw1SBmeb/5ib0PYzxm3U1jk9Y30HdC8RPzt2Tm4E1vPRSGRUVizOuP9mq/IQz/O8gnQ4GlfT0\ndNHR8VgAWy0ta3nwwQVOihtjDXjkERzfwCAMJ3nz/y0cF0IZrKS1tZsLL7yXGTN+QnV1SSCiw80f\npN/DGYkFqqoqOfvsal580U5ouSOT8DEe/4jc3Bt989kKhHFPx2gc1OlylzUJQ6tZDdN2F3WCYAka\ngYKC64E8v5RSNl+gRnJzB/G8a0mlDFMsL99NQUHQibmm5g4OHCjzI1J1M1yOLLzDCJM6i64uabuj\nYyXB3C628KgCaBFNTSXEYudRW1tJU9O/W3i9Els9PmfOXP7jP972n1dc2JpIVbtfQXt7I42NCV58\ncQPf+MYO6uuX8cwzkjE9CDYD+EfM/AjYTqFm4Rp/mZycJpqbS4nFYr5pV3GYrTrEOsRLpYgtW7qo\nr2/I9G2oQuVu4edkMu1r3xZl8JtKiTm7oMCOCMquzVIz8NtvH/Dxdi3BHHHLCObnWUY4QWMzOTn/\nwPbtI0inKzHF5BuAxVY/7ICYvyPsRBzt1ByMNHvE788VGHdrFQaC82ZrBFUQeu21d/3N0rzPZZTB\nBK+HeOutj0il/hoxx9lrx2Zr2aMYbRx3dx9BNp6/zYz1hRfuYcKEjUycOJXOzlbKy/vp6LA1TV3O\nXxtX7+J5J2LmuBmZwzLgIkSItM36zcCjSA6+cD4xO5GrSdDZ7495PGKKKyQW+5CRI0/l0CHb26oZ\nMew9iRHk7DUg67Oq9+cUOuZKV/iCT54R/0PE1OhybVsDZoNqwkZgHPK3FX2Wgz1lyNgrMbzlfeBM\nZD1swpiObdp+m/b2Cv96yh/JZf4blM+0OL2QubCTRFdWXusHkXyIm0su2rm8gZ07U1ZEZTNHjqhz\nfD2SG+xRxH2mEdExvkR+fgV9fTk8+GCTVXLPNombdbljx07q6xt4+umtbN/e6dyjmr9mGhsbEaOv\nnbvuER8HCna06EFk9qsx63gHsuau9MffCnyRWKyA4FlGE5TbGtrbkcOj+gqrBu0wsj8J/962LcGF\nF/4DkyfL+tPKL+of2tvr8if1UTOQTNY78yD46uiIWf8HDya33CKBQ8G9yNDQSy/t57TT3OCFPy0c\nJ0KZbCzp9EOZKA8T0WEjbnhaqNzcLr/+lqqRDwEpBgd/To+/X4gT8JN8+OEh3n+/AyhGiGwJsrl8\nD8+D7m59RwPK+KCXvXuD2hfJ0PwIra0DBE89tvYrmA1ZnK3Vxm4vgvmIUn4jAwMQdky/Dgg7mS9e\nvMEfXy1yIlFcLUOETlsjlCDImG0B6BvAadh+YM3NX6a4+H8yODiNvr5glm1Vjx869L7TVgwzZ5W4\n/iy9vXDffdej6uSwSa+Wysrv43n3cvBgpTU/XT7eDHsPOyo3kE6fFMjKDhczefIoPvywi+5uvabh\n5t9B6suZzOF33XUpjz76Cu3tSUtgEGhpWcuqVUvo7BwXkaQzSoMiMFREkEIwKepsRAPQRvAk2+9f\ns8PebY3um0Ap6XQZYipwE8X2W21pvxc77bm/G6fm117bwUsv2RtYGaa6RjM5OUv9zOSiIbXpd86c\nCaxatYkFC+6lp6fKN43VR76vra2ZSy/dQE2NOawdOnSAlpZcUqmTkPIztlZgFbJpKJQQFcVYUZH0\ncQxCmyWIQGZ4TTI5wK5da/3wfuEZubndmTVpnJj1r933eoKHMdXIXOTfcwtCc2LWl7m8Ddkgw4mx\ntT7r/Pm1/gFQU9Xcjh0w4Hnw4x9f7wds6CZq8xcV5HIjE7EeS/hSjLownIz4rg+YQlgDNoZ3OIQE\nLzl+dz1fQNwhYogw8Jz1pAQEmd7rQaYOwfVJiJinv2/3/2/wPw8S9qELa85aWx9m3Lg6TJkjG+aR\nm7uAgYFpqBYKPmRw0J5P2zl+HyKk2NU/moEBWlvX+vRZjwnk6QduxdCRWSdr1jzI4OA0f8xu/+1k\n3Qus99xj4VNBhX4NfpiHCPW6n76DOQRWoppGz3P3Y1WGPMLg4Ay/D28Am/3vG5D9tA04g6CSoJl0\n2l5/zeTlaeTnkwT3/mwplrKZVqNSisg9LS0Hueuug3jeXGT9aACRJKpNpR7yNdDrIt73p4HjRChz\nkaNE20DQaX2okGIBzadktBoa/RI0UbW2PswZZ6xi9OgK3n//I6sNdWi0T1jnAZOxGcSePUszmhQQ\noWDp0h3ceeePCGcWVuZYm+njmjWL/GgtTRFhLwLXDyZozwbZuD3P48MPD9Da2sE3v3mUsrIUHR26\nGaYwC6+LcEHbFMHp1834HqACWyCTvoymp+dkzObu1rtcS3HxhZj52IEsvh3IBrMUWcxBJtvb+12+\n/e2LOHr0Vh/fHwJfAIpIJOIUFcXYswdMEfJxKBNobQ3mTAo6KruO1KKxaGubz+BgiYVvzeCca41J\nTt+eN5pdu/6FoMnACNx/+MNBUqlFPj7exajrXZ9FG4aOCDIO3NMQXC9AToB2H3RD/luMtkVNvzqP\nbyNC1j8R1gqCEVbaMbRmH3NTyKZWhbspmYhHDQdrxC53BrWk026x4uUZf5aFC7/nB8TY/jFRmmaZ\no97eJ53Dmu2zuNG6dxMiIHVh6HARro9mZWUrZWXj2LXL3lTdQ0r0ZpyTM9/6XQ8RGtVoO4CraQzr\n3b1WuysJ+gDW+78tBv6VKFCt/c03z6O5eaPv2Lwbd02lUt/lyJHzgSsZQy1jeTE0Fji2E/7H8QFz\n/b8GERFoN0YIy5aKoot3eIODCJ/X9VVPWKeG/6QKvXnW93z/OfWLuxvho4prXd/qHB9DNlw96OxH\nDq7zMHSvbgJhaGvLA7RMkb1X7GVgYByGrldivOv0vn1WS3mIQGELzm7AjqZkUOvHIwQPYZuAgwwO\nnkG4mLYd7aiWkziG/5Va79VnXEVBrvX9j8hMK651nLcDr/m4W4ypVfo6g4M/99/bhERj25pbiHZ3\nsd+/CYg5kZ+25i6BFL9SMPNhLCRRCohu5xkR8D1P97grLTyHD9ifFhwnQpnbDTWxbMc4rUfdZxzm\nTz/9pIzGKJxP6Vj2YRVYmhHG6WrkLia4YTeSTlexdu1/cuaZMzObzWOPfYCUn1kbuBc8cnLOZ8aM\nEwOagrffPkAs1ornlRAkwmjvC+1vMHz3Z8BXaGtrBE4jFvs1hYUX0teX66uSn0D8bly/qih/n1oE\n73bstS7oJzE5Z6LxmZdXSHe3FtHNBX5hPdNB9GmmmaNHB4jShqZSzeza9RyygOFYeZ+C0UJRPnLN\ndHWlCZfS+AkmP5yt2XMFhiBdpFJLCWpGcO4fbnj6BNavb+T223/gmz1tPBVGtKWMthoxXV2O0K2C\nnhyfIFhM3h4HiIal3LqWi5hQ8oCTkdPhv1i/G+2v+HMsJXu+JEl6+8IL9YGrq1Y94ZcXu5sgzqJy\nL2U7rOlz6reiJhiQeRvAmEZykA34I8rKupkzZyI33XS1zyM6rPG7h5QoGm8mnY5Z/VSh69tIIWnb\n7ypceD0WuxCTr9td4/r+RmBKxLtFm6rm3pwc9f0LCi4BB3yeiUxBAcfOARbVQ4WokkTl/jXbqzEs\nhOXwOl+gi/+F0NUNmIPo1wiawdVsb0MzZl5SGL6dQiwdCYJzqr8nMOtI5+yfkEPIROsehTKCQlUY\nPK8ImeOL/fdciTED/rt1ZxeCXVeTrjAWM/d6j8snVYNUhTmQ1WPwVUkwrMI+DLzjt1/uvF/X1uKI\nZw4jiV/x7zsTY01IIEKZja/bgY+Qg2EDwVqlyv/n+X3pJ7yuU/7ztuKgy8JHnt9uvf+bCnWquXsJ\noTS19BgePTgoWvrBQY/+jCeDulVssdrT/UDfoYFjz1v/2zzw04Nop6z/5xAV0dGETGxqiPsAajnr\nrBN54YX6TNb2cLRG9hxEcq99Ss8hTDSl/l8lEtlQUqmfc8stz2UYpWjnxkbc+xDp9GZ6e4uZM6eK\nhx56nW3bxtHd/Qyetwg5Z75r9WFoE5d51xMYNbb0yfOaSKfH8ZnPjMUIePMwxWsN3oqKesjLuy7w\njlgsTZAd26phNdNE43PKlBJqalSg0c1c2X1Vluc2+vdEaSj0uwocURF2d9Pe/giNjXc7ecpsIUXv\nfwSZn1qCUYEl1v36TvtdusE+QZAuOqz/U879t1rPGVAt6bPPruGFF+q56aZzeeyxD2hsvJs33hjj\na/psmuy12tS27JPsMr9ff2f9rmaTLmSzsvulNV43IoxsqjXuh5FNRbVjtci2G6R7Qw9jEKHwdaIg\nKpLq7bc7CG6sCrUIQ7V9OaIOa+5zlyMMtcr6TPLbW+P3dyOwgTlzJjo84gAG1/Ocd0cFh2wAPuP0\nsxbR0jyH2eDt8ayiomIxdXWrOOGEAoy53M3fpO9PEEU3BQXXM2dOFbfc8hyNjXfT3f2osk2NAAAg\nAElEQVR1xvCXnMoTnEos8yni/UwU5Hhkq66O+JQ4n66Iz0FEf7QfoSb9PhkRl9KIWJNGDFApHwMz\n/Pd2cAVNrGAzHj/Fo5nn6SKFrMNBggfRAxj/rHGISe1WCw9Kg0rP9nzNQzb7VzBzivPX5ge1iMl4\nrYVrpQNX6xu9houKNPwgjuxTmxC+5wpUBzAHYFdTo33TsSg+ovjkQUT7ba8B1VbpM+5zHiJgvkuQ\nV83DVLCx+YOumYesXHcJ6125iDZxtN9ffd8fMZYV253ApvNa5LBUQrh6TjUi6u90nlN8aF9cbbr2\ntxyxJqjvms2ja+ntfZJ02p5/VTR8HcMPdd6iaAdkBdg88NOD40Qocwl/HsaUYv+m35sRbcx84Hxe\neOFtZs8Wh2wQ9X5NTbC9ROJ6/3szsJKCgkUcOtTG2WdXU1S0HVGFJogmGnfDNiCRelssLU02h3+N\n/GiitdU1CZ2M8U/IzpRvuulcwA7P7458j1SyT1JYuAGzQX0W0YxcCFxKXt45nHTSRCor20kkvkhR\n0UJGjVrAuHExhCl+1cfVXmtM5QgRt/q/g+IzN3chR44cxfPeJSdHHf6xxlISMa5mxCncFpBsgVDH\nqfZ9m+m4Zq6V9PaWE4v9rX9titVHvV83bAjqBqqtMWUTGPQ0Z4Pdb3dsR7ATs+bmXs7s2ctDRXyD\nzvJqKqlGGPAKa+wguocvAv+NEeLtPtZRUXEFFRVvIqfLScBMCw8qQOj77H7ruMcSFIbKkcK+7skW\nhMluQ3yh7M3TrC9dk/X1DYwevcB3qFf/mFZEW2LGUFlZTGXlrc573Pe6uI77fdaPzSdWAvXEYl9i\nzpyqTE66N998C6G1A/7nZwRxrYJ1A2JO34QwbtVaLEfWwkqEV9U545FTdUHBHqZMKeamm85l/frl\nlJcPAPdhTJ9m7Dk5R4jFfo8R6JYgQudiqvt/zFN3Lqeg5R98AWwuVbyUEcBiiEBkC14jCAtf2YQw\nFcBs4WsEkhHfFr40FUUJUgJ7OjCKXPawmf+miWe5jKe4kue4gw94nCAtqRawyh//+wQdzQ9ihAzV\nVIxHTPhqhl8C3Oj/pvNVi9H4LMccQOdZfwesuYXg2j0I/BbRnri8X+aiuHg+FRWXU1GxmNLSDs4/\nfxqSZX+mf58KPS7Nlvvjs7daI7AXFe2gsPBxfyxqgrPp23Zr+SZBQfR9gpHOOu6gQkD2FjfdifK/\nyxE6N1BZ+XW+8Y3zKC+/yn+fvqvQf98Ev7/Ko2zBzp1vm87/J5Jpzk0ovh8RqnQ+9TmdC1VxubxK\nQZUmtQSFYrP+0+kUQdzMIMgPXd7i/lVT+acPx4X5ctYsMeX1919Ifn4xJ51Uwc6d/fT2glE1LkAm\n5wNEMh+JnFrX0t8P27Y1c+GF/8Dg4N/heaMRNnIepaVl1NSUsH//fg4fPofBwROAh/06bg1s2/YD\nxPtB7cfLCZ6UwBBLVO24Zl544SX6+zV6RSN6cjK/C0PvAvJpb7dVv7bP3O0YXwbdtJegEXN9fYc4\n//w9xGIbrLQF3VZbtmo1RVvbEQYHPas/0xBzovQnmSxl27aZqPNnKtVMT08jOTkvI6x4N6I5mYgh\nzDQmeuwR4BIfzyMZGGhn1y4JTjDq+Qbgx/685SOL72rUrCT+BsUYBtEAfqJH6aeWtFnm4+e3iLng\nFIxfhi6yOmCdn8pAzaeaH01jvk7HOF9rKY3xPv5HIKa7f/Db1U35ItRnQ5xRFVxthz1ne/wxNvrX\nOhkYGGTr1r2cf/57xOMPUlyc4vzzp/Hqq60YU/1E6/uN/nt/57/nILINKm3a6RDM3Mfjg9x441zu\nvfcV+vpGIELTLMz60c1Bzdq6vtRv8xBBB2bXVAGGpmIYv5aDwP9Atul/D9RJ/MEPnuHHPz7il4M6\nF1m/HyK00uD37SBQSHt7Obm5rVRWXkh7+1H6+3W+JXpO/Oj+3e/zF5A1OYhsaCpw65geR+Z8M56X\ny513PomUqkkhfpMgm/k6xLeu08f1hT6u2hGD3BS/nysJJpAGoZPfO9c1UGcRfX0SSXbppRv4xjfm\nct550/jhD/dY9xtft5NPnsyXv3wG9913PVW9z1KYWQuQ459R1VxYSfhEPdwUFBD2AatCtF291vU2\nZBvWjPhHgR1U8QH7/Ts0I/7jGLpdjgjxUalA9iI0DMb0rBqmtQgd2Ici2/eo3noOFG/5+W8Tj8+j\nt7cHERZqgWeQ8IGXfSxsRQ5/e4HP+aPR9p9Dgmk6ER7gpippAB6ju/skurvFLNneDp2dKxgzpoTD\nh7UddZQfQPj4ZxFtzGFkn9J6jcH9wPO6qapq54MPnqK/X8219hh3ECxV1YHw0O/7+DtkPbMD4bdb\nkX1FYSbGVKegkZEqaKwiN/f3JBJ9dHTEufPO15C1/FUfRyXIoUOFl2V+u5swpk6bZ9uHzINIVHYe\nJgb3S4h/WRdGAbPMf+5hgik13GAde39uJjhn0a4mEoRQDdyP8Drdo9SyZQe6HQTuBXqJxbaTl+cx\nMFDgVFT49CDmuQl5/h9DLBajpuYOJ8nmCs46K+Uz8iuRU6wKAl2YnClq99fT1juIgDULEyn5PrFY\nKZ53KrJw9BllIu0Ekyk+h2zUGqkiUFQ0j56eIoJRUfrew8D/wvi1qHfFrRibv45vJaJxmYlsmMUI\n8W9HNxAhnkXWs6qlscPn1yPEWI6oYd3ggvUIs5/mP9tgjU9TKdjOoibCRMb/C78v9m8aFbbSf/4e\nhJ2XIYKcPR/fQVj8CL8Pqp3ZQk7OLs44o5xkMpcdO+xF2YVxZFXQ6Cntw8/8fmjwhvZFaeNJgoEd\n9pjBOMJuQc78HZiT5HSEAZ7lv+tuZEuKIXO6xMKPCjs2nTT4/ctDBDg7GqwdO7pT+vAo5tSo4eJv\nY5iw0peWK7KDP9w5U/w2UlDwPrFYO729OQgN2vfp3G/0x2Pjuh2jFZ7s93WZj5+7rfuUhsciQq7i\nZAvBDUQgkfgiqdTP/f7/FKH5n5F9vSn9lhE8BCgtbEKE7gGEdjQhZZn/fKU/zmokcnWa/9xqxOTa\nhdEc6L125BfABX7btxEM/rEjmi/3+3XAaq8K0WLW4vKQvLzLGBzsI5U6PYPPEu5lMt8M4cz2BYty\nwi8mHCcYVQuyi2hzyDSCOcBAVmoFspI7gd8xm8MZ03QDMr8ur1mE0NF64CnM2ldat/2exLfP0FMz\nogH7P/73b/ujbbDep/QUDtaCZvLyHiSZHIHZFzSq8kqrH+rvBYaGdF2pf6kG1thz3IBs4AUE16Qc\ngBKJ10mlzvP7WYXw9O0IHX6EHPLuRda1y9Ns/1mlf430s/n4dxGFwCZkT1HRuxrDv5RfKZ5zCUcz\nu3sIwOcpLMwnL6+CdPoQnldKd3ex38a7BPfFTQhvqkQoxd7TbkeoqQzhIQkfnwcRq4s9Hk2l8Y/+\nGLQah8tf7sbs0Tp/1YgQ2o5Z0y7/sPm93aa2VYDQhf4/mrBMYM+DzHcs9gc8z65JGgvlMvxTwXFh\nvgzXs1vLRx/lsWLF6cTj30IWq5qfZmDMFAr6Wwmy4DVE/PvAX+B5Mwn7CanPmu0QrmrlA8Rie/3o\nsa8xa9YScnJKCPo46HvzEVamqtAq/+8ojK+LTu5KxPR0CFns30MYehNCCB8gwtAi51nbZq/9HOvj\n4lxEjR50iJbfVQU81rqueLB9xfS6/t3v99/GySZE2MB6vtQf67cd3OpJrxQRdNZa19eQTv+AMWNG\nUl1d4o8VRMC0VcpVyInJ9hOw/T1sVbZNG9o/GxfqO6LqffVFGOOPsxwzD//Df6dGoT6MMG/VKqnA\n+j0fT+psuhRhzhXIlqn9VT+nXIIRq40I0+63+r2boDbOHpebBFXn5R6CDP5u+vo20dt7G0H/SBsP\ntllbcb0YYQefRbQZOq4ewubCBMZBWdttcvpuwPPUvNHkt6kaZ332lxG4Odnvl7321Y9EfRZVuKpA\nBILFCDP+HWJ2acLQXyPCH6YjYodNX3utvigMIrRh+3gas5Oc+LVf30TWmQaHlGH4i4ExyTc4KfVz\nTmVtxgdsMt/MmCD1M5GgL1iU+bGbsAnyQ4zpcT8yO+MxZkf786bfS2OCjLODzfwnN/AfNLGFOzjM\nP/tjrUf41RkODur9t34bY8ZrRAJnlH6eR9a20t5uguuw2HruVkTjeS3CCydb2Au7dBQWbvBLX+ka\nmYdoiDQNSK71Xdeh0sLDGMd53VNwxvefCA/Tfrg+xbcha34yIqD/wn/fboQ/NCKbvr5P15quV+Vr\nSisubu9BaFX9dKdh6HYNooA4FcMjbf8yBaVrDeLRtpcAp9Db+384cuT7dHXNprv7RKsNd1/ciGgU\nP4dozP4LcaVYQHHx275ZvgrRao/223BNfo0Y/7tCzPoIuy+Ju5Hy1y3I/LyD0JLrP7YMUWhcDvwb\n8fjLFBS8QxC0rQPO/7bLgfrD2b6OMt+eZ/vsfrpwXAhlUdDXl0N9/TKrRI4KYinCTo36m0dYgLEF\nOPsZJTrXIVw27JEjR/Dhh09wzz0X09k5jqNHTye4aJYCbyHsUW3e6o/ThVn0dlTNPIQVPoU58Wik\nkL0pqG1c+23b7BXG+p9lBJkXiOZOy0bZ47bxkLCuu6VqEv6YVJD8gX9tuvN8PmEnTIVSjA9CGPr6\ncnzfv+eQzbTQasP2a7L9BNy2DiJO5jZtuH2x21mMqtJjsfOQE1c+ctpcbj1b6/df35uPYRy2wKp+\nL+f6bZzhj6PK+l0/bjSoCpOfsfpr48B+/hDRSVBr/cMChIWKWkS7Z8+pXq+yxqO4bkQ2VhW4VHBV\nk5C9WaiTr+0w7PbdQCymNJLrt2X7TzYTjrKz8Ybz3R5LPuHIuo3IyV2v220U+X9jDj48wrSVj/AG\n18dT8aK/KQ2UYfAvkcbTGBtwwh/FHwPC11jCfmDDdcLvICiA7SPogJ/2e3gA43w/EehlDG+wmjfw\naKKJzVzlO+H/b7qY7/fKdaSuRzQeOr/2dRVyXR4DRgNeZj03HXsdmqhnxePJGD8f2yAbDpyoqVH+\nqmtf50HbK7S+u/SE374+aydl1fGN8tvQjTxqjU3226nF8HL7vf3W+3St2X5N9v32u+vJySnFCDbu\nGLR9fbe9X9j0ao/ZnrdKgmZAt313X8R/1zLEPPxLRFB/kr/8y5mcccYs63nds900TNp2F0HfLzO3\nZWVXU1e3hRUrTqeiYq/V54cQc+ZM6xnbT04Dnr7PX/1VLbW10wiC8jj1cVN8bETocBXGJUb3Q3dP\nNvT3acJxK5Rp5FYsppuRHSWlzrkrnN/AbJhE/GYTqxKd7dwrkEgs5cYbRaAxjtg2QzoXOQ2chCw6\ntXnruxSt6rtgayuUGJP+3zGIEcHdFOx+u/lUliDCiP7uepN0YMrP5GJwZeNhByYa74B/rzqRHvL7\n9DhyKhyDnCBs58ediLDoOmEq9Pqf6I26oCDN/Pm1rFtXx6xZm/x51jYOOc/pdztLtzq/3kZQSLCd\nM+1nwCzCHzJyZCmSZ6gY48c3YD2bb723GLMo91pjtv1SZmCivEqs31PWde37SkRXoRuCvrPX6XsK\nYRT9iEHJPandQVGR0lGUB1ERZk5tfCoj1yhCW0h3DzzaH8PQKyuLKS/fg/E1IaLvAvH4NVx66SnE\n45dhfE/Un0XXhgtuP9w+6ZwWE46s0/lYjokJ1DYGItpuQHxc3GoSPQhvsB3vVShdRWGhPiPtnMgv\nLAHsR5zKnRRyOCOA2Zov/ZTz8ZzwbUf8FEK1gxhH/LADfoxdbOZZPJ5iBc+ygl1cZ41d/QohGIUY\ndZCKmt9mRCs06Dwf1CgFo1KV9mQdipbxVqtPJZjNvJogb66lpibNo49ey7PPrvE17fa+sAJjkLXp\nIoqedMzqyL7bGpuu0UN+G5qHLgovdgCTvtt+bwnBNWjvBynn/iDIYcZO++GuA3vc9m82vb7pjFkh\n236j94X3xXj8LSoqbgxckxyL51pZDKLwjPN/fsRvsq8mEr309eXw8sv7mTIlShmhz7k+vQYKCtIR\nwX5K11FR3vYBFKtdF0dy3+mnn8CnCTn19fX1n+objgF33nknNTUDtLf/TeZaTc0drF5dxzvv7OFH\nP/oVyeQfEUT+BmFRlyC233eBJ8jJacHzbO+JS603JPznXkWYbzOi/vwQcRxfg5z2/wl4mHj8cSZM\nGEFvr8fIkQl++tPfc+jQ5/12/hX4G0QTp6eXX2FYaTfCxD1ENarvbkccG5sR4jgH8an5nT+uVxA1\n6uVOv38O/Bphaj/CRPJUImY/HVed1TeQvC3nI+rdRxHzzm8R9e+vEY3Oy4ipoB/4S+Tkcy1wF8Lm\nu4HH/PaaEbW1nsW3INq4/f7YXkU2wVyE2X6PnJy9vs29yx+nmd+KiuXcc88FTJ8+menTJ/OTn7xK\nS8tXMP4Bf0SE1lf95xT3nYjafBfmBDPZ78vrfl/qrP79s4/v//Kvm/dXV5dx6ND5/nOHEcf1Nh8P\nX0J8kRb6770IcQa/zr8/abW5ATGl/RJhkL/1+6Fz+xsMbfyH/9tahNn+Ajmlqc/Xy/4cXezjUXH8\nJCLQbEXovhn4FZWVB7jppr/irbe+S1fXRwTpHmAcsdgv/T5chKERxec1iAbkN/57rrD6q7iXOc/L\n+ztmzPgts2a9xNq1l3DxxZ9l587fcvToPlKpXwNnW7jb6PdxLePG5ZCfX83Bg7tJpb6AaJCVVl5C\n6H6uf/18v98J5DQ+gKFvpfVcfw5e9cf0PLKuf+0/r2tzMrIW3/H/6jr7CNkEk34725C1ddjpw68Q\n5jwJEV5uBs7hRBZTxc+pSO1iLG8wlhcZy53kk8pwHxXCRjifPOfT73+Szucgxh/sKKL7iWOSsHoI\nVXcjq2U8oms5SCm/o5a3OYc3+Wf2kCbJNyyc6tx2AU/7LV5q0YLOyS5EIPqeP4+/RDTH/4WhTeWj\nt/m46vZx/JI/F/+KAZt32t8BJlNZ+SRjxx6kt/dXpFIXIetinD83hp7i8fXcdNNnuO66LwPQ0vIm\nL7/8Oum0Yk3X0C/9fv7W78tFBOla+eU1/rz/EuHhFyP7wR8RLdIR4A/+LC30++WusQSFhY+TSn3J\nevcchJYu8t/fjVmD9n6guDiNIO2JYuDSSyfS0vIuqdSlzvzZfFF5x0sIvSqvnQycQ3n5zygv/w1d\nXfMdvP8S2YfsObLbV5P8PwH/Rk7O40ycOIaqqhTV1c8xffprnHzyr1i9uo7582sZOTLB88//hq6u\nLsJ4/pvMOxKJbzE4mI8E09i/iY9tb+8m9uz5HC0t5wA/oaSkyS+9JFBZ+Zh/7Xf+/NltQGHhUv7x\nHy9i/vxaampyaWvbyIQJzYwcuZ+PPnqfdPoyHzfjQs+Wlz/I4OCvSKcLEV7hOTgSOPnkX9HS0syn\nJTodF47+mzc38cADW6ySQZL6wSRItZ389gFxiotHcNJJFXzxi6f6Fd/VEX0eroMtXEJR0UF6emYQ\nNG2eR2Fhnu/oeJjc3BNob38w82tl5bV89NERksmn/CvqIL4X8VcDUwi3FFl8HcD/xjikqwOr7SCv\nC+l7SGTXIURzJZFr+q6cnE2k04v8d76GmF0+S9CJfRPQTTzeQXFxEZMnT+TAgQN+wdWvIU6NNjST\nSNxvOV7/BslVpW1qNQH72ZWEnWxhxIiLOHq0FNHcbUGjyOBcZs9+ki9+8VTuvfcpP/N4MbFYHlOn\nlrBw4Z9n6prm56fYv7+LHTu+QzCJnxkb5FFYuJ94fAzd3dcjDOwRpzcNxONPEYuNIBbLY/LkIjzP\nY9euJRj6kf7l5LzJ6aePYds2DX5Yhwi8D2MCIjoRwekaf2yHiMU+YPToAo4cifvOxdXIweCHGCfR\n05EIqBiiqRogJ6ebdDrPf78dBWU7lgr+cnKayMsrJS+vgkSij3g8l8OHH7XmW+6rqHiLRx+9gfnz\na5k9exnbtl2OWy+xsHAp3/jGGTz99FZ27+4mmewhHk8wefJEcnO7iMXyGTFiDJ2d+9i//wCHDlXi\neYsxmfHjFBQUccopo7nrLilWHVWU/ZlnmnnggS3s3Pkm+/f3kZdXRjze7qynev+j+C0A+sjNPcLA\nwH+Gro8b10519UQ/KjtBTk6aeHyA/v5cBgc1AEXmRXiCJg0t8vFv4/gpTJSmRi6PRUSdmP+7jV/R\nOY3nFcozmgaBT1oLMkqP2Ut02Ww7ElKhENHNmyjIiXzALMRJvgERYvv9nnUgm04OEqyjIGsqHt/N\n4GAC+DOCgS+yPsrKmjlyZDo2r0wkrucv/qKfN97oJZUqIJHoo6RkBHv2fA/DA0/y23gLWRM2NFNR\n8S+cfvpJdHbuy9Ce8nubjrZufY3Dh/P9sQWhrk6qmgQTaAfptaysi56eAtLpND09h4nFypENto9E\nIgfPKyInJ01eXj6TJ0+kp2cv7703iOf9lDCva0DcN6YTLMMlUFNzBwsXTuCVVw7Q15fD3r1/4MCB\nLnp7uxEhd4r/nPKydmIx8LxnrTlRmuumqGgk8Xg7Y8eOYuLEqezd+wf27RvlpzlSnribeLyIwsIS\nxo0bpLx8VGYdHznSRXt7DMjjhBNKMuv2gQe2sG/fIVpbj1BVVUlubhcHDpQG6idXVl5DUVEPBw8e\n9dd4MePGDdLTU+3UWV7BunUiKNn84Oyzq3n66a28/fYBenv7gSJycwczeB4/fgQjRyb5+c//QFdX\nJRJFKnQXi/03nmfTqsCsWUsYO7YqIBu89toO7rrrN3je4xZOJJq1uLiTJ5/8eiDtkEJ9fQP33bc9\nUHqvsHADNTVVFj4uwmRh0ICiYPWVdes+z/nnz/3UHP3x/n+GbF2YN2+FJ5Xcmjy41oPLPVjkjRhx\nobd5c1PEfXrvHR5s8GCBB4u9ePx874orvuGNGnWZdZ/5jBq1IMv7FnhwgdWmeSYev8hpp8mDlV5F\nxSIvJ+eywDVY7be32GpLf7vOi8fP9yZPXuLV1a30Vq/e4NXVrfTmzl2dpb+r/U94HHPnrs7gZPPm\nJq+m5g4PVkTeW1GxyP++wv+stvqsv90QgVfTRk3N//ZmzrxlWP2xwfTN3FtYaI91Sdb2zBy542ry\n4BprLCu8ysprvOLiK7LiYNasa61+yJzHYhd4xcVXeLNnL/M2b27yNm9uysxHXd3KDN1t3tzkzZp1\nrVdRcbmXSNg0ssGDpYH3VFZe41VWft2aP7cvTV5FxeWhd2SnbxnjqFGXZe6dO9eeP6W5ld6pp173\nsdbiscZbUHC9QwN3hPq7eXOTN2/eCq+iYoEzzhsixu55U6cucOZhhVdQcJU3a9YNobaDYw3ipKxs\nsTdv3gpv1iz3PVG0e4d3xRXf8AoLl3ogtDeeK7xTIfA53f/M9P9+PsvnyxEf954/s9rTzyzwLvG/\nu++eA955/u/zwLv5isUR4w+PrbLyby16i163mzc3+e2Efy8oWBqBQ/nU1a08Bm0K7SUS5x+TZoei\nQaGHW4bkK8F3B/uoNKg841jvlLYUFy5+pe/FxV/wZs9e5p166nXeqFELvJkzb4lcr0H+NhzeE5yX\nKP5YWXmNN3v2sqw84liQDR/2ep869WJvxIgveWVli71Roy7zVq/eMCSeo8cQ5gfRuDF7eiz2Za+m\nZpG/lwxvH5E+2ft1GF+zZt0QOf/ZeFy0HGHouqDgqsy+4Hme92mKTlFG8uMCJEGq7TsE0ExX13f4\n5jd/wvr1jdx88zwrkSoYx/YtlJUV+CVVrmH+/FrKy6+27jNhzR0dvTzzTLP1PrvIar3VpsknNGFC\ngtzcFYH6mjU1z7Ju3bV+3ULtS631vu9gkok2kJsLp502irvuug2QE8cLLxwiP9/jttvO4f77oanJ\nxUq0fxYEs6frKWHVqk3s3Bmus1haWkx7O4jK+hzkZKC4nuh/7ydYJmYHcA7xeAnxeD6eV0hurvp0\nDN0fG4yPnoHe3uUUFl5Pb+/pPn6i25szp5oXX7zeLzRv563ZhIl8k7mVwvCdZAs0KC2dwJo157Bq\n1RJ27sylr28jngfd3XDkiPgizJ9fG3nisq8/84wUzJayQ8twI+4kUbCevKNwVcuUKZvIz0/R15fw\n66EaXH3wwWEfN8Fw+bY2U/fTVLCwaQ4mTFgVOfZsEDVeo5Gwy04JSOLkVQFcyL1rkbVjQ5KowuBl\nZSWsWVPHqlVL2LEjxsDA9/wcZ81cfPF6pk+XQuSqlQtW6zBFlo8cgcZG0W5XVt5qnexd52zp98AH\npzK174/+lR8Nqxj3x6kF2UUwRWYeosezMyqlEZ3SBIwDROeYMdzx70+xfn0jPf0J0pZGEqCz0/WR\nBHE+fp+zzprEoUMFbNv27ay/33STJC8WOrNzQBYCvVRXpygtPS1ynKYsncDNN8+jpUX5oNCeaI7O\n47HHVvharCDNLllyLVVVT1BaOjagbVUw/GEZUaB8JVhSzfDz3/xmK7//fXdAs9PSYtZzFAjv19+0\n9JydGsPwhXXr6rK2E+w/HIv3PPDAKksDJPNSV7fSel552UQGBnbyyCMLMhrF2bOXZLTIotFKU1Y2\nKoTX4JoM42P+/Frq6xtYu3aMVSQd1q69Hmhw9lcDu3d30d6+MXBN+cFrr+3gn/5pM729ucRieUya\nVMj69Ut83ChNyLOeB/v3X8/JJyfDLyF6H5E+nYP4Ihbhlt5rbYXWVpNrcfv2R9i40Yw3av6i5YhV\nlJXt9eWIJUPO+58Sjgvzped5mVJFH3xwmNbWDrq7e+nrM/l8govEzcdkF7IVh+VZs1rZutUQzejR\nC3yTnp3fSe4vLNxJVVU+u3ap06ttyrscu9isFMqOMWlSnPLy0SEV/JVX3s4Pf6g5arQ/ryHmBR2H\nqFsTiTSjRnXT3j7BV08L1NSsoLS03Tev6TPah8OIU7npf17eDi65pIa2ttyspiVX/futb20jmdTC\nuXZOIPu7bSJqR7YPw+zy8+eTShWRTk/P2h+dz5KSBF1dKXp7c+npecwZUwc5OfRpedoAACAASURB\nVId9E98dofmB33HFFSfx6qsJf1GvQ3yRND9ar49fd263IdudzrsmCS0Gchk3LkVPT4KjR+3C0NKv\nioq9nHnmRM4+uzpgah01aoDGxt2kUoUkEr3MmzeFp59+n+7uG4guZv8RxpwWZPQA5eUX09MzmmRy\noYW/VykunmqZ/pqJx+/3C/sGoa5uFTfddG6I8ZaXX0w6DfF4KYlELzfeOJczz5wZaX6MAl2Pr732\nLu3tTyBC1jnYawyqqahoprq6jNbWDvr703R1qSlQzeCKi30YU7Axc8+dK/UxxQRr03sQT5WV11JV\nlU8ymfbrg15JuHBzA9BELHaUnJwcxo+vpHDPv5NDmLF/kmLcH6cW5FmIQco2T+Zgoiu7gLc5lV3s\nQHlCTs5hcnK6GRiYhOddjc2fLrpoCm++2caOHUcZGDgRQ+NvIbwkDsTJySmhv19Nh4bX5OQMcvrp\no7nggpkZE1N3dz6Gl6gJKE1eXjfJ5C+snhuzp0AhhYUjmD69nAsumMkrrxzwTWMdVFVVUV1dwtln\nV/Pgg00+z7X7kov4LqrJsZdYrJiiImnvo48G2LPnKszheDyaczIW+5C/+qsx7NvXya5dKUx+M3vN\ni59x0KzVS05OihkzpgUEfIW6upU0NirPd/NXaTu7AA8NLikszKem5gSqq0sCPOHo0U4GB5WfRLt9\n2CZYdz3ef//zNDXVE7UGampWsHDheB566HVaWyGY70xrhnb5OE0xaVI1H310mKNHf4YL2geA0tKL\nHR4oMGrU5UyaNNJalwaKi6+ku/vx0PVJky5l374Yg4Oam1Jx+hTi2zwjAifNFBSspr9/Kp6nSXcl\nx2hl5WhOOukU38ViP21tOaRSIL6MjyB8yHZlOQ9J3WGbtcURIB4vztDtmjWXD0ED0id7H3BpRuWW\nTwOOC6Fs8+Ymyz9AF9gjiKPvJv9OJXBXOLMnREOkU5SX7+GWW87ObKh79/6BPXtGk06PIZwoUhI7\nptMx0ukqRKul2q0xSLFhNwksVFbeysaNF0VoClIIq9YCxV+z2rTbsX2ogjBr1hI6O8eFTpvia7aa\nwcET8Lx/y1xLJB4PnHTU7h+l+Viy5BF/UccQDxVNJakFgrut/jYCb/i4zZa81PbJsvtzpXWPjsH1\nq7PnW5O/Gg2IQmHhAl8bpf4r9qJf7D9vt63JH39EMAWDPqf917HaYzK4NuNoRHLMTUCCLFToGkD8\nlfQd7tjaI/C2heLiFqZPL+KNNzpIJm/G+CCCEWhsqCesfYK5c+t54YX6gPBtaP2hzH3x+GWUlY0N\nCHqFhRsYO1aEZd1Mb755HoCj8apH/AZLrT42I742GqCxFkPnOkd2ksnoDWrWrCUAbNv2ISYxs3tv\neF5ESP1sBicnUkF+Jr2CgZzQlXA2/OEKYFHCFwhF7cY44itoJvwuoIUC3uE5ogWHo4AKWurPYvO4\nTYhAoFpXxW8aoburCK4v+x57nTQTiz2A5+kh6tuEE1xH8aioxKf+f5W3snTpib5fb1CAKCzstnxF\nNaHnvCHaa0aCc071x3A7QT7agDio9/u/2W3q+OuRw4OdbDgs3Ni8UTRF2x1+9TAS+PQIwYSodnvN\n/t+JmOAHm59HKxJmzCjhggtmRuLMHMaH8uPVtBD6+xKEPlSIVT/VdYgQ/ITVgvSjrGwff/7nEzj7\n7GruuqsJzwvvQWVlVzN1aoJt2+wEsAB3MGLEHyOFPUkUfYbVN03AOxkRdBME+ZhNbylMglsXd25C\nYsWzjafbkSANFdhcCMoHjz321Sxa/miB2KaZT1MoOy7Ml0bluxLDWB4mqMLWrtrmCE3KtwBhaoaI\nOzqu9bVBxllVsvKreSxo0kgmf0ROznxM3qVGhFB0gdhmKIHW1m8HzDfBcRgBJZjnxm7HTpERBFVx\niznUXjC1pNMzCG7ajQGBDMKmJYVVq56wTGrNyEZ4N4Jrxe1KgkLX+4STlzZiTqe5zni/TSqlgQ32\nvEKwkoD9ez5mK9QkfgZ6exVPv0QSFNpzoaHTCYL0sRU5NfUhhqNpBHG/FqEdnGvm/yCj/j0ikLkb\n4BIfR0sixraEoNmuFniW6dOLGDOmkmRyAsI0bS1RlEhgh4IbbdXevTupq1vpn7bF9L148U5fIDP3\nDg4mAwIZPEdv73L27JGxtLXBjh1i2igtbaelpcF5b5JgXqNGJHeQPbeaWqUJEYaXEZx3LWNiNIJv\nv11Kd3cNEj2n4LIlGz9QwlEmD25GnNjvBKKFrygNGISz4Q9XAHOFL9W/vYlsN1XISmgjl62s4Q22\nYmjBFtZbMTyrEmN6X4nwAzd5pf5e77+xye/Nu8gG5q6va/1RTSe4ThrxvJOsd32GaJ70sP9uLZN0\notVGmAc++OACh0cJ/xk1SteWjqfeep/dntLpu0jFALVw/BFT/kvp6hREO6h87WGC61ZTTuiYbNyY\nvq1atSSjpdqxYyeplGb213E0Wu1otQC7PRUm8qz+2nmw9J0HgXOIxU7A8x7OlB978009ZNr9qqOk\n5B4KCm6gr28cYWimq0tz7dnQhcyR8latipImXAtS1rua+198cQHZZItEoo/S0pMRYciYuGEukya1\n0de3IiBUVlZew6FDbm7KzchhzhambLDnagFB/Nv7fK7VRiPmSKR8ZS2m/KJLY61I4IstH6xg1apN\ngf3R8970hUowdCeQbT/9NOC4EMqMf0DC+WvX50o5v9nfY9inEbneRTL5pHXtMD09U5HJzGaI6PXb\nWoEQgQoiCYg4hUPQz8LYpe0+2gs113lazUAuNLNjx07uvx/SabfeZkNEX6Kn0fUBeeaZZnbs0PI4\n2jfdaJMYgdQVnCZhCmArPncgpzPbf0hP59pn9dPTGmggzPQn1u8gGidZ7JIbpzJiNCm/rdyI8WpR\nXZdhdWF8A3uIph3NQbQ2ol1byFuJyfDu+oxMQEy8UWObgJzcjU8ifJ7S0ufp79dx2QJvIyZ3lA3z\nyMu7jGRST+tC07t2lbFr1zzUVNPY+N+IfsY9ae5y3uEKywItLWud5IjK9NyiPlG0Xo7QjW4EdvJI\n9V96HBW4k8mVJJMgzPJ83LU+nispz0TxGb/IuNObbMLXcH3AVACztV9F/kd9wDQLflj4+jxdPG21\nVk9wPXwV0V7oIUb9aVRg/Rom6WgXJqEpBIUZMGugx79+tX/dpds2ROBywaX/FNE0D8Y/sZ4wBA8G\nvb3xyOvFxYOUl6+gpUX5XtT7bDqtx9Q8bMZUEIHoHI+1/nV7RrWE2NSIMZt37tyZy7ZtKhC+57f1\nfJZ23CTE2p8qghVEbd+0JZgUQSvxvKDmt7fX5euCh66ubyJr+XXC0IjnTSW8Z2gSZcWR9s3OY7aW\nKP9KOeyORfiufRBewo031vL001sRa4Ct/dvA7t1xpk9PM3v28kzk54ED5QwOdjv9y8XMm/IA+132\n/NhJdO05Tfi/2bSy0moThL8WIkcuu01NLhP0f4O17N59BWBbj04muN5saOY3v9nKyJGX43n5Eb//\n6eC4EMrefLPF/6aTaRdZBUH4YWKxa/C8atR3xJxZ8wmrHOuda3atOltIMJBO5yMbopoRlPXvw4TS\ng818/j/u3j2+yurK/3+f5OTkQggJ14QgKPGGpLbY2uq0DZSppC1qUVHAKnQEbyCizrSdCvmSikyn\npbUFDdaKdaC2Yu13xlaYgeA4TWynXqooDeUmIBAgXEIu5Hpycp7fH2uv7P085wni/Or8fP3263Ve\nOXnO8+xnX9Zee+21PmutN998nZKSGTQ1RTh92g0aqEUXah2StsNNRXMcv+C5GjlZFNHY+JwB+ivx\nKSaqC8m5qNfWIacxP0OEKX0gyY0ba6moWMc77xwmmcwjVcCtRRaebmNB4WIyonWai1WRv+m0+U1T\nx8tIRG5NcfEWMtYaNFTfpZrD4+b/I2Zc1GznJtPFXHsLMR8Owh8QVvt9CEnNMsz5TRdPgtRAtvo9\nnfDkyXpyv9gZB43iruN+yHzfgRUohwbqT+Cn4wiwlZqaGGlpHQiG7odOu3S8Xa3SCaCe3t4kqabg\nkcBjyEl+NjbnaPCk6Qp6QWHZj79patJ1peusG3+WxGD/tI5m7Gbg/qZ1vYiEi1li2qAJqmsZxh6G\nsxGbEH55ivYricxukCV+EAA+ppUdzv+uAKZb7GlEJHBNkDsoYzs1pv17kI1qBv615walLEXWxttY\nrVQ5smG3YteCCtH1SDw0PSip9lDXyQ4kVpgKcUF+sxrBUWqWiFPmugtDGO88o4evC5w2u3NWa9pe\nGrjmx3x2dLQ677ZY2kOHEsycmeD48e2cPg2yPk8hcbm0ba4WVNf1TCSXptsWFVhBaFHXxw78s7kR\nGTeldxVkXd54kK6udU5fNLht0IliPX7eoXOga+c8/IFLjgee1X65fFahHupQZXGzNk/tZQgO9TZA\nISqQlXWQrq55WJOqCjcaRDmKaIsuMU+04xcSXdcTLQks352JHKhPkJ0NTz/9Xxw82IrraCfvvoD2\n9hNs3dpMRkYbpaUeEDPhJFYixxfd02L4ecQR5DA/gwED0khL63TMsZ3OmLhpkhLIqnU1yJoeSQ9r\nR5FVew9CO8MRrdlBBEYRVkToX7WqmoYGzSKhc6ztVf7bRHv7J2hvV566jg+rfCSCxyaTk5BgbRps\nToOE2iB48EfGjj1MLPYe7e2dyKAUm/t7kcl2TwEvITgpHehahJBXIqf1WtxgfRIUUGKr2BQg/4kQ\neQ8C3X0KUcXqpphGPL6XpqbRdHU9TjLZhA0a+FPT/peQxbIV2TQ1IGwewrA16OEDiPBygWmjligS\n0PUdZNEPN23Va4XIIn4JYeaTgMlEo9/l5pvPp729k3nz1vLuu+B5WQiBtiLBI48gat3NiLDjBvT7\nvRn3l5A4Oy0I4/gkog3LNu3ZhgSf/RdkM1CPx6fN9wIzrtrnF8w4PIToKPaZPl1t3v2PiHZJ26H4\nsrvN+89DFtprpg26QexEmP1gxHR2LQIqn2ra4wZ11cCLDyGM4CSirTkOrMAf4PXfEGb1kqm/GjFi\nNSF0dwj4DBbHoaf8600fys17fm3qm4Cm4PK8fcj8tzrt0vHeZb5PQxjOHDxvl2mr0vlz5r4LzbVl\nCAO7CqGNG8x9tcAXTXsykKDAXcicR7GYjlkIM8zDYvzmIszuoHmXBlvcaeq70BmzWYhgPsvp+0/N\nc78DPMZQxSg2MpwahvOO+fsv5NFIGlZTdQ6pwVfzzN8s/EFY20gNwBpHtv0m03r3kzS9bTXf42Ym\nR2IDsR6hjJ28x7tU8hcm8y5ptDAYcdrZZZ7+PSIQ7MWuPTWTXIuYFm9AEjkfMW/bat4+1Dw3C4np\n9SoW3xU1c9RhWvUSciC5yPR2OELXGvB2GkJjqol8yTz3GrLONajya/gDG29GaFoFx78186p8bi2y\ndptQgV3m18WwTUJ4w78jm7uuxz3ASLZv/wv5+Una259G1ubnDC0cRdZbBjAdoVENCnw+Nn3a2+ae\nl522diCb8jsIDXciAme1mfV7sMGGE6bfPzZtjZr/p+MPAv6QoQINzFqL8P9G07+jyFovNM+PNPOp\ngV/zzLgrn3sVCRALdg9QYPrPzThpu9IQumhCKPB3CC+djmLVotFHGTUqRlPTfYhw24IEtF1j5mYf\nEug217S524zFX8x4NiA0Nxl/iZKd/V0Sie+Y9w0mGj1IPP55WlpOI1quSebeZVic3lHgcZLJ6TQ0\nTKWx8QmSydMIpOEk8ArCCzUrwROIYLUcyZl5I5mZWxgw4DTt7Ukz7m6A4lcRelZe/RI2H+1mZI/M\nM236LyQe3DDzfDFywDmOrO4e/IHZpVxyyUvceedUvve95zhxos2Mz2ZkTT6E8Oblps4h+OWL73xo\nwWM/EpoyGcwp2JARp5CN22/yOeecGHV1O7BBDfUUsA5rXtOi6meQxephuzsAmzBX6x+GLA7FU2wx\n9+1AtgJNYOriDtbjx2PoPdqPmaZ+DR6rz8zEHyR1C0I8T2JVp672ohkJ9HgSm0h6PcLkFOfwE+e5\nahKJQh57rIbRo+sMhswtIxEm4OIo3BOwaCZlQ56DPfXsxiZ5xnzXUBCqgTuKCJYnkMVYhM21GBwH\nxYYtITX0yDEGDpxGZ2evCXS7xFw/jZh81uI3sboYEk2824uYj55EFvjzpl3XYA1WW/DjZzSZrp6S\n2rGn8s3YZNZtTvvnI/O+zrTxVtzwJ7KJ5CJatyB2RzUMO51xV43bT/Dj7kaTqpp3MSOaU64U6+0L\n9qT6J4RGNWG6YjxcvIyO4/WmT7r5zkAYu87PDiz96JiBFQxuZiw3kB0IceJqv9RcGATeQ//ar05I\n8aU80s+9n0ZE5SAashfZ1kZhtWDvMoytfAG/o4mrMZ2PxV8qRmwlMrfP49d6eKSlfYWBA4fT0rIe\nmedvIWMzBjv2q019uYioqev6KeSA9PfI+Krm42FkPZZi6Xq1+bRgzcW61j6J8FKln0vMb+sQDUMH\nsJPMzC4yMt4GptPV1UMi8ffA90xbL0H4xYuIID+CVDPYEaxpvxw3cLbnJTh2bLcZdeXbdVjDcIn5\n62LZlCanmGcUJ1WFCFyPIPxGtWHKX/4ZEQ61rDNtc69VO+90TbWq2apFtEqnze8LzPtGksq31yL7\nyqUI374Sa2VxtY+uRlK11O/hx0/p/qT8dQqudi+R+FuOH99g8GZD8O+B2pY4cvhbbfr8j/j5ZC0i\n+J9v3nMKiNLdHSEavYbi4kLa2loNPlDxXWqpAWsGTIU99PRkO9fmo3jw3NyptLW5dO/U1vYEXV03\nIjStFh/l9ZeaMVB+o6GTXdpT87UbrudbiHD674gMMRqZO10vIA4vjxCPn0t5+RL27VNLjVv3euf7\n/66Y9BERyhqQ06K6SkMw5pLirE6d8nzXZCBHISku3KL51UC6mY9VSxY59WsdHVhwoD/GWFra90km\nC/Cb9Wqxp1YtUVLbDTk5s+jo07D3mN81Srve/3Xzv5oq3HRKehrKxJ9IWosaavw4osbGBKdO7XHu\nnWzq3YacoGux26GaWKuAbKLRRm688RJOndpCff1JGhpm0t2doK1NMS+TESFGMW5xbDaFo8jpVrEO\nWr+LWXDb7+IeZOwkunQm+/YlnbHNRYQWZeCVzm/BxMZujLgbkBP1d7Du7aOhL2Gy3q/4Htf7s9L0\nVZ8bjsU4KIOtRxb8aGTjCr7/cWRTCuIkahHx4N9R4TwSOc155yU5dqyV9nacZ44hwt4q/GBX18ST\nadqyGWFOrolnp+nb01haU3oOw4fl4d+oMhDmqRkJRIgYy3SyOYGL+ZLyREr0+7MF3ru9DpZORPxI\nOteKsGdit/wR0biNRj0gs9nDtag3Wl3fneo1erv5fz4yfmuxdObiL10au49U6EQtyeSP6O5uQOil\nFkszbs907tyE3oqjUiHt5+YZNVkOQASNCcjGeQqZm4H4k9brOtV1pnUEabOarKx6xo6NAjH27eug\npaUOG15hONZhRmcpDIfWbf66NOOa2d1D83CsyVHXvorOiu2abJ6/HZkDpdUg9gvn3jznmvZxZeBe\nFx6g/akNvH8dNm+xvjcfP67NVQjswx8vS9vv8jRdZ4lAPWDnZgdCIyfwm4hPAEdpa1M+EVxryg9V\nGzQfOUC7zhBa6hCtt4dol54kmawlmazmwIF9ZPZhAxQH6PJm/dE1x6rgGDxWSRkyJJ+2tk5Sk5Or\n8sDll5XOeFyPf00p/GhNoA41I2v5Hha6pO3fjD2oS15nz3uBurpa6urUicBV4hBobxju+8Mr4SP5\nv17WIGrgXyKCyH2kJr79OY2Nz+F5bmLnzVivpMVEo3f5nklL68Imax2Gxf3khtQxCotzcEsZeXld\nwAH8eCjF6YThlPwlO1u3kNXm+dWkBklVe3o3IhgVYcGZ3cjJKk5qImk9dWmbXK+th/G8CxBCVCD6\nUISB6D16alQB4TngX0gkXuT116MsXHgVdXVPcPLketavv5dI5BiWWTUhJ64chMmuRUhqDrKwFOug\n4+LqLNzr2idJ+JybO5Wurh727TsfS6IJREDtwjIFfb4eOy9hcxBFBBE92eYh5lZ3E9O5rTd9UgFS\ncSIjgL9BTpkJxHylDDYNOQmWk4qfW4uIEG1OG3GedU99y/C8X3LBBRfw2c+Oddq02nm2FdmoH0bm\nbgpiorgLGe84diMoRtbUOERLpxuBi4NxAwC7c3IcK0Cs5wKeZzwTGc/DjOc7jGcd44mQ6yTdjpi/\n6YgwNNJ8RmHjc4V92klNwn0Sm4TbTcbdanqt+u1ec13RoBejCdkuYTuL2UQNv+bLbOJB9tCBFcTd\nOXLHFjPeu7GbWRCg7tJY8PSu6+rf6Ooaa1qlv6djtTvVCH5sLkIzuea7tqXD1HXCXNN3zkTMdocR\nflaCCPWqSVhs6j4XO5+1gTrcdj5MS8ttbN06gq1bV9PSMgqh/wFY/taGNfNpEm+3JLCJt3WNu2My\nBT+eSXFanVg6PRD4XXnCFufZXOd396P3uu9YjdB+UFR379+B3fzdpOlHkX1IcV86dipUadGD/7NE\noy5I3X2HJrHXOqYgQpHyFa1f9yeJ22g18w+b31zByj2SgKVNl7+6zhDaNxWgLjJ/NfSEho+40Dgf\n1WL5mNsPHV+lKXf/LSCstLUlEEVEOO0JX9W93t3PlC5mIOb5BvOMW8cLpm9Bnq+8NRc/HaUjY/uz\nQBtiBBUp/jqnIHO0mP+N8pHAlMmk/gabK3IO1nPlOcQUo6ref0NOIkfxM8Jqksl2otGfcsklr9Pb\n+zIdHb/CJtlV7c11CJj+JWRRTkOI8wRCDLtxk5TCg8Tjx/G8b5j2LUJwMu0IDur3iNbpRWzC72v7\nni4svI2BA3vo7HyZRGInouZ/GzFN/NR51wkER/KsaW8OYsv/LaLqH4oIJC8BC7FJuN/Aj71IwybJ\nxvy2wdy/CznVXYDF20VNO/YRVC83Nf0tjY1rKCiIsnDhk9TWHuDIkX309kZNuzoRte9JZHPoAD5v\n2vh5RFhQLMrryKlmBxYnoLgPix0sLPwN+flw9Kiqu13czGbErHASwdVp23uwyWkVx6S4EPUG3INF\nJ3UjdLAJi118Eosj/JgZ+1ozdq9jGdgXTbuPmvloRxb7MPOOy7DJhZ8075tl3hUxY6L9/y+EHtzE\nzzs5dWor0MvJk/+JbNxrkU3yDUStr3HVoghjyjLveMuMz03md3dNqVZtMv7k21GKeYjR3G+Sa0uC\n7eG8y3C2me9/IkavD/MVlnQ7z/meS2oC7v6wX83IcUgxXy2mRwPM6HpYUaoXWQ0u/usE+WzjWvZG\nxvMXRrGPT9LBjYjwcgoR2VTLFUw8rvP+U2Sze8HMYymWBv6A8IWbnXFXGtN5vM6pT9fRGwi96O9/\nwGInVfO4GfgsGgTW8pcmRNc31IxIF0J3dyAmqp8CP8BuqOucUW5G1sfvzf9/QMxw7nr7njMmbpuj\npt1FWP7WidCUhjkJjmEUEQy7kBm92YzbJPP7GIS2NyK8UTGemqi7F8FQWZq0CcMnm2dfw67tcvzJ\n1V83924zbcxHTMprzTvfwvKDP5jruxGKjSCOMu6c/sqMSRRrOn0ZizV2+bbkmB01CpqalAaC7Z9E\nYeF/EI2eoqvrJBbJ+BrCd2eZ/njIfJ9C5tzd33QsXXoNJhd/x+n/Bvy85iGELnpMHRsRnqo4McUH\njkBixWmstquxuO7nyc19mXj8Ovx7TC2yF20BvtI3Lrm5d5Cfn0lLSxpCGzXYnM/at3ozP9uQNbAZ\nob3fmvF4HNHuPYGsmWrTrz8hVgN3H8nA7uVHES71mm8eZJ++LtCGTQivTMef7F3XabVp/ztkZb3A\nwIH/QVfXO/9/x5RBqvZDJde1+D3qLkJY8u/M/36TXSJRzbvvHiQ9Pd2pR82U60hP/yGRCCQSExBG\nshaLe1JArB/LFonsM3Wp5F2HEKB+f9m0aw2KT8rI2M/gwU2cPFlIIqH2/CpkK1OVLc676p0xiOM/\n4eZjg5auRAjsPARf8T1kYy9HMBU9+FXjqjo/bu55F7+qNkzFbUt9/fFAtPhKRLW7FbgcEbI6EUFH\ng14qrs4z/Yog5rNs/LikCLIIJhONDiQzcwA5Ob0cOpThjIV6Bq0249aCbLKuW7WaN8BiuaYizGYc\n1kFCi2rIZiPzX2HaqWPlngTPwZ5A9QQMwiw+jyzyQdiTtOvJlEA29zLkRPYwlr6OIydmv9kLfklT\n03yamtZhzWQrTJ8Hk2rYa8GumULC433p7yOBuyim1YSaeAKQWQhTmb+f2bE/3BchrcS0zMWDaf0x\nZPUdxgpf4d6Pl3KAS4BnjelR1rQmDZZ4SzOwdBjFb8IDOz9TzduzsHiUKmQt6elbaeAyZI0/gN8z\n8hoGDBhIMnmazj7lY1CjpnglsPxD34Vp23xEU+TG3zqGbM6jzGi0I3RbgTUjqXam1lxTbM4pp551\nWMiE/j8Vv6nPbXMZIvS7vE7NZt1YU5blcx/72CAOH87g2LFhCE2HhVB5GjEJf4X09Dw8r5msrCQd\nHX9GxO/L8eN8/5tI5Cvk5Q2ntbUZz5uNH6eZDhwlKytGPH4AuJbs7Fyi0QZaWr6LON+A8Mkp2BAV\nlyG8awThfLACa7pTflBn+t6L8Is5fe3Mzt7BN78p2TLmzdP0XlJXLDadCy8cRXHxQBYu/LrUXrHO\nZFPIwwo+7twcxZqCtbhamyipe0cDGRm309PzJOIk9DSCqJxs7tmJzOc5WLOxEqzixHQttSHrIuiR\n2cXo0WmsXv01Hn10C6+8kuZAcqqxDmB272xrO0hX1wCEB490fq83z6l15h7z7jSEpjVGaRDT5Zq2\nH3Wugc3yovvYfGRt6Rjofq5cyzXBNiFjvgGLL04HdhKJHHWCtENxsQSRvfrqdXxY5SMklCnhuTZs\nBdJrqUUGvhELNk/FMHR1gR+gCCqcffGLkm+spka9oVyQ4PVYIc6WSGQFpsXqVgAAIABJREFU1iQA\nYky5H8t8XAC3PN/TU8vx49/H855yrleZfvb47rUCm4ZfiCOLswpRaW9EmLPevwQbdDENP/jfjeGi\nNv8DCNNWhutuFNqOasJKQ0MzjY1POFeOmz48iRB+N7KQikg1x0kpL6/A8zyqq4PRvItIT69n2LCP\n0dDwCIkE7Ns3m1SzsAWOalqhiop1Js5MjETitHG5d+dOx2gestXvwIJv1cyjbd2CTYiTiz9O2wxk\no4bUmD/zEaHrn5H5UlGkFNG49eI/ZCzBn8EgH792shoLro8hgr4WNXv9JXD/U6aPKtzNc9qoJpKR\nXMB9xAzdvV+KoWD5oCEnwC+AqfCVj1C2G1ymF9kejuIH3u9mKNs5Ye7SudTvWpRuH3auKV4UhNFv\nwwLltZQim8FybIBqfWYNIvwGaUA1lrq5y2be3i4poAYN0g05aPZYjA17U46f7pR/1CKsWEMDKB3P\nN/UNwTr1uGOgG6tCKfS51dhDSxn+mE7u/1qC5p8vIhvoYmRdfBPRSvwa/6YFpaVZPPTQDKZN+yEW\nqK8pf9yQBVBSks4tt1xtsqxc3JdaSAJku3yjFsH9LKelpRY5lAT5ci3R6Ao+85lPpqQMmzSpkpoa\ndz/ZjPB5d04rnXFzi4c/N0MbNhgyWMesdIYM2cnatQv63rtmDYF8lvemBBvV/yWtmMt39b7NyOpx\nTcQu33H5ia27tHQeMI8///mk4xilv+9GBLVaRCAF2ctux4aTcnM+K30ofxMB5MgRCT6+bNlMw8/1\n7dHAGGlZQiKhPH+P87vWr/vFatPnc7AxLvvDdOlBxw2eHsYH1CmjEj/dfMv0ewRWZhiH5Wb+PcQf\nX84Gkf0wy0cEUwaW8NQGPA/ZVBTHMBcbeHEWIpzdgB3MIK6jAQvclVJYeD8LF15lkhpH8YMza83f\nu3zPpKffwd/8zVBEzaxt1NNKOWKSC5Ntq/G8IYFrE5EF0uO8xyUMrX8UchrTUB+l2NgvYEHiigkL\ngv/d8ZqCMPRWc037OBO/jXxKAJMnycuLioJCcTdyGtbvmcip+yj+08cSZEEsob7+uJP01w1MCllZ\n2U7y4NVY3EWqDV/nb+rUMt56aw2nTj3LqVNrefbZ+ygpWex7bySyyzwVQzaLiYiKfTeiSdiDbC4v\nm/u6KSi4B8vEtd9F2GTaLr5iG5HIbeba1YiokUAEew1r8ECgH/p8JcIAgwE+o1gPtlPYedUN5S9O\nW/R+UBxZLhsZz9OM558YT4TxPG7+LiCbHiL4sV5nwnm5nyDeSz/HSMV86ffhZuR7kW1OzY4J04Zx\nCJU3M47teGzDYxM1vBC9k00sZR//N6SfOGNCyG/gj7W3BhEwdgeecbGXDdi1WIYVyl0ayMZ6RRYS\nBFo3NDxFUVEr5eUVjB8vCeRtfeVkZ1cxbNg7RKMriMW2EY1ew5gxP2fChGOMHfsukciPTXuCfZtJ\nWtpuM9phY6AY2ahzTbUPqnWqJBZ7y9C2O2buu4LvnU9+foJY7PdYrdsop0/LEBpeRjyezqJFm0kk\n8p3f55ixSwJTKS29j/LyCm65ZRTPPHOY6uqHqamppLr6YRYt2kxurqu1g9QYeyMD7RONciLxoq+e\njRuFhwt/D+4nh/AD7N29RcdNMUaFyNoFoeKg5UH6X1p6sU/omjq1jE2blvG731WycOFVrFpVzaRJ\nlZSXL+lrm5Zly2ZSWDgXG2/L7fco7NxqOQZcS2bm28Rid/jqKil5kGuvvYzW1hEkEp80V7VfQeeE\nqQiPiiLOIg3YYLPLA8+qsDYCWE8i8Txbt65m3rwXuPLKkYbngqxqF1OnxeX5rqjh7qPqVDUSi0PW\nOoP3u99zOTMfKAMmEonMda7VIrzgVtNvXXdRwo+e4TqrYFD2v3b5iGjK9OT1OiUlcxg16jzefPMI\nbW0D8ZsA3NOUniQHI4O91/ymi8s1TanqUoCK9947hVdeqaKzUwkAhDD/laDKdsyYHrKyxuE3Cajp\nQSX0/sDlwWB9aqZ4DVlkX0GIdQP+k00VonZNN/U8jE3qOhU5hSawWrGwdrlaMw298CISmNU1B15D\nZmYmkyaN44orLuXVV92T3pdYtaqauj43NdXMzHe+X2/6qd5DrjlZyr59d9HZqSZg/wkvFptjvAzB\npo9xNR2iDRs4sIU1ax4ITXMxdWoZb7xRx/e//0s6O8Wk6Xl6GlNBdT5ihpiJmKDuwXoSAjzIueeu\n49OfFm/TXbuOmHQbuaZvrhoc4B+45JJfMGpUhck32cuJEx7t7d0kk0X4zQy2HwMGtNLbO4iuLlej\nqUUPC9WIKOPOq86paHFymckYnkPTDMHP+yLdq2ZKi6sNC7KeM2m73HtcStb6ixBBy3UbUO1YPYIt\nG40cfSQS21JOUGnuEI3DgAHbGJI1k6KiQoqLB3LFFZeaRNZ6n4Yq0WJNNwUFB0lL66Kx0fnZp1UA\nmE9h4Z/IydlLU5PMQTzeY2iuGhsmwoZiEWznLci4r0bWrIKlw1lmXt4oNm2SNkseUruOrrhiIs88\nc5gTJ+yaiEYXs2xZOQAzZjxu2uM3SxUU7OLeeyfxyCPVnD4dBJgDbCEz8126uw9iPdeCuXSricc/\nTSz2el/09bq6HYHxtSFoLrvsE2bt30dFxXq2qmKlH32p1aS7KfHsGr/ssgW8+aZgIMvLl/jS8kAw\nHVPf6AS+a8gkNxxLalonTYNz771T2LtXcynLM2lpp0gmz8Py6ripJ2zcRmHXewfh/J2+4NzB4s+j\nqO0TAcLPvwZhMZ8unSeQ8awlqJnt7hbN7MiRMpcun7Yp/sAPS3GdGErxH0reRLDU5zv3uHxHw+XY\n0tDwCK++WsHKleU8+mgF9fUn2L79BKnF1eqpWk2tN+rKk4PADVYg+OQpiEA8jaBHfnb2DEpKisjI\naKOlpY1Dh07T0+PSRLDM5xOfmMfw4bIWhe4/jqXP+5x2BvkGRCJ/Ck1Bdfp0WF//isX7/7gAHiz1\nYIk3fvwdfdcLCmZ4UOPBbR48aO7xAp+lHlR5cKMHN5lriwN//Z/y8iWe53ne0qVVXiQyNVBX6v0T\nJy71SksXmbY8aK4Hv9/m/C+fWOwGD74cuF7jwZ2++7Kybu2nzpucv2G/9/ecfl8a+Fvjwdf67WN/\nZenSKi8a1TYvCnl/lQdTTTurPJgW8o4aLxa7MWWMCgvv8yZMuNu5NifQB/lEIrd5GzbUnJGOpkwJ\nzrfW415faq7Pft9x2LChxispeTDQpxpT31IPFnsTJswN3KvvWNov/U2YMNeLRKaHzJf+P808f4dv\nXofxWW889H0+Bl4peJeazxfA+1I/n+nOJ/jbpwL1uB+9Pg+8zznvdj9XgPdl8G4A7yrwhvWNsUv7\nS0P66nlZWXeGzuusWd/0YF5gXG5wxn6uF4t91SstXeRNmDDXKyy8P0BXf+dddtl8b+LEpV55+ZKU\nd1ia07kK0kyNB0s8KDftuNU7W75ydrRpaUHo5sx1bthQ4xUWpvKYwsL7vA0bakLoL4wvLPaysm71\nJky421u6tMq5Xz4lJd/2jdOGDTWGN811xiT1GeGN+o7gPEj7li6t8oYMuclLT58R2s/x4+8w7dH1\n5d63OOTd/fNqt/3l5Uv6aGDp0iovO/smp66lHrh0tijwzv7eL22MRGZ6EybcHUq//c23SyPh9yx2\n3vFgSFv6p7eJE8PmPdh+t+9u3bf2857g+ggf6/A163lpadO9goIFTrtu8VL53ZfMNXeP1fV3hwdf\n8caMmRe6jt05DuMDQZqWMdLxcOks+N6lXnb2Td6IEdd4QZqHb3sTJsz1PkzR6SOiKasEYNQoa6uV\n/FKupuFY8CFEwj2CDba3GAvSdGN3qStwgvp6kXIrK+Vk993v3m6Sloefhlpb69m79zTBUywcIzv7\nKtLSYnR2dpNMvkdamoBNL7qogGuumcxDD23B81zHgbexwVOldHUppsGt/zhiGixD8GRzETOha0dv\nDXkundzct7nwwgXs399IU5OOEYiW5dyU8XDTMYWVP/7xiEnKPQ8bMsTFpM1Hoi9fgaihx4TUsp54\n/Ff48Si9FBWdZtmy2SxapIlt1UUe330DBjS8byJYm3dUi9w/YMD36O29m66ux7ExvM4hrATHoa1N\ng61ehXifXYB7kjp69AE2bqx1TqkQjo0ECdHyI/bsScfzXLyEenTFyM4+xYRh79Jy0KWRfwL8YPwh\npKYayiY8KTf4tWGa51FLDqJ78ymbnNKLjfdVaOp6jxgHsv+Ozs6hpOKcKs3fOiywd49z3c7ruHGJ\nlHmtrFzNc8/tRjCbrhOMYj9XAw3E4y/0aXALC+f2aYFEc/B1QNKndHVFWbVKTun2XWoCDoLR1XS8\n0tyThg3oPBmLC5uL6AllDRUWHul7p9KDJIgXrJOlTXft1fPOO0dJJtfgx4BJiUbv5IorPt7X7jVr\n8OEozzsvl2uuGd/3rry8Y1x22QJ27TpitG7hWNutW6G1dTG33FKcohV350LGbjQ2rpeC7GcChRQU\nHGPlyrupqFA+4F+3Q4bsZM2a+fziFxt59tmT+AORuqDyTA4ebGHChDj7968lmVRcmq4dNSVreIRu\n/KFsbGltrae8fAmHD5/gwIFDQA7R6ADOO28Al19+Fd/8JkabfjNWC3Qrft4G/rU7Eg2GbLVW4lSy\ndSssWpSqAUvlRVLC8yS7ZYoJDjsLyxfC96X6+uN9fW1oaKa7W3lXcD/YSm5uh0mB5AbbBguDyUBg\nFnOx8ekyES/Gy0LeXsubb75Obu5UQ+cDuPDCfGbNGkx19Uw6O7uIx3spLi5k8OAuzjtvAd3dCf7y\nlyY87+dOPWWIo1rQ4qPhK4YzYUIvy5bdyqpV1axY8TKrVlX34Qf1o8XVULe21gMx3zNi1h6JeNte\niGgqdd3VIdjgdNLSMikqyiEnp4hjx1Id//LyXuZDLR+auHeWBfBgsVdY+Hc+qdavQQk7AciJOCPj\na57/dHhT4K//mexsezrfsKHGmzBhrldQMNPLybnWi8VuT5G0pR2p9cRi0738/KDk73mFhfd7GzbU\nmJPDtED7b/X8fZLrWVl3+f4XzZR7wvlmP1J9/6dde3pWTd6tnmh97gy8f563dGlVv/NjT2BhJ8bg\nd1ez9379tqctPfEMG6aaCXtPNHrHGdun5UynU61/wIBpIW0PHzvRTLh9CdKjrd+OkdatWg33xPd3\nnj191pj5fNAbQ5lP8xSmtZqCX7t1HX7t13TwptK/puxzWM3XFeCV4dd2TcBq1L4E3hjK+vp25rEO\n0xjf5rkarWj0Gm/MmJu97Gw/3QXHe8qUxd748XcY7XXwdK7v608T62+rX3Ok73uw730yXzWeaIFu\ncvpwhwfXOWtkTuD9NR5c78HXfXXrmu/vvak8JExjYU/p8rem3/FXvuXnG55XWHib4Um63oNtT9Xy\nhtU9Zcpib9CgOYH1nPr8hg01Xn6+O17aDqvBi0S+FLI2bvP8WjXVEAf5xhKvoGC2N3bs9YY367il\n8jGrlQm3XLhzVF6+xNDarMD4B7U4X/QyMm737Ny4PLj/sTwbTVnq/iafESO+ElgrYXXVmHv648f+\nNaZ9ljl1713s+dfWDYH65hp694+LaPrDxzhcC6trILiuZf85U/v7qy9MazZlyuIzaM0e9JYurfJi\nsTDr1Zc9Wfdh1q7wefwwRaePiKbsYbq6bqWiYj0rVrxMZmaCa68t5ejRBxwQeBn5+T9l7Fj/iVhw\nD8EwGm5aDj/2oLPzJ33eE2L3X9P3W5itfsWKlwnT3mRkJGhuHoPf3l5LQ0MOM2b8kPb2BDaqunrr\nBT19pM3jxq0D5vHee22cPt1JIvEbrEem9kM9B10QrG3TkCE7Wblyft/JQf8++ugWfv/7U7S3j0e0\nPm5UfYAnefXV/r1J5HQB4a7Yxxgw4Do+9amP09p6jEjkObq78w2GTN/TX78lQ8OkSZVkZia48sqR\nvPvuJzlxohjF9KWlSVYB1WqeqQiOZLEPx1FS8mCfBmDq1DLjlUVKPwoKdrFypYBty8uX8MYb79LU\ndD5+bEswIrWUrq50Z4zcutcRjf6QgQPzjXfov3I+Y8jkIBYHdnaekMGI92GphtxI90FM2acRNxHN\nA5kaamIYW7kdl67EqeI6woo95fvHMTNzPz09Y0gm7ZoYOPAeqqokbprfM03mxY+/mYfo7YLagTZk\nPdQguJPU4moh/JpLKXv3ljNnThWFhb9g164jWK8s1drMQuI45WHXiKLlJJSIaEuiiCebLQ0Nj/Do\no+JhHIaZmjBhHtnZVXR2LsBGt1+PX2MR9C6Erq7UE7kdL9drXNuhYTEewXpyuk5Btm07dtzdBz4X\nDVwb3d2dJBIjiMcVT1eGaBDCtcT33ltFc/M4/GGEdpCTIxrQ8vIleJ6bDNrVsD/iXK8mdV5lPC69\nVPjDvn0P40855obP6CWZzKap6TH8qcLcsZE52rRpWcADUsdIx34eqilKS4vR0/NTpz1h2RvsWGq9\nZ+JFWlpaGglq0qGKEyfSSCZdHp2KdRJaUo1X0NtdsJaf/vRon/ZT50M8Jl0LlMa1OIKNIqB9tKEy\nIpGvkpMzgLS0Lk6fdtN+We1vQ0OOwT/6rUF79y6noGAO4Vq/ESntd/ez8LVs8YMQhuFzvbXtM6++\nWkEslkM87tbn4t38z8Tj95Kd7e5ldh43b/bf+9csHxGhrJbm5tFs3WoHa9u2ueTktFFQMAvPizF2\nbC4PPXRHqBlr3ry1NDSoaaEa2ZLKsCmR/KWrKz10shsa5tDTU0Vp6TA8zwNcoSQMoO4On12s7e1L\nsHGvwMZmuY3gAsvIuImWlghHjgymq2s91sxThkRuV+8ZNZ9kYIttU2lpZaj7tRVGJuNPI6FtrubV\nV0Xtr2ph1wTT2tpAYeEDNDTkhI7DhRfOIzMzQTyeTkPDSYqKirj44jYiERFut207RFPTXFIZkGRo\nECGplpdeWkEy+aL5XYSwZBJOnepfYAyaim65pZjf/laE23i8k+PH0/nHf+wIqK9tvzV6djyeZjam\nLMPYdQ6OO28LPiumq9bWBpYtmx1gwmVczFWkJ+I20gaRlLyPo/CXsw09oQJYAn8w1xLER7gXv9AW\nND/uJY+tLEQCaQ7H5nucgRhCO/s21rCSKoTKfbHYNLq7/QJLU9Nj/J//s4A336zy0ZaaFU6cOMXe\nvWqWb0MAx+5GpLH6dB28P+g61TRUC7xAY+MCGhs3A19z6pf2l5Q8SCJxggMHepznJmIFEjV5jSOs\nnMkjq7Gxhc7OFuxmXml+0X5qWIz3hxVUVKw341UZ+KUW8TDcjHj1Kr+IkHqQg66ux6momMfRox4N\nDW4oBA1hMBAb0qIu5fmGhkeIRr9KqlCAcajQeVBTo/YvLKuC9pnAvVHq6nY4HuBR56/Lh2rxp9QL\nLzpHSoPxeK/ZdHUV1WFjDVaTTLpHIZcOw8cyyIuC5mGQQ9/Onbs4eDAdf8zCCPAcyWRloNXSx4KC\nWVx66UW0ttaze7fSmvZ1NXJgkVhq7e1ZffuX29/Dh084QoaMXyw2jXgc/Km8gqGNyvA8+NznNJyU\nOyYa4kfM0adPu/uTncfTp08h5lH//heL7WLwYH98t+zsKoqKili1qpojR8Jdkc58CAujgVpef32P\nM9du6Y9myhg71jpzhZn5P4zyERHKgoReaxiFvdbSEp7iQPEW9967kv37G5C4YHoCDW5zQiTbth3C\nC/IFQ2BWUBCPmVtuKQ499eTlDaCpyWUkbh+i2FO2Mg/XZm6xMpHIIPbtG4GV0t3NvxXBUiScZ9XD\n0l/CGLguxj/9aTvCxN3YZFaIbGmppbq6mtraNYwcWUVHR7GjoRQN4tixRzhyRLFZev02jh7NZ+tW\nxX080ecJV1KymIcemsyqVdVUVwf77XpPSTuSyU8SVvrb7MI8nLZtmwsMoqlpdl/f6uqgrs7O5bZt\ncw1taRqTJ2hvh61b5yNYA5DxbkA2DxfbMhcb/VrK0aMP8MYbdWQdXcN4g/8CqwFTrVWYFuxsPSGb\nsSEdtW4VwBQf1ouEHnVjfb1LNu9yP7Cc7X24qHWIYK+n3CpsGAWrVT5yxH/6d0t/mgAruPvLrl0W\n67NvX8RsCrIWIxEXzZaJH8OjeLQFyKY7mnDNwZ0sXPi1vv9bW11hGiy+agl+PiNakWg0SV7eUCCD\nAwdcP1PFS+ozL3MmodBLZSrAag4ezEdmL4g71LFdiWCInux7Khq9iyuuuNRX08aNtdTVKfYp2I71\n2BA/Lq9xtSH+8t57bUYjrLwnau5XGlcMaDjiUHC/YUXyd4rwnoV/3SwBtgfud73fdF3KWDU2QkfH\nDOc+968WVxsfPj+qmS8tvdOhQRC6eMm0sQ0beDjoHV2NpcPUunfsyGDrVqs92btXgoymanPKEZo+\nH//eEOT/binj05/ewsKFk1m0aDPt7RHnXg0pYdsdj0N1tbThjTfqeOaZw85are3zYhRv5yk88cRc\nGhrasBwpnBMdPnyakSNdrqUYzLAYZ36NYiJRSzT6S4NPdgPvfoHLLy81XpzHzdw818e3s7ODnrlS\nznwICwr4wvOamtbj9xIOu99fRo0azqZNy/r9/UMp72ffXLp0qReJRHyfoqKifu/fv39/yv2RSMTb\nvHlz6P2g3pdhGJL+bfLB4rfjh+GuwrxSzu6dQU8etdML7kgxNHMCdQVxDzVeEC8l3kCeF+4BpjiH\nIDbO7ZvgGrKzb0rBXfnxLWEeVGG4oA82DhYXceZngpgA63HqPvv+c+7iBoYMCWLXzq6u/tvsemTW\nePBV57tifb7qFTMr1AvRxYK9nwfkB/WE/BR45SHvc3Fg5zPaC8eKaPun9dPvu89q7IMlbE2Ix3Qq\n/iUSue0MNLc4pC3umM92fkv1kkpLm+YtXVrlo43c3CBuROsIW2e2rYWFt3k5Odd4/nXrPhOOPUpL\nm+aVli5ysE9BvIrn+b37grzh7MZfeFx/3tjTPb93tNvGcPxSQcHskP6FzWF4+wYO/Gro9csum99H\nI8IjrwmMyRdSxlDGIwyTKr/7MVRh3pjub0G8U42Xnn5HP33R/xXzFLaPuHQQNpYfxNtSsWhhdYfT\npWLDUrGcNR5cfcY2hPPJMHybO27hzwwZMiOw76nXZtiYhWEZ53oDB361X6/ocCxezRnxqOHPBekk\n2D4/njE9vdxLT5+eMu6KjQwrZyE6/Y/LWWnKLr74Yn73u9/1/W9TGPVfNm/ezMc/bnECBQXhCUul\nBCXVDx60zS8tWy+OnJztZGfPpLs7QVvbr517gifu/tWkQS8PLXfeWcd3v7uVeFzxDm7dm5E8hRYf\n9bnPDSU726pCDx8uMh5kYZgkTb9Rh19zkE56+n8TiRwjkZBTW2cnPPPMYi6/vLbPRCRRsoNxd1wP\nKh0vPe0sMdcOnfU4TJpUab71P18W22b7ffx4rhP/SJ9N1YC4OIxUzVglqcU1b6Sag7q60snLGx64\nV4vr0eWavss4n+lkmujyYSmJglqwMDPk2aQd6s8TUiPeuziw3eSwiTLTon83d6omqDLQFxDMSND8\nDUILYaf/M683lxasOeg0wTmEKjxP6dCluWCgyuWmLT8lGFXbtlNNJeKdJSftq7j88tIQ2nDjyjWb\n6/1ptqU0NDzFhAnzOHJkP8eOfQVB87kzp+vaNTslSCb/jbq62tDfLBZRqSIY3DWdSGQXnofzu9Dt\n66/v8Wkrhcfl4x/jeeZvOv7AuWA98A6Qm/uAT/sdru3XAMXBMoVIZC42O0kt2dlVDB48gO5u9V6X\nUlh4Pw89JNoNtWLYOGzathJISWd3Kbm5q0hPz6WlhUBRM5LEEGxoWE1ubjptbRLf7ujRo07ctS1o\nLuC0tGsYNGhwH6ZTSnDd6//DSU08b8cxPX0bvb1gg25b2snKOmiyyPhLuLel8iN3jvqPw+diwwTf\n7N6zBRu0NZwHJxJhQV39bROe6GpWW1P6CA9SWDjI5wn8zjsnSCbHBmp2969U/F1Pz9184xuTQ/fT\ncI/U9zchpmruyygs/Bfa239s5r0ypH0V5OT8Gc8rpLNzE0Hs3EUXFfDQQzM+dFNlWDkroSw9PZ3h\nw8OBzv2VwYMHf4BnGrAB4/oLf+EHhrtpNSCIc7GMLTs7k7Vr57NixcuOLRxcW/3IkXns2HGcZDL1\nre8XLsIyJAUDq71ebOOqJl648LaUCS4vX2KEsqBAUmbAnGCDCNrUHqNHj2Pr1tW+utz0D4sWbaax\n0cW+KBNw36+b3Qn8C8cVLv3YjqA5y475mXE+Ya7LNgxGwnnPSQTXVMSQIQ2sXCmq5ssum8ef/3zM\npA9x+xQsek1DXyjGMApUcehQgvPPH9fP8xIhupj9Ji8kiFnJmiLPNgdkmAAWDEWRRAQwN+1QOAi/\njAPUkJFxO70XnmT79qFYM5eGDrgdm0A5rG8a6FfNlW5xwdf+ciba1+IXljUCuOsQE6GnD6blOo24\n7weoYNCgQySTbSZllhZ3XYGsg3cpKYmxcuWCPgCzfX81AqSvdOqehzWN6ToLZ33xeDq5uZ/i2DFd\nD6ux4wvCm1aQmZlDLNbjbPZBHI6apNT84uLHlpt6dwPZeJ7u6P5NrKnJH3JB1lswkOppxOw8D5s9\nwmLlYrF5rF//LYCUcAHxeC+x2G7icfeZH4aMShlZWcspKxMT0549STo7F3DgwDpE2L+GzMwcxo8f\nmrKRTZ1axmc/W+2k5AEBd6c6Nnz2s0fxPC9wr5RYTMzDQ4cWUVw8zMf//fxErpWUPMjKlV8KOPhA\n6tpweZimYfL3HSA7+00SCRe+UUFGxjtkZUXxvDCckn/9+Hmly+/V2cSlsTJKSjaxcuXcM+xxOn5B\n064WWQvt7U2ElfC2uRAZzaqj4TEGEIv5+fnGjbXceGMVnZ0X4C8Kng/H37kgfbf4+2dLmAnRj3uu\nx/NOB/DnX3f2/GC9MnbZ2TNobPwJFpOXjedlEY0eZvfuZr761R93ro1sAAAgAElEQVQSiTzK6NHZ\nrFo1739NQDsroWzfvn0UFxeTmZnJZz7zGf7pn/6J884774zPXH/99XR1dXHBBRdw//33c8MNN5zh\n7gSSk2s/EmF7NkK0xcDz5p4CGhsv6Vtc27atZc0a+ojjxIkGJ8aL3ZAbG8dx441VFBUp/sGvQTn3\n3AEMGzaM7dtd8K+UIFbFLRs31vL666pVck+/NyBbbQ/d3WmcPp2H5+WmPLtqVTU7d+4iLW2uic0D\nUEFW1gFGjozT3n6ari49nVow8sqV850Tk790daU7QGDXtq+pPFw82BHgARoamhHgs2rKdgB3IBHN\nbaL3xsYE06evYdw4yX1mI2cvNjgJ/9jl51/Pf/835Od/nWi0k3vumUhl5Xw2bqylomId9fX7kIwG\nTfjxNLXAj+jp6WX69KV0dRVgk/K4JVWzZvvUitCQ/5R28OA8br11ZF+bx3AOuX3JcaWcCQt2tkB8\nNwK+1nMBEjfbPVA3IudcFcJOA3Wcz1auwh+TDnp6nmT79i/jH6fNwCvYBNuqblGwdlAAUaZyKxJP\nTtZATs4h8vJUkyLrIyvrIMeP56Z46HleJuedN6CPBvwgW9Xs1pCeDvn5MGhQJvv2aS90zsI2Co+0\nNI8hQ9Lp7r6DeFy93o7g97Q7ChRw6lR7X/wxOWG7Ao0b56rW1LPTzIRqivtUN854rmP79iNoonb7\n/luRdZ0ExgOj6O5OkEjscZ4NapiVKiYCdyJr7BhCGd9C4mK5uMrbEWHFFQZr2Ls3m6uv/gfS0obi\neRFEbD+KTQGluQJnI3O+E7gG0bueYPDgoXzrW7+goaGZ3NwojY1NdHePoqdndd+7Y7F/JhabTkbG\nADo6eunuTtWSjB17Lps2LeOyy+YTj38NSVEz3PRFNse6ujreeKMuRYNqAeY3Yx1s5mKTR1ut+Btv\n1PHKK36PNz92VXj3K69U8c1v1lFZOT9UG3/FFaP6HErq6sLySOqBTdvyScQicW6gbYKFamvTpOzC\nozMz62ltPZfTp3+GX3CX9ZOR8R579vSY8erlwIFDZGTcQU/PJwhaPrKzdzBt2rmcOtW/Nkj3uIyM\nGfT0XIBdu010d99Jb6+7f4ljCzxCIuGuBf9Yu/X6984FWJzY7L4x3769jspKoZvHHqshkcjG846T\nlpYgmXTfXU16+jv09oZzzP408H6Nl+VDe/Z0942j0vHx4wMdbKp6ikpR/LkV8sKtMNnZRTQ2rgbe\nwa7F1bS0vIzkHZb79+2rZdq0lRQXP0FbWyKQevCvXyLGPtpv2bRpE21tbVx88cUcO3aMhx9+mJ07\nd7J9+3YGDx6ccn9jYyPr1q3js5/9LNFolN/85jcsX76ctWvX8rWvpQo4kUgE2UxUiFDA47eQwToX\nEdpchgWwmAkTjpngo+5JXcNI+Dfk9PQvk0zm4nkX+q4XFNxDcXGUurof42qkoJ4BAxr51Kc+nqKZ\ns9qBiGnvfGzqom3YpNIuESw23oFvsWNHhlkALyCAT5HSI5GTfP7zw9i9O80Bo0t7YrHtfPvbX6Cy\ncr5xbU51yZ0wYR47dsTp6lqHP8msjs0WMjL287GPDeKaa8bz29++xdatB4HLnXtUoNVwIqkq6JIS\nC2KVgH1bqK8/TkNDC0VFhXR0HOLAgaGGUagA/A5lZfmmbzjtmkEQ9G/Bo23YNB+pbs5Qy5Ahqykt\nvdgwsqt44406vvOdl/EniYcxTCS3b4OWko4/fMT7gfH7A+IfQ7KZaj1uCAq3DEV82jKARiK8xV20\ncRIxUL5o+v9jU9OvSS03IocUpfPguBUj9KfMah2RyAkikaTj2boaOQBZk1N6+u3cdNNgdu5sNLTp\nCu9z6eqK09w8Gr8A/ABr1kwzp9HKQDuW+56HQYH8pi8AY512usKU30QZiWzH857vt/6SksV43iH2\n7RtNMDyN9B88T137t5CVdYBLLhnIRRfl8vzzLSQS2gZdKxn4zR2ViCl0GTKzLg+ageU1ygsUWHwK\nMYHXmuvFwN+hASrtfNtgsvYZ5SM/wQpwOl+rgdeBfzH/u+vCnVt3LN2/Eed++/4hQ3awdu0CE2Jo\nJpYP9gJXUV6+hU2bllFQMIfm5gzkCJHKZ7Oz7+L5528GCJiUVyMpffwmUGtJuMp5xm+iLirKZN++\nef2+Kyi8VFSsc3isCl4J591uW2oRjfgg4FNY/i3vT0t701k7OM9vAf4NSzuYsY0Ext9dk+7+4Jrg\nJ54x7I/fSUCELS2FhQ/whS9kUF19oC9oayTi0dOzwalBaH/AgL187nMlffmDU7XcLs9/BLFepe6j\nMDrA2/9Afn6Unp40OjqKzHoDEejWpfSnvLyiX/C8f/4eJ5WO1QFDadj97qfne+6Z6Dg5WH6YkyPB\nbgG2bm3AH6VhBv7UUmHvB4jwPqLT/7x8UBBae3u7N3z4cO+RRx4562cWLFjgXXrppaG/AQ7Y0QXD\n3uQADsPTcxQUzAwB+QXBmgruu6kfkGYYGDIMbGkD1vkBl26gxmCqJ7e+uV4kMtf57dbQ90Qi00Ke\n94Mzw4NUaqDbIHA6tR6b3sUFigbbvTTkmr8tLrh6ypTFfeMj45naNwHPB4Ghc0Ler/cs9fyBgc+c\nGsbzPO/SnKHvC8T/n4Lx+wPilyFBWd33uSD8C8jz/MEnXfqZ68FVnh+gHx60UFKSBAOPan1hIPjr\n+kDwll76B/GmOsso8DuMnhd7BQWzA2un/3RC6hQg97tg/mBKneDzd/fz3bZFUnidLUC9xhsy5CYn\njZu2YXE/79A5uTa0Lr9DiAKl3flY7FknhdvM/XNC6dnW5Y7p1d6Z++TWc3fIfcG/SjepAVht8Nn+\nAc+5uTeY8Vp6RrpIdQL4n6YeUoeE/oPgusGHBRTen0PGdV5p6SKHZoNA8P5SDQWvXef5+WMY7biO\nWmc/BsGyYUON096w9SlrSp3PpkxZ7KWlhfOPgoLZvrpTx9tNdbSonzG/OmRsPS8t7bZAQFyl9/sD\nbZj/AVPmhc3N0pDv4Xv20qVVfcGCgw4D4rAw3fOPwRwvlbeGzR1n7MP/m/KBQ2Lk5OQwfvx43n33\n3bN+5vLLL+dnP/vZGe6oBH6LgK1/B0xCTqxqlghiW0TqbWpq4z//c0/gtyBYUyXd8PhCAAMGJOno\nCAY8TTUjTJu2gsWL6wKAxEZsoEYFUbs6FT1JteF5C7Cns07CbO6eNyak/eHAX1ddP3hwL88914Af\niBqO6RNXeDXvlTi/uO9V1a+brmqd+b+TzZtP8/LLx5zgihKSoqhoPc3NGhvJdSCoR0wq7jtW48cP\ntjl/800b3NROoCr/8zJ+RtbeQ3zr6u/yLaeGCKnphs4mHIX7dre4WLD+gPhhZsg/M57D1CG0XWnu\n1L9K12sRM1QbMlaPI2rzIJgb4EFycprp6PgRkoJIsS9qOgtimiTO26uvVvSdwh99tILq6l5hKX1F\n6OvUqWTAHK9tyyJ8PS2nqUlpYh5iPghnJ3l5o1i4UMKjCPDYjTN1n3Nn8D3rkNFUvGlY6rQdxOP3\nAKtCfguaFKXt4gBT6bSh0vm9G2veWoeYCgeSmtgqWBSbt9zp007zNxMbauIcBCKQymPEpPp1LHgb\nxNnALcExttjYlpYeg4t1zanRwF/FcNZgtSIa/LPNueZPhzZ1ahmVlatpa2vBrs0z0UXQeeT9nbf6\nS08kcxLFr0GUsm3bV7j++meMuVu1JpWk8tYykskyiosrGDIk38Bg9J7KQBv99OXv4zpkXFz+qPG9\nXJN4FKEHd98J4zASP2vSpMo+rF9e3vC+gNrPPHPYwQe77fNDS6677gckk5n09g4iPA1VLS0thxg8\neCael8ngwV0cO5bu+93GYVNLybjAu0DoM5V2k8lstm494tRXjZiEX8TGPzxAU1MW11+/gmRyBcXF\nhVx00YiU+JivveZCSnTMwvYm93vqXrp3bzmPPVZFYWE+O3YcJJn8D/z0XoTAE9zS6dTprqN6wp3L\n/vrlAwtlXV1d7Nixg8mTJ5/1M2+//TYjR/YHkwbp7HGsh1UaEh6z1/zvMinX1LCG3t4l+EsQrKmT\nFbzP1nfixBCDdwh6QykTEDNRIgHLl9/F6NEdWGLVQI1zEYOVErdO/lZzz0ls3sVqZGEHh1+fdT21\nXOCvACtLSv6VkSNzufLKkfzxj0fYsWMXBw96iFAY5tXjF6iamtKdcXHV5kFPrLmIyOGOuQpzEXp6\n/OaihoZCGhrUJOk6EGg/DjnvWI0I4NnYaOk6bu8hgu5IxrKSbAcLpyXS8/5ekFr+JwJYGBYsHIh/\nDgc4aPrzIoLVSkPEN/CP6XHnmm7SavL6MeCZ3xQfZDfG9PS3yMu7ko6Od7G4D43/dA5nCpjoMnzP\n6/D9rnPkedDcrGtE2zYSgRC4eD6lGxfLIZt4JLLNrBuX3jJ5/fUjzJvXakyYS/AzvaNO3e71zVh6\nW4uNUh/cJCpNm+4lNY5ccM27+SDdzdZl7E+Zex5DZn82/ujzWrQdLtXFzPXdps0XI4eOEwhFaRyn\nicDvzTNunCk1gymd1GLRicG2uoJDgljsFMmkvv8FbH7X44HnlD+GbbiV5q8fhJ+XV8nGjbV8//s1\nCE1+j/75rH4f7bTxBKmbn5RwwLm/nHtuLu3trxOPD8Rvsl9Jb2+M3l49GGrmhx2EH8JlPdgSdIxR\ngdUdk1oEL3aruQ7CDVz+ONLcp16+IJu469oTpHW9tpmmpvXU1KSa5l95ZYaJ3K88OiiA2Gd6emYg\nUBiNYfYAlm5rgUdJJq+kqUmcTJqbt+HnoG4cNv1eZd7pCjud+IPW6v6o5k8tJ4C3kNyZ6tiSBdxM\nPC5tPnAADhwIi6fm4qF1zHRu9KCkB8Fgzmst0jYJGL0WyRjsHja1tOJ3JJqIxCNUXqKHolH4hbLv\n8GGV4L6WUv7hH/6B2tpa9u/fz2uvvcb06dPp7Oxkzpw5AHz729/mi1/8Yt/9a9eu5dlnn2XHjh3s\n2rWLH/zgB6xevZqFCxe+z5vULbcYWAF8GdmkypEBf8DcV40MatClXksZ+fk9pKffiEyuSt0jEWbp\nD0Ibi61yIhwvAyrxvIvMrzUE0xIlEj/h+PFGsrOrTBvUszETIbofIRP7S2TDzTb3NWODkB5EtvUd\n+IsuBvWi0pM36AKUwHo/prp6CsuXb6O6+mEOHkxDNoAF5jnty3xgOkKII8z/pQixqbZGNQPBsSxD\nmNwQZLHpmCtDCAoBLlOeiIy7y6TLEbHnqPn8B5IU9l+R0CErGEY245nIeH7DeJYzngXk0EY6+D7n\nIEtkZOCT28+nLeRzDNkm6s3fI6ZH+chRwDN/d5o6zjOtHUgav+eL/JpFbMLjAM+YMatBUvTcbMZU\n59Ad07hz7Rh+ZpeGaMCOIox2Tt8vsdgOxowZboQapSelOaWpIC25DH8yW7eOMB67BU57XPrCaWsb\nFgvzDacvkBrWQjfedDxvGOnpLr2tB9bS2fkZB1M2xalP6T1Ify6NVZuxyMMKAm6bVWPjjkctsvZP\nIAxXx0M3bRVq3fceRdYlCDVciMWRPIDMz+3Oe7WNOqerEa/PagQHq+slhnhMqvAxBXEK0nFUHqN8\n7SmE991k3v2xwHunIGt6M1YrNIVjx3KQMX/EfFRo0PWtY1tm3pMgVbsQDLorJSurl1WrqunsHGee\nn4pkG5mIHV+XH0SxQYCnIGjKb5j369xUkp09gyuusBvkvfdOoaTEz59LSh5k2bLZjBo1FCto6eYa\nRQ68WnZj57b/9dDUNN+0JQgED6OvMuBWotEV5nobMj+PIfSShjio/RKZZ21/zHx0/NfjpzlIFWT9\nmh4Zb/DzjcWEr8Eu7Jq5DOFsFQh9VGGB66ol/YlTL6ZfZQi30/U0EQlR7ZaJwJ/Md3d/DK5lTVmm\nfXoJS+dBjdZyHnusxsEfunxA6xyJjPkIYCNyWKogPf0Jxo7dy8CB25wa3T5WI3zhXPwH4Urz92Ii\nkfcQhdDXgVpiseOkpR3Gv76DcsaHV95XU3b48GFmzZrFyZMnGTZsGFdeeSWvvvoq55wjJ7GGhgb2\nWfcqIpEIDz/8MAcOHCA9PZ2LLrqIp59+mptvvvkMb6lEFlEtwrA+iQgQW/G782u6onOdZ/0u9Vdc\ncQ5XXPFFnnjiXRoaFISv9d6DzXPXQ0nJALKzR5mwFO7Js4GMjNvp6QmP8ZJMZpCWpvKsMr8EwkAP\nE55jUpmPmjlmItoRV0rXxQACPnWl/yAxVzsg5aTzbB1uupyMjHZ6ehT0rnGs5iHjreBX11xxjIED\np3HZZZ/gD3/oIpF4DjHHhJlBtLhqXpAx/6Pzv26uFwLXI3OQCUSdfJBnZ3aEs/eC1BIE4oMIXxqO\nQrfLcE1YPtv7IPsu6FNPhTrmu8xTLr2uQ7QK3Yg2tQALfnW9gasQYdmNFfQ40EFaWoILL7yA+npt\ng3vKiwXa4NKSSy+qIQIBNKu7u2rNXI3GIeRwoeYtLSsRrz7XbJNqTurtvQabe1Drdc0Rbh+bsIDa\neagm11KCClyqeXHjx2lxNTbD8c+R9ulqsrIy6OoaT+o60lheDfT2ppkwNMFND2R8n0fmMQfr9TjK\nvHcLwvAPIlpSrWO4eeZ7If2/G7vGXVYczCTwLWTsBwCt5Odn0Ny83Fz/ixmnz5j3qBlX+YxqBm2M\nwrS0dpLJb+A3MboHNDs++fm3cPx4Hvv2dWA1purYpKl9vkJWVqaJ1aWaqgRCF0vwj6F6HoqQJ9o3\nQr0oVbu7YsXLnDoVwa8pKsLG/FI6iwTepetB15jmHo0iXOEokvpOoTVbSOVrovFNJHS+M5G1+heE\n715sriu9r0VouRURRtUBbD+pGV1cnhm2FWvferDOLyexhweXTvOdZ44Av3LqqXS+V2OFW41fWQHs\nNddmYjVs85FxdMt8YBNCJ7o/Kv93+5eG5U+1WDoPC3dFIP2RG+tMeduLiFzg8pUovb1dHDjQRWZm\nBrK3XIIcjlyTb7Pp1w9JNas/RU7OVD73uQscz1cNoVWLmKTdsZ+JrPMPr7yvUPbss8+e8fenn37a\n9//s2bOZPXv2B2xGJTLQP0I8WlR9OcJpoqrU59Nf3JErrhCvjvLyJY57fzd+TzWd8Fqam6s4daqB\nVJU1JBKT8JtN6Xuuq2sIyaS7OQ5CGLV6ibq2f934XFFCzbT3oUJiJJIgKytuNgWN8+KW4FSppuvH\npo+6gA/jbqaS1iIoUOlGoiYUHZNqYBTRaBvf+MZk3nlnP83N2vZgTLJgWhQ1l2gZ43xPoHkmi/mJ\nEwfs//Ztv4Wkqm3/GsIX+AUwLeHhKGZxmF5kQVeaO13MU3BD17Atv0PmwDVJ65gGPd90btXUpHhH\nl6YLkfEaRDL5E3No0DXhmrZdc4gePiToJEicK6shAtkc1IweM+9xhRhJOyWCY3AULzb3/BjR4rSZ\n9z8XuE/TZbmmgmA0UFmvQ4bM6EvLJetGGab21TW1TUbGO0gVwrQltEwmMrbFyOZvhcXu7ptNfWsC\nz0qcqIyMnYwZM4h9++6is3Oo+d1dx4cRk0UwBY9ughoo+zjW/K6/68aiAoC8NzNzKt198J8gTxvr\nfJ+KYmwLCnZSXFxIc7N6Zapwpe9Z5TynmFK/OXLcuDvp6trM3r3uWK4n9YBWT0dHttGwLsG/5g8j\nQo5sjsnk6wwYMJP29hL86YhcvqXhTSyv7eyE73//rr7A1/qprFzN97/fQGenHibc9+sGn8Bq5H6C\nq12262EeovfOJ9UsGQxNsZuiogEmhIvSbzB90ADT55uARwP903nehhxA9bcj2Pl058I1r4eZbkci\nGslzcGnVhrtRU2UUa2YL0niwbleQfRuLrbwTO7cD8Qd09gvqWVn5dHWVIxYt5R/K/7WdS7B4YN3L\nlP9osYfBjo5gKjA9VNQinrLDsHuezuNqYBi9vTfT0bEO61lc6fS5HhGsykhVlEiJxYameINWVKxD\nxjlJcP1IWRla11+jvK/58n+jTJxYSXn5FsaMUWboqpODQEvXNGRLYeH9LFx4VSB+mGotgnFFZGIb\nG58zquygyno1nncxcjq9K/Dsj0xcMVfFquYCNc1pm6uRhfUAqabBcrKzqygtzaW8/HxefHEhzz//\n9476Php4Jrho1fyQgTDt3SH9AM8bS6pAlUCYlp6ulNCFoJua1rNo0WYGD1ZEuGtycs0gqjFaTqp6\ndwrRqIzd+fyU8fyU8fyKAp71mSHV9DiQszM7tiHL2jU76mc4or/oDXwaTY/PwUY8a+YS/sQiNlHD\nr7mVzXgc5peIev4dZ1xcwScoGO/EagC/jJyO33F+VyFO/7rmh5nIBlqO0ItqXHUehuFnIu6aCDP9\ngQREPM7Pfz6Xyy9XJunie2qQE3Qxcnp0zTWuKSQDP/N0+3EJogE4l3DcTgI/Zm4Kojnym65iselM\nmXKuofegsOvSmM6H0pvG3LOlpKSeGTOGEoudRDbEVNiBrAM1z7jFmrW2b3+Czs6bicXeIj19F/51\n7I6R20aFI2i/SxE6CK6XUmTTUJNSBZ6na/cu/GtMx9G2z12be/ceRTQ1T2LnV9+TH1KHv4waNZyV\nK8uZMCFOVtbd+AV3C+OAQic4tmYzUHiJCvHSrnj83+noaMOa1nWcgwJBmJnuJzz66Ja+/xW/5sYq\n82dTUE3cFPxzHXSKKENo8CksfERLNTbQt/S3s/M5Bg2KOTQZBpOZiQjd1cga1XnXolYSd+8K8nIp\nGRm7KSxUWE7q79nZNcgcu7/pnqZr4Xbz/pnIPhNG4y5tqSD7GAJN0XqHYfn5z7EZF15GrSeyT1cw\nblyuec+XEUVKOP9PSztp2hRF1vFGBKKhvEDpJx34+8DztcgBR6Ezo0k1uddghfxCbNgYpY3FWPiA\nro3Uct55Ycf/mHlvkMdK/NIPs3xgoP+HUSZNGs5jj9XQ1OQyBhCVYRKJ7/M0/tOcmlNySE9v4847\npwIS56a5WTck7V5w0N2JDTOJuKab1WiqJDjOmDHFHDjgtlFj37hmiROmzWOwQGUFKH4ViFJSktsX\nkdwtb7xRx2OPzaC5uYve3kpztQKLj1EGNBIJHJqNBYK+RGqZQkZGFT09egpS7Y6C6/XElWrnnzBh\nHoWFbnqWdcAPyMxMEovdwJgx53D4cJbRyPhV82NZSXaiGXii34j47xcDrD/NV39ekPWIcDfa3NMK\nvM1SkyAJ/Gr8+xD9mZ7ItMwHDiACkrsoFT+oJo0MRCiJOs+BxI9Seg1qKHWMqkxbnkAYimIQFRPl\nPoPv2YKCxxk5Mo9du5pIJNT0Zx0Cxo6VgMo2CGchomVSjRPYk7tL+64p5CnENHY7/kwBrkkOwjf9\nKcRijxGPd2I1DHOQ9dqArpd4HP7rv+aSk9NGerpnUtgE+zqLSy+9iEOH0qiv14Cyoi1wkyovXPgl\nk+bpV4gJI0xYnOIEyHRP/kEhoYx4vIwJE+bR0tLE/v1z8bwgP9FyDDFLJhCNzFrEuabQ9NmaoUUr\nsdF5tpZ4/CD+GIddwH4ikWuIxTqJx2/D80aSKsQsQLQ02qbJWIFlHWK+UZ6hcyhFDq/X+aKyS0q2\nCwJ9C0ISXC3QJ0PGDTzvU85/pQiPuRTLt9QcnVpcL0yLX3OLS//57Nmzm3jcQ3BL7jv9/c3IeM9k\nlAgezMPbkZc3imXLJnPrrU/R1OQGSLd7UlpaE8nk+ci+8CSygStNufUmsHxEn1czfSZZWXHuvPN8\nXn1VzbXHiEQWMHDgsEAaPpe3KhRAr61F1tWzCCynAjmKugFwJe1QTs5ejh07TXt7nRkrNQUqrfwS\nu3bCrSc2vpkGDX85cL+kGItGj1BcnEdj4046OtJIJjcg+5XLA3WPbU95XnjUi1jozGTT1x5zX63T\nvuX4ebsrwD9lxmItss8pfYiWLiPjPTwvLyVbjU3HFzQ5C4/dvp0PrXwkhLLly7eRSKj3kcswPTIy\nMjnnnA5gJvv3pznu/Bf33dfbK7kff/vbOhPNvha/encKfm+UYLeDQptrtpyPbriDBn2diy4aYYQy\nSDUzWjXnhAnzOHhwB42Nk5FTWj5+ppwKGty4sda4QKs3i46F1FlYeBsjR8qiravbQWPjEKxoMp9w\nD6cySkvXAcd4773H6eg4QTw+Gs/7OtZOfjLkOcugbOiNIhYunO0jXglkK98vYDqxQI5IVxA7Uzqi\nZqyhV0uR6V1n4Hr/XpC3IcDUdeZO0cqkeuGpBkzV9EEV/fcoLLyN06f30d7uLspdyEbsgkVdwaQU\nuAp7ylRPL/cerU9PrapxuBk3wnm4wFPGpz+9pc9EL+PuV62PGlXRR0fiUawC4L9igdzK5FxzYML5\nTcbAHkg6A/doSY2UnZ39C775zUl85zt6QFAv3HEEg7tKgGTXFBjW10oAE6TYjXjuP9DYLBd6ok6t\nb9y4dQwfrvkTJW/i4cNN5lDhL3l5o3jrrTWO0OL2X0/5s/Gbfj+JHIyG4N/UogimiMDzKuxZHgPw\niU/Mo7V1hNn0XJqwfYHvmu9qtgRZz6OAegYO/DOjR49g584menvthtLV5V/r/0975x4dVXnu/+8k\nk8lMroRAmEAQSeoFk6pBtGBtwvEcEiyWFlsFLCqKBxUJHG1/tgJZCaK21dWuX9Dg8cg5Ni6PR49t\nz6lN+pPQZU3KEU5ZFYtBsJoAyiXcDIFgLmTy/v54Z8++vXvPnltmT+b5rDULMrMv735v+3mf97ks\nWFCBsrJ30NYm9QdJsEuD3iRB0gJJdllalPVzFFwgk4KlSi9+sU2R0guTh8YQa/lSUkYwYUIhXC4f\nens70dUleadK97wL0gvU5fozUlPT/EKZdvYRX9/t9mHBggpcf30rWlvFZjLXXHM/DhzYj/7+ev/3\nr4AL3d8GF4ik9v015EWclDXACWkReP48f29Jgbi1yGn45Hurx4q0gJKefzt4Kr5erF5dgV27av1B\nvc9iwoRCTJ48GZs3V+HHP/4NOjq0ZkH8Gk7nsxgelq6n9BTKkDoAACAASURBVPxXp/zavbsDzzzz\nGvr7JZs6KK6zDcPDLwbekzyA9KPo7h5RHPeO4rxB3fmyED0EdR+XzJIkT1iRjbM8HpzOsxgeVo6P\nkwAWwOHwgrF/xcWLwJ496mcDJE9gZTgmuX3S0x9GTIlZBDSLAFLwWG1AzQdVwdo8njsUx4iD8GVm\nLtEEr5OuIwWy2+APDBcsWKxxgE194NY25nSKs9jX1TX6f7MWNFCc7X4Dy8u7OxCsVaKyss7/+yIm\nB4EMHmBVHKDROAhkefkKVl7+kC5AbCBgo2dSIGCqKDCrUSBWKRirdE45wKrBg7Mqg7DOBtgtAPsu\nwOYBbKIisF95+Qp/v5DKfAcDblHUgTKg6n2K76XAjlIA3w0MWMl4UMy1LC9vSeD5xPVUp7mOMmio\nqF/p28XrvZelp9+u6ffKfqcP7ul0rmR1dY2B+hcFENaXW7r3CkE5tWNE9Az8OB54UepvtyuuJQer\ndbm+GyhfZuZ3mHos1TFxXVrrt8GQn1kUOJQxj2el8HpGAUuVY1Oua7Ngo1J7SffXBmEVBcQUP7c6\nCKc4aGpubgUD7jetO/V15M/MmasEddDGgNv87WpUvjrF96I5sk0RvNVonm5kKSn3mba1XB6pztcz\nPj7v1Zy3jk2bdqdBv9WOPX0wWaN5W2pzHlxUHEi3rq5RF4y0pORx//eiumlkcnBg8/eAvt/Jx44b\nt4ilpq7UtIf6U1lZZzJHrBMEGZc/cmBx83GhDqBu1M/V1y0uvs3fZ7XHrWDquVk7tyrbQdn3Ghnw\nHYNyyO2hrQNx++jHvMt1i+6awOOsvHwFi6XoZAtNGUcpubdCm1KHq7Ol1Zw2JglncFCpe1EaRv4U\nwO8Vvym1UPxYr/eXAS3U558P4/DhB+DzvSiXzvkAVq+uMMizdnVABa3MW8aDZf4z1MbisufI//yP\nOsm3OniifBwwGEiNIcEleelveSvX4TiF4uJ7UFQ0XZhDTRygUdraUaa14EEge3rUDhCfvTsVPxqS\nvemCacSULXIafING2o68DHIMMB/4OrcIsvbrU3iwD8qYcHI5JFd5vmKTAv92gBvdS5oq7k0KvAGH\noxuZmd0Avof+/lT4fE+Cr1jVK0Ve5z2orX0Fvb3nFfUC6Fdlkpr8HvDVsDamlHrLUdLO8C235di8\nuRWtrUrjVeVWqWQULWs5hoe/j127uO2NqB9Kba3OjapcYf435JW7lAtV2g5sREGBE2fOnMXg4EpV\nUOCSkrexbNnVeOutV9DRkY+LF++CrB3YC7c7A1ddNQFPPLEmUK5Jk1zo6noU8opXq3XQGkgDSg9q\nbb8NhjoPq6S9knMLPvZYpfB66nx70vPKuQEBZV1zLRvfOtY+g6RF2gK+DZQNsZ2ccotLvTWSl/cx\nGhoe0rSfZGuojL8GeDyP4pprevDee8/C5xsBY9/ExIn5mDnz0kDdLVsm0rIBBw+qjQXmzJmMd955\nDcPDkjazXlg+p/Mv/ueWtjKV5hRyP9m8+X/92kfRXLMKM2Y8gKIi4zyPvE22obNT6bCxAdp3Qmfn\nU8jPXwx5m0qJdnt1O7jd7TeRkTEeHs9FVFUZ55tcsKACW7dKOV+XAnBh+vSsQMJ1rk3Tam/5+b/+\n9d8UGi6JY1CH75CRtm6VSbal1H4NDdWqe5w86fWnwVJq4tVIWkd1Xlq5zrhZynF0d6u13F7vI9i0\n6W4A8G/fKs/kc+OuXUdQXb0Bx45pTY14H0lN/ZvGFIEjaZ7r67fg+eeXoL9/AAMDUt5nycRHuT0r\n2btKu0bcIQ5wweEYAmOA2tREnT/6qquyA22lbSd5W9i8HZzOXAwNKd8lPgDzkZPzjv7kaBIzcc8i\ngFZTZrQCMNIoyJ/MzIVCyTYjY4ng+DaWl7eEVVbW6bRQjDFWV9fI8vMXs9zce1h+/mKVhkKUWkgE\n12YxRXlFGpP7ApooffoP9QpHeS8zTYkZRpoBKRUOTz8j1/lE1Kk0V0apisxSE0nHzwZPSaS8XiXA\nbgXYIoBVII1loVlxf+Wqmmtk3O672MyZq3R1IaXxSU39pq6dgfXM6bw90F7iVZ7Z//l9s7MXWfzd\n+kpYrQGWr6dOP6VfBZsh1pBoxxS/T27uPbr+r6xP5W9WtEpyGSTNnFGfDj3lTDC4dmgFy8z8JnM6\nF7L09AUsO5un1jEbq0bPa4RaK6esX+kZG5k+fYs856jHmJkWQvpo09eo0+sYYXSfvLwlBs8j9ZFg\nWhS5LB7PHaysbK1BP7GmhRTNp+r0QkbvBMZKS1caaHZE/d18To0W4nFSZ1ofRlotbfnkd4rRM8nv\nAPWx6jlEGiu8P96tm1PF2nb5GkbaJn3KQuNxrRx3XJO2mDmdyrRiaxX3l7XEshZePZeJdpSst4+o\nHYyPi6XoFLsrWy0AwLjaX9nwZlsoxp2Rv4zk7RT+r3Zwh/8CsDpwJOTGX8nMVezS341MvX1gXl5t\npxZtM1p7Bv1Avhw5pkKYmSBWDjlH5HcBdh1kIawc6ryQ01AhaF+5XFLuMqsvTHnLWKpfde41r/cR\njUqb9xeHQ5nb0MpLSS8kGm1pmJW5rq6RORxLBfcLT2gx2nZxucT58EIZA2aTvPhYrSmCXGfFxYuZ\n16tum1C3LEXPrm6f2LyE9duZUntpc17qXyhSrkazMaj/vS6sZ+KCsXj7RYncrubbqlJ+xWDjUVw/\nVp5T/Tzq/mb+Ii0vX8Hc7gdNjo/+IsAI0XO5XN8W1oe0rW51wROKiUsoiyjzZwj2PlbP1+EoC4zH\nlL7OXK7bI5o7Qjf90B8XS6HMwRhjsdXFmeNwOMDVlO2QN7LS4XDkgjFZJV1Ssg7LlhXhrbfex6FD\nfRga6kdKSiqmTbsEaWl9AFwYGvKhq8uhcqX2eu9DRsYFHDs2XrENpdyu6QGQAaczE9OnZ2LTpiUB\nFbZWnXzq1Bf+mD3KrcUjyM4+jZkzrw2onKXz6+u34Cc/2YOhoUng6th/hZxKBdBnuJe2XV4AArG8\nZEpLH8CUKRNV6m3ZG2abSlXt9a5AYWF6II+aslzcaHq7KkDj0N5fAj7ZpD4V+thhZob6fZA377Rx\nwSaAb+akATiDFLyPv0cfysDTgrQB8CAl5QxuumkCPJ4ixbZwIXbuPIbBQacuL5zy2WtrX8Hf/nbc\nXy+ZyMo6iy+/9ODChQGMjCidKzgzZz6MJ55YHKgDt9uHAwe6cfiw5LVVD1Ges9LSB+By+XDo0AUw\n5kJxsbydIbeBFGhQ3ja7/voy/zZIHy5cOA2fLx3p6XnweC5i9epKvPVWh6BffegfA/8WuH9JyTo0\nNPBttTVrGvDZZ0NgLAMZGRfx6KP/gPr6VX4HgCchB/fkQYRzc7sxNDRDMTb4GCgpKcTkyVmB+uTb\nC20YHvbA5zuJgoIJmDq1WNP/oSprfv5+lJZmoL39b+Ax+0b8n1bIntJDkDylN2xYgPr6VYF79fcP\nYmjIh7y8dIyMpCIry4m+vmGkpFxAT48DLlduoK6kPJ4AAm1/6FAfGEuHz3ce589L3qT67S6gHfn5\njSgrmxHoQ9zbWS6DlI9PSmEmGmu1ta/go4+6MDjoBsCQmpqK8ePdOH3aBR56QxlI1As5kK0TLlcH\nHn/8Zlx/fZluDCpzHvJ5jvcz/lz/BLXHmkx1da0uzpJUP/ff34Tubgckjz+Xqxff/e4VOHMmDUeP\nnkJ391lcuNCPgYG3oJ6DXgFwAQ7HMCZNGkJh4RQMDfnQ3X0WhYXqPiPdSzlXSs+gHJeTJo0gN3d8\n4DmN+lNW1p9x2WWX4tChL9DT87ri9/+GMuWV1/sItm5dBIBv1UnPU1hYiLS0Phw/nqPwHK+H0ZhW\nzqlSux89egqHD38O7btBupe2X4jqnm93n8Thw5/jwoURMJYD7i16HDx2XzYcjixkZfkwfny+f/5R\nBuX1weVyo7Q0N9A/zp074n+u70AKbOtw+FBQMIjJk4sCx5i9DwsL3bp5VDsWp0zxIjX1C5w6xfDl\nly74fK9rnrAd6en18Pky4fP5kJLiQFHRZIwfz9Dbex49PSm6OVJUR1Jdcsc1ZQotKVoBwD3BpXmR\nh7soL38FBQWFiq3jeSGZOyjfgcrz586tR1tbveo5ge0Kswp+nMPhQMxEp5iJexYBwPRSuLydplyR\niSRcr/c+jdQsq9TLy1cofuMrirS0bzGX6x+Z3vhb1qQY3cvtvksjPRuvXGWNxX1M1haYqdiDbc+K\nVibrDFZZ1lbUC0qvNt2W/C7MDfWVGrH7AXYTZI3YLKg1YlOwVFO+Kn+9yGV0Oh8wMGQXP09dXaOi\njvXtmJkp0kAxlpd3t6oe5G1Es1W1cf0zZr4tLGuuRMb7D7ClSx/TaLeUxslc6+vx3MHq6hpZc3Mb\nGzduke46qancCUDWUKm3mWSjcMmpQWtsvY4tXfqYRstoNNa0vz3GgGoma7zvU3y0Bu9abaWRQXaj\n4nqSpuk7bOnSxwJtptcI1hn8X/w8stG0FSPw4P3N671dc9+HhPf1eB4w0Rbp7y2XU/tM/GO2pa3X\n3krXN3KC0fZR7fHiuU40L+flPay6jmygrpxPtW1j9n+ls9YG5vXeZ6CZkcslvUPEuyXaMa18Vn0b\njxu3TKChMdZUyvUibeVLY0c/frnBurLPG899vD98z0KdSc+ofR/KY8rjuYNVVCwXtLHZzlUj484+\nWs2WdU2usTZYef3bGPBN3TWB+1hm5ncsmRCFilXtYixFp9hd2WoBAF2lh+YpZVyJ5sevD/NckReV\n0flaVajS+0R7fp3iO33nTknR7qPL99JvKxmXa3lFRUBwkgQqo21JkRCmFN4qwO3EpOsphbDrc3IY\nY7Kdj7y1ID2bsYervq3Fz5Od/W3TdnQ6Fwq/F9vUmE8uwTx2jLb2uF2PVD7jZxZ73Bn1K+Pr6Pud\n6HpG9XVr0GPKy1cIXnC3KsqkvP9dhteRr6G1P1LWlbZN1jOA15XYg8zIw5Gfpz62zV9u6/XDy2zc\n37KybtG0TZ1pW4rntGBzlvG1ROjtC6VrPKT5WxLYtfUU/N7iudLovsGuLd6eMxrLVk1TRIKjfkwH\nezeEVv9yvSzWXFssIHIBJFh9iMoXyjtJP7cFv692HBpFQrBeP2q7XuX4bGOyB/0dgrqKrW2gVVvt\nWAplNvG+VHs4SAEwtYg9B4MHIxQfb/zoxudWweH4ZzAWzr0lr9IqyM/aDTl+mjJOlD5gndvthi4T\nhf9e3BNTCS9XMcrggRzl7sg2rhBOhbX4YdrYYRn+f6VtSVGqop1YiqN4DSUT16O+fgteffUoOju3\nQgpS6HDsBWO/BU/+qkfKMadua1E9t6OvL8PgN056+jCGh9UeRsA6XHqpOvI3v5e2zk8gM3MRZs26\nxpLHjr4NAqWAXKPiXKrDw25/sEJpC+eI8Di5XxlfZ82aKrS3b/XnIZQQpejSw1hm0GNycopQVga0\ntSm/zYScC1J5nsPwOsPD0jNox6P0rwfqLAOy9+2ePYDbfTfkILYSSg9HrddiveI46Xr5gjKL/laW\n2bi/paYWALgBoQRL1c9pZnOcPi6c1lNUSUtLO/bv14Zllrx9+xR/A7IXcr3BvUOdZy8YXEeJ5PU9\nyeQ4Xq7MzOXo1WbrgrIfmZdL5K2sH9PB3g1S3am30ozqQG7bdM21RWWugDogsLZMonKK/g7WTvqg\nvzzivdl15LkxNXUvfL7yMO8tw+tGOa6VsUWlRObLoY/CL05o/txztSFtXxph5tU+WthEKNMHwBQh\nfvEZBwFksvQkON7oJWp2bgWysn6B84EkiqHeW3r5Kxu4HXl5SzF5co4m7576OI9nsVAo451G7db/\nFfwC6dgYiKQ/AuthKwAeMm8AcqKJowAYjIK2VuBgvldhD8Dp7HwKzz+/WPE9fx7G6v1/a0PCcpxO\nLk2o21pUz61Qp5DSc/nlhTh+vBvd3bJw6/V2Y9Om5arj5Hup6/ymm2oDwUvVgRxlJPdzo9AKjA2g\np0eyjTB+Zm4Hos2rqL8X71fG11mwoAIzZryOPXuUv2iTLO+HCIdD+SINpW9fAO8h2vMGYXQdp1Mb\nkFb7bz/EicE5AwOiILG87fLzl6Cs7Eq8//4ZnD8v2aUqj5Wut1jwm+hvZZmN+xv/Xc5ByoOlnhQe\nK/Ub/ZxmNsepFw75+QfQ0LDK8IWxeXOrv56015JSM4nuZ/R3qHPdoOZv44C+PMi22XHK/mLte2Uw\nWgkplIWEfkwHezcox6jEepw7Jw6IK7dtpuba4jLLgmywuc+szYK1k+iVLwoOLQ6cm5NzD3p6jI4z\nvreWc+dOQp9ZB+B21+mKchVpzgx1cRA62n4y2tgi96USKYeliDVrqhS5IaXjjynyh3H46nFekOO1\nuebU9xedW1KyDo8+qvxen69MeW+vV3t9oyjtX0FHx4t48807UV7e7c9Hp77m6tWVwvLU1MzD1h+t\ngrvzaZTCgVI4kIHzqrySRf5/zfJKKnNIXg2u9+j311AReDz2qQB6kYu3wfArMLwNBmfJ11FYqE1h\n4n9a4SpWqoNKaPOKSrHgAG1bS1oPOUJ/WtqnUOcb1bfjpk13Y+vWe1Befhx5eQeQl/cZCgvd0GLU\n1sp+GOyYBQsq0NBQjerq2kCOuIaG+cjNzQePP/ZokGd2QZ9nT3+vNWuqkJHRA54uRCY1dWWg7jZt\nWqIpq5SHVBsPTX3922+/KpCvNFgZ1Ne/CtxwWZvDMQv6tmmHw/EdZGU54fFIxytzRE72X6cSch5R\nsZYlLe0TXRm93v9CU9MqvPtuPWbOvFZ1vHysdD2pPYzztiqfffXqSv+YFvc3eYxWgOdTfBHjxjng\ncq3UXUvqN/q61N9bPcfxa5eUDKGpyVggAyRthP7ZgE7o693o/tLfofQHwOU6J7ivvk43bbobTU0P\nB51TjeY/s3kxGMZ1L343OJ0nodcyPQWHIx0i5OsvAY+nJdX3RWjrIjV1JSoqJgnqWl8fXu8xjBt3\n2OAY83byeEQLskrw+ST4dfgugygXsvm9lbS0tOP48UHwnLFKKsDfMpLGvhI8tlywd6hY8EtUbOF9\nmZe3BNrgfEaIvCYACD0pRMfPnl0Y8GwaHPwSjA0gNTUbaWmZuvuLzpU8c5RePg5HeiBfmfbe3Dvs\nAgAX8vIG8eWXkxUeQbJHnfKZjTxDpO97j3Ti/D7ZO1OpEZPWFaIUq0qNmDKv5A3gqbWVsQKV2rAu\npMFVtgpTpmRj9uxC7Np1XOU1pvaSksnPX6zToHGvv9f8HkHc49DhYMjKGsajj/69zrtO8mD65JMR\nRXJkwOX6HoaGfgW1p44TKSlpuPbaSQKvSKUGS5/axKjOlVg5Rgv35pHytk321/QZABlISXHj0ksz\nsHnz/Xj22XcMvX6Ki51Qel8dOuRGT89V/mPccDjOYMmSq/D97y8IeKEpPceKi7PwrW+V4vnn2zQe\nTlJalgOBFzz3wmrH8LAbPt8pTJo0QRGI2Hhc9fcf0XhfDiItzYmLF3MA5IFrAb4E3zL8t0AZJC/o\nvj4fUlL6cObMJIyM3OMv225wXe0U6D0peSozAIHxpR2/sieqsk5fAV96SMGkJa/XAQBDmDZtCq68\n0qvq59oxqPX2veKKPFV/C2V+EtWl6N7BriFCfn65rQEfPJ730d/fovj+JIBeZGY6cNNNX9HdX/qb\np+zpVQRAFveHc+eOoLf3PD7/HLh48fLAfceN24fi4kLDuVJ5vmhOVXrbAum49FLZIzLUuglW99xr\n8ggAT+DdMDSUho6O/6u7RmVlPd59t970+srrMXYRFy+exfBwNhyOTGRkyHPfnXf+CG+++ZE/IDDD\nxIn5KCpK19UHAN27Zdy4fGRnTzSsP4BHBHjmmb0qj8ySknW44QYfWlsPo79/IOB9OX48E95X9jLn\nHrpADzyedJSUTDd9H+r7pZT3VUm7P3duEbhZzxbw9IQpSElJR0HBRQAlqneokUdpLBnz3pejRahx\nxqJ1rvY6ocTdkviHSy4RBnG1aqSvNdQ3M9K/aeLEEOvDeoqLcGKPiQ2JxXFytNeKJFZPNBA7fBil\nPtGXUx+wUxz/qrj4NpPYULyfhhJnLFpI/b20dKXGkUDfFkbtnJX1TU0MqlBjH8nXMvYkjCxGmh0x\nMlo2iyUVSnDs4Pc0DvgcveexPn9bfS6jY2M9l0TrHWPlPuG8g6J1vjwPGb83zALbauNzhuIRGy1i\nKbcklVAmDh3BczwGG6jxeLk31tXphLC/MxDCtMKYUgCTvCy1gpg2bMVjS5daLpvVIIaRDmDGGCsr\nWyus+9LSlYbXlibW3Nx7Rl0QUdLc3KZw/Tf2UNILX6I8iIypI8fL3zsci0yvb+wlF3sBVX7ZmAuF\nwSKQh9OPjMMiyOFGpJy2kQokdsSo3kTfR0MoiGUfC/faoTyX2bFWPfOi+3w8+LlZn4yGwDma6AO0\nqsdh+NcK7Z0uwmr9xFJusYmh/+igzy0p5XgEWluBzk51pnjjc2WiaWC4pb4eL2zcGDCZdkDvKemB\nvF0J6I30T4OH6SwE3ySTTDh90HtL9gG4eulS/Oy110Iuq74+uCHo1VfXB4zjAWOjSVGeN6PjOjuP\n674HgKKiAsOgmfKWpbHRvBWsltMIveG9sVfjpk0367x+1HkQAdlQW23bwtjVptcfGEjF//k/NwfN\n8xgL5Bx85m1h5MHqdvuE/UjUNtL9lN9JfYRvJUtny04dZWX1AKDb5jabDxIFo/En+r66eoMgV2I1\n7rmnEWVl71jq/7GcJ/XXVudjNCqbOAek+LmM8kU+95wcoFed97gImze34tlnrdVP6M+3DWfOvBHo\nt9o+KTLPMOq3oRwbS9ROUXwccjMecxtJEZG807XYpX5soSmLpfSuvLZ6pRxuzJnorgAb6+pYGfQB\nXKsMtGELYLwlWQZ1WqPZALvF/101wBrr6gzrJtR6j14KD/OVq1FsHaNYdvqy6WNdud13sfLyh8LY\n/gp/y9pKPrXgzyI9w12Ca1iLZRUNzWWoBNuuME+7I9ZEWAskbS3Abzy1iHZCr6nUBztW5uoVzRmx\nqsfmZm26PGvxqniw5bsFYyjyLX4r80Moc6y1mHXqugylvu3Ux6M1D1mJZ2n2fMbygfn5sRSdYndl\nqwUAYraPbh4t2/rgE18rPNV1W3MzK09NVW1LlkEthGmj6Su/r4RaeKsG34Y0SvL996mprK252eLz\nWK/3SOrDyH5K1PnVL3Q5mndp6UrD6+snVp6D0eFYEdLzRnMSU9pWhZIfU1TPPI+etlySjZ397KVC\n2a6wOllbDyQtb/+I7E+83ntZeflDcd/mtgP6dgo9cGcstvjkrATB8iPrk52Lk5VHRzjX19d6pkwU\nL3r/SNH1RQKa/vjg76jQ89FG3sejpUSJxnXUdRbpO936+bEUymyxfWmkLo5UZahXRVdgeJjHMRoZ\nAXp6AG0wwHPnuoXXiiSo3Lxp03D8M+7+mwJ5W1KZWzLT/72EcltS2pKE/7zLAHwCviV5BDyv5CXg\nwV37ACysq8Oq+nrTMpmp6a08U7j1IQ5oyRFtcRjFEDOKZac+R4IH7mVM7cEX7HmjuRWj3C7iHlnW\n6k1Uz7NnV+HVV7XbkG9j2bKrsWvXdhw5chrd3UsUXnKjG/xQSyjbFVZjBFkLJK3f/vF6V2DmzIcD\nXmrHj4/Dnj2/QKTb3PEm0m12QNtOreCBcJQED9wZ7eCbLS3teOaZNvT3K724axE8wLJyjpMCk0pl\nF4/rI0dOwuXy+QPavhD43miLX+6DypyhrThzZgZuv70RhYXp6Op6RXVMf/8b6OgAOjr0W2PauuP5\nIPXlVPZJsy1/LaEca0S0tviidR1lnf35z5/43+lqjJ5P/w60SbiNmIl7FgFEuS/bWF7eYp0EHapk\nHcxwWJ87T859GSlKb0kjI30jbdh88K1HyUBfuSUppUdSGuh/BZeErF2MhyceYyJvRPPVaDgrb9E5\nct5S2WMRaDN9Xjup+7XEYxsyEqJdXmuaslBSHNlPw2iVaHrtSe3ENYfa+hv9OYO3kei+wcemeo6T\nNbRiL2ClN7c1r1G5/4hNLByOpSblDW6QbmXui3TLP9Q+Hq05MRZza6jPJ95RsXZ+LEUnW2jK1PAV\nRU/P6yrjxt27O/wpe6xL1sFWBhcunAGPICzT3f2LsLV091ZWYnd7OwCu0QrFSF+b0sgFHp3pCHhk\nqwngxvtpAHqQgh14C31YIJ/QCdTW3m95tRyNVVM48NXlzdCmi3G7H0RNzZ2648NZeYvO+eSTQXR1\nWY/GDRhH6Y+1YbwVwo06baRRiYamJZzyhnpf6fijR0/B43lQFW/J6z0G4FFFDCNzw/Bjx5QjUI6W\nn5v7OWbPnhqxhieW9akkUq23EqmdeCwpbVqn6M4ZVuqIzxei+1bp2l87NtVznKxp/+pX78e5c+px\n7fE0KrRx/NiBAWDiRLkOteWdM2eyf35Ig9j5pljxl1Kr9gr4TP6CqUG6lbkvlPkxGlrMaO0exMIh\nJNTnE++odMDp/BYyM/PhdPZj2bJK4fwYS2wilCkHfiu4GngDpC3Fzs5qPP98ozCVj2jiMZu4S0rW\nYfbsIqxduw3nz18LEWYdQ9s4V+YfwTv/0QQGsSCmDOLaD77lKCEJYiPgEfSVKY2kaPpKT8kLl0zD\nO4cPYe7cevS1KQQyAEA79u9Pw5498hadmdBqJHDMnl2E6uoNMXuZ8A6tThcD+DBjxrDpFl64LxeJ\nmTNXQRyN+2HTawDxzYMWLsp+KgX5HRryoavLoRoP4S54olXGULYw9Me3w+NZjJKSQv827XIARts/\nsmdWby9/EXo8izV34Pd0OhsxMJCKzZtbDcsSzeeKlFi84Pj8IAUJ5ePU5XofmZmr0dPzfOC4cBcp\nVuuIzxf6nJ8ez7/jsceuwa5dxmNzzZoq7N37qCbQKM/0AQTLg8mR6tCovMuWTfEHZdZu9QJybs8X\nwAVLqQ96oQ2GbPQuszL3hTI/RppCSC+Q8IXO3r2fVYQrPAAAIABJREFUm3rABr8OJ1KlQCjPJ78D\n+bYzT4s2jOHh3wXyrL766noAW3Tzo/5dEkVipoOzCACmNuJeqFMhAutYRsYSS6pzM+NKadtErXa2\nrkJVXvsyTDQM4iqKGyYZ6V+rOGcWuKG+0vtSuS1ZjFIL2y7W1fmi51FuKYmDSkY3EF+0DYGtbmnH\na7s2HqjrOLhxtJnXUSw9o0PdwghmWG1eD1YCECsdgeT+X1fXGFIdjPa2dyw9HkWxzKLvNWdcZrkN\n5XeEx3MHq6trtFR+bqIiOwh5vfeZeHkbl8es73FHBPEYKi9fwcrLV7DMzG8yQHLQSdy5yHhuCe19\nEeuYb1aRnUhCnR/H/Pal0oh7MUQajaGhbwnPlCRrSTOwe/enmpQ/Fejvr8CUKXKcGTn2k34FZrby\n27y5FSmdL6EUT+sM9Y0SfCuN9AFupN/l/06ZW1LShg1eMg27zlXi7Nkm3f2lVZtIy+V2f4aBAX2Z\nzVbL2lVFNOIUBSOa2qdQNBKjsV07mltWZqi3s5TbKuLhLs5Ryg2fw9H4WK2HUDU8esNqXq4zZ4C1\na823f3btOoLeXrVTD1CF4mKGoiKlZk2rja/GM8+8ptMumtXBaMQ0VBKtbXZRu4niAIaSwsioH1it\nI7kNlWmUHrZUhs2bW9HdrTVPgVAjFawO5a1ufd979dX1+M53LsV//7d2O/0+9PZewLFj4zEw0ALg\nn/y/2MSgPAz0hvXq9HpWt82j9R6IdM7dufOYos1Cmx9jhU2EMiWi5NbtcDovwukUe8WoX871wqsq\nB7vaow+Q1PP5+QeEHmFK70kP5O1JpcekUhA7pvj/ZQAOgWfWA7h9mHJLsm/iRPy/kycDed3270/D\nwEC+8Bncbl+gE7rdp5GfvxiFhXzr5uTJLEWAUvU5VgkneGE4hKpCNxp4odjSxNo+zDaBB6FtR+X/\nxS8Dp7Nf+H1391mcOfOi6rtgk24sBWX5+OBegBJSX5s5837s2aO3KXS5fAbBZSVaVS9as3uF+1yR\nEo0XXLT7b7DrhVJH4W65hSIcB6vD48elANbivveVr9TizTfvDJz/+ecf4siRfHR3XwZ5q1Jauoem\nDLAbUnuIx4v1xUekW6nR6LPqPhLa/BgzYqaDswig9b40i40j9ooJNYCcFdXpY0uXqrwdlVuUoq1J\nZRDXav/forhh89LSdHHD9PF0guWSlNXnkio/Np418fM+lLbNxHG9wsvl2Nzc5s+ptpjl5d1tKYCs\nVezkqWk8HkLLUWqU3kqqX9HWZij1oN8KMQ/sKx8f+vaPUWy8mTNXGdSb9LF2L2VdiPPx2duTM9r9\nN9j1gs1X0dg2j+YzlZau9I+d4P2hublNsZ2pPD74uyxehFPf8Z7zjO5fXr4izIC9bQzQxjH8J+H8\nGEvRySaaMtnge9y4i3C7lcaZypWJ2CtGLe0GX4WIYz/xdBk/vv17YP2nTI32Ja2Y0mNyHPiW5HnI\nscO8kGOH3WISO0zW+Ei/qzV4eXkfo6HhIf9x1VCqz/v7gWeeeRBvvlmGhobqiFbLem3S6G7DSOjT\nJImNYtPTmfB8M43EuXOT0NOzFQCPUyfa9gqH0d6yMkPdjsrxwJ9RbRzP+8j11+tjp23e3Co0fpY0\ntqJVqsdzQVgmM+1Ebe39fg3xCxgYAPbsMd+OvOeexqDxm7Tk5BQIv8/Onhj4v0ib6vHsR79goay8\nl6gulPHQEsFBJNr9N9j1zDRT0dLaRVM7PmXKROzbVwWgUfi7sj9s3tyK/n7J8F/rAQoAtcjL+ww3\n3HAJamruD5wTjVRN4RBufcfbO13cxyJ1eOuFUh4ZGDiMt94ahNvtU+1MbdsW7adREDNxzyIATI1J\n8/K0KTL0KxOrybGNaG5uY1c6slTG9mZG+zf5jyuH2lA/3ATfssbHfOXBj4vt6kRZ96GknYgm6vY0\nXpmGqh20Y7LkWKFsx/LyFWzmzFVhJfM2ql+j5w2nz4Rad6JySZH5I03/Y835Rd3H7Nb24TDamrLR\nKku0HBPUDgdibbOkneFpncx3PZQaQTPnqlg62khEmjIvXvESo+3wlpe3WCBHiNsmlqKTLTRlZsak\nPF6O/hzlykQv7VagpORtNDSsAGC+CllUVoZP9u2DC7JWzMhovw/AOQA3gNuG9YCHsFAa6g9fcgne\nPHzY8rMDShsUcy0fP84JbRYCoEq1ojUzfrRiGMkYAwBcckk20tLULuVS2IyZM+/HoUN9YCwd06dn\nYtOmJVExAAas7fOfO3dEaFtnppGIpTYrHqtGs3qM1F5DugYg1mboE6VzvN5xGDcutHoI1i6i51Rq\nhdWR+Tna1bHV9hHVm0iLaNxfAauJsu0EDx+xAt3dhZDmFa/3WCDMiBFGfdBKfYvifu3ceQz/+7/B\no/VbJRrjQLoOwB0OtBkzZs8u0oRM2AD9XF4Lh+NTlJePxxNPLA5cz8wuFsCo2Kmajb/6+i14/vk2\nDA974HT2Y/XqStTXrwoco3yOgQFn2GFklFg13o/E4U10j2efTdXYyBnbrsaUmIl7FglWBKvaECP3\nbdEq5Nm6n7KrHQ6dZkxkKzYLsk3Z/eBaslKoNWJXwh3RCkFvWyO2NWhubmMu1y066R1Yx8rLV5jU\n1zrT+jBbtXm996m0LHV1jRFlQrASfTxYpHWv917TxNNGxFqjMZqrxmhGcQ8Hs7oMtR6CXSu0/mJd\nCxYbe8LwwwTEEx4+QmtPYz6mrcwnRvUtCl0khyNJLM2jeKfGWhgPM7tY8XXNswCESnOzNtG7/Cku\nvk0XIsbpfED1HFbnIasav1DnNW0fs5JX2ege+nPrdHUP1Pk1arETnWwvlDEW/mSq7dRZaGalCC6M\nzYJstK9NcaQUxi7DRNMJIxTVs/SMpaUrWX6+cdLa4uK7hJ1OMlg2e0GFFotH3KFDTZMUrE2sDRp1\nrLlQEppr69gOsXGiQby3zNTxfSKry3C2SY3T6ahfbKNB8Hho9hAozOajcPpTdLcoEzfllbj/tbG8\nvCVB31lmdahPExVdYd9sS9brvZelpn5TWLb8/MWWyq+/T/CyRzqvWZnjzRwE1OdKxzUy4AHN8Qi7\n3oNhi+3LYETDJfpy5CId5zABQLr/O63hvhTKIsP/OQOLKY4gVo+GonqWvlu7dhvOnHkRZ86Ik9ZO\nnVqMri79s0oGy+Fs0Um/WTnX6Jhg9wh2vvJc8baZHJto7tz6sO6fyBH6tcTTsaClpR2vvnoU/f13\nQjKK9Xj2B1KShEo426TiEDdqRivukz4emv6YeDh8KAk2H4XTnyLpg/pzxSmvMjIO4hvfmB7zcRpJ\nvCtx/6vADTdsx9tv15uea7bNK20FcqyHgbGKfuuUj+WsrN0AroDPNyI8b3jYHfi/lT4QSuiiSOc1\nK3O80T1ycoqwadPNCrOIbhw8eBfOnh0C8IbwnFiQEEKZCCuDKD19GFlowTTcigJwYUyZf1KaBqQA\nr+PAvSnPg+eeVMYTm1BRgZfb2lBdvQF9rdoUR/oXQDj56KycE+wFZJYGIyVFsNlueq76d7NjtMcZ\nYfUFaiaIR/ISjpaNSbwZLUFENM7U/ZTXZX8/sGtX+LYWRu1i5Tnj7QUGaHNG6n+Pd2DQYHNLOP3J\n6jmiPqQ/97jmb+5p7/EsEdocR5NIvT0j6X/BhAj5utFfhKmFEzmAe1raEnR3fwfAs8LznE75PWKl\nD4QiaEVjXgs2x5vdQ3vuzJmrsGeP2HM7VthCKJs7tz4wWAEEFbasDqJ5c7JxvPVWTIEsjCnzT57w\n/18K8HrGf5xSGCteuhQ/e+21wDWtDsBwjJetdN5g91+zpgp//vNdOHt2GnguLweAf0ZPD8CD8D6I\n4WFxEl8rz8YNgpvQ3a12SPB6H0FNzSJh+ZVE4wVqh5ewknhE8h+NOohG2ItIsfKcdtKA2q1vSgSb\nW8Ipt5X8udwJI0flLCTljFSfOw5aJydgHbze3FAfVYjZGI00obsytMuhQ30A0pGTk2m5bEZChD56\nvv5cKwJwqIvboaF+8LBLtwB4EID8vnA6H8Dq1fL1rPSbUASt0Rg/odyDh9I5GbV7W8EWQllbWz0A\nYO/eFQBydQMYUAtbVgdRy8YfYwq4gCUJY/3gXpMA35IUbVH2pqSg5q23ULFArxGz+gIw64hGL7uc\nHMGog7rzBrv/7t0dOH/eDR7bSxvjqwLDw0B+/hKUlV2pO9fKsy1YUIGtW4Ha2ldw6NBSAC5Mn56l\n8igyI5QXqNEEY6eXcLwi+Y9GHRiNs/x8bSJvTiy0QVaf0y4aUDv1TSXBXozhlFt0zvjxPjzzzF5F\nFgRxnMFdu2pVHrQdHWdx5sz3oYwRBcxHUdH28B/aTyy2bkXEIgai1K/5MwT3Zg1lLjISTk6eTIUs\nHG8BsASAG8BJrF9/q9D70qzfhCIEjcb4CeUe584dAcCgXzDEkJhZq1mEP7HI2NPYyM/MsLetuZmV\np6ayUvAI+pJRfiV4MvBycOP9q8EN92cD7Bb/d9UAa6yri8pzhWO8rDc0DN3AVe1JE18D6EiIt3eh\nVeJtcB9LjMZZaenKMeMwkSyMhpOLOpJ9aHNQLMsXDQenSO8RDYI5vInLwL0rjZzNRNc0yuRRVrY2\nZmW3K7JTmexJy/9NGkN/aysWo1Xf6fafYHXbEBzgW5BD4OutPgAXAJSAJwP/GOrYYhcvuQS/CjG2\nWDDCMV7WGhqGs0pQJ08Vq13jbd9ihUi3FEYLO0XyjzZG46yoqAA1NfNspw0ijBktzaocyV7Cug1p\nrMoXi63bUO8RDYJpg8PJXSy6plEmjylTssMtum002aEiZwKRbe44TwqOjg42E8qsDWDtIAoY8zO1\nZ+Up8KQJs8C3KLXC2NlLLsH2KAtjSsIxXo6088rJU9sBDEKrdrVq+xVvEkXYibfnXywxe1kl6iSb\nzMS6zfiY1Y4H68m3Y1W+WGzdhnqP0UBfhvA8Nu1qFxkPzBzbYoWthDKv9xgAfQR5UdRtgA+io+0v\nwtF/SmXMD6i1Y38BMAk8F2UfgP0AOhiL6bOYEctOv3p1JZ566kEMD08A8K/gwplsp1FYeD4hXqZ2\nmOSsMJYnMLvaRxH2hI9ZrRBWAZfrOZSVxS8PqFVnkUjKZId5IFq5i2ncyxi1a2dn7O7pYCyO0gkA\nh8OByso6f8PPA8BTWcidYZ5hZ7guIwO5/f1Ih9qYH+BhLqaBe1VOhKwdOw5gc3Oz0Ih/NGlpabf8\nnKFSX78FTz31LoaH/1P3W2VlPd59tz4q94klIqPVkpJ1aGiw3+QQy7YkiERBHrPVALZDil/32GPq\n1DzxKlusx6gd5gFlGTo69uPMGX18rerq2piHGRlLiNr11lsrESvRyRZCWahF2FJfjy0bN2IqZO1Y\nH7hQ1gtgBHKYiywA2eBelWcBfK+uDqvq66NVfNvC4yXp970TaUDaYZIjCMI6NGbtQyItbBONcOQW\ny9dONKHs3spKvN/ejslQa8dO+H8vBjfmHwIPcyEJZH1padjwX/8Vdw1ZqIQbA4sGJEEQRHJDQnJs\nIKHMz5b6evx240akQN6OlLRjJQA6wc1Mlcb8n6d60DH8ZSyKHnPEgtV6NDRUWxbMaEAS8SQegXXH\nElR/RLSgvhQ9YimU2crQPxi/3bgR2eAx6vsga8ekUBe5kDVjpwD8Bc34+j/sikdRo0I0Ik3bcdDR\n5BB97Fin8QqsO1YYrfqzY98hoguNxcQhYYSyspQUXAnuUQlwgSwbfJtSG+riE3jwMb5MeC+4RAkL\nEQo0OUQfu9ZposSaswta4ejUqS/Q2blFdUy068+ufccOjCVhlcZi4pAQQtl1GRmYyhgugBvrfwk5\nRRKgFsiOZUyA9/qHcam7NuHdeBMlLEQo0OQQfexap1YWFWPpxRcJIuHI7b5beGw0F2V27TvxZqwJ\nq2NxgT9Wsb1Qdl1GBgr6+5EF4Ah4ONRCAEfBBbE8ABkAzgH49hjzrLRD7JtoQ5ND9LFrnQZbVIy1\nF18kiISjgYFLBEe2o6NjP+bOrY+KEGvXvhNvamtft6SlTJRFxVhc4I9VbC2UXe10YorPF9CCecEN\n+49DrR37W2oq9g5bj7ybKANpLAbxo8kh+ti1ToMtKpJBS2N1rhELR1Vwux/CwMAL/r/b4XS+Zpo2\nJ1Ts2nfiSUtLO/bv7xP+ptXyJsqiQj0W2wG0wu3+DCdPZqGlpd125U1mbCWUKSew0208DpkkePWB\nC2KngUA4jD4Anzsc6AhRIEuUgQTY11g/XMai9i/e2LVOgy0qxrqWJpS5RiwcVWDGjFdQUFBrGAw0\nUiHWrn0nnmze3GqgpVQLq3ZeVIgWAw0N1aitvR/796dhYOAFDAwAe/YAa9fa9/2XjNhGKFNOYMUo\nw+WQBa8TAK4Dz1+Zpfj+cwAdIyMh3SeWAylRNHDxZCxq/+KNnevUbFEx1rU0ocw1RsLRpk13B46d\nO7c+oCFTEokQG6u+k8hzIV8s3Axtzk63+0HU1NypOU5PvBcVRouBhoZqTJzoxZ496qDidhEkCY5t\nhDLlBHY59qkEsgIAH4AHg5W+PwVgVV1dyPeJ1UBKNA1cPBlr2j87kIh1Ota1NKHMNVaEo1gJsdHu\nO4k+F/J6lsop5w2eMWN4VNojUswWA3YVJAkZ2whlUmeZhkqVQJYNHhw2DTw+GfN/ppaWhmXUH6uB\nZGdVNpEYJLJ2IRzMBJGxUBehzjXBhKN4CLHhtEOiz4XqeubllbSWxschcFy8FxVmgpddBUlCxjZC\nmdRZZqCdh7aAOuzFBACZ4MKap7QU/9XREdZ9YjWQaAVCREKiaxfCRSSIjJW6iPZcM9rb1OG2Q6LP\nhVbr2a5mA2aCV02NPQVJQsY2QtmaNVU49OebkHWWp0sqBHASQDrUYS8mV1TgZZFhhUViNZBoBUKE\nQjwChSYKia5pkYiFJnA0t6nDbYexMBdarWc7mg2YLQbsKkgSMrYRyhYsqMCLg3vQB+B+AC9DLZCd\nR/gCmWgCfPvtTRGVV3vNOXMmR7QCGQvbNXYgEeoxXoFCEwUjTcuRIydRXb3B1m2rJZE1geFqvOy6\nrZcsBBO87ChIEjKmQll9fT2eeOIJ1XderxfHjh0zPOfDDz/E6tWrsXv3bowfPx4PPPAAamtrLRUm\nfaAfRwDsAXAveDQVN7hR/zEA28IUyKI9ARpdc9myKdi1K/QVSKJM0nYnUerReqDQxNIuRAuxpqUd\nXV0O7Nsne47ZsW2tkCiawHA1XqSNCU6sF4+JInglyiJaW8aYwkyoq6tjM2bMYCdOnAh8Tp8+bXh8\nb28vmzRpElu8eDHbt28f+9WvfsWys7PZz3/+c8NzlEWYD7DbADYbYLcA7Hb/v7MBdltxsVlRDamq\nWs8ApvtUV28I63qxuKb4em0sP/8OVllZx6qq1rPm5rawy5ssxKKtY0FlZZ2wvd3uB1XflZQ8npTt\n3tzcxkpK1qnqwuO5IyHa1gri9uff2wlROyRrn4wm4npdl3T1mgj1YFTGIKJTRATdvkxNTUVBQYEl\nAe/f//3fMTAwgKamJqSnp+Oqq67CgQMH8Itf/AKPPvqo6bmLyspwDtzbshCAC1xLlgKeWmnt5s2W\nyqAlFkanx44Fj/YcCvoytgPYFtXI3VZJhJWLEYliYGwlUGgyaxdEmpajRwsh8u2xW9taIVFsrkjj\nFTmi+TRRNKWxJhHqwaiMwNMxu2dQoayrqwtTpkxBeno6vva1r+Hpp5/G9OnThcfu3LkT3/jGN5Ce\nnh74rqqqCrW1tTh8+DCmTZsmPG9LfT0G9u2DC8AwuBDmAzACnnx8AEDFggWhPhuA6E+ALS3t6Ow8\nHtVr6svYCmXQQmB0OmuibP8ZkSgvOyuBQpMd7fZLdfUGoVBmt7a1QiLZXCXKNpgdMZpPPZ4LwuMT\ncYERCYmwiDYqYyxJMftx9uzZaGpqwrZt2/DSSy+hu7sbN954I7744gvh8d3d3Zg0aZLqO+nv7u5u\nw/u8tXEjsvz/dwKYCaAcwBUAPADS3W5rTyNgzZoqlJSsV33HJ8B5YV1v8+ZW9Pc/DB7tWcbjeSDs\na+rLGJ/Oarxy2R7T+0aLaLd1rFiwoAINDdWorq5FZWU9qqtr0dBAGggzEqVtrUDtnxwYzafHj0d3\nUZ+oJMIi2qiMscRUDJw/X165lZWVYc6cOZg+fTqamprwyCOP6I53OBxhFUIKFns7gN8B+AR863IA\nPHDs9370o7CuC0RfBc8lZ3205+Li8LVJ2jLyHHf642LdWRNh5WJGIm23kAYiNMJtW7tux1P7j32M\n5lOvdxzGjUsMTWm4WBl3iaAxNipjZ2fs7hmSbi4jIwOlpaX49NNPhb97vV6dRuzEiROB34z4AHyb\n8gS4uCNd4bz/u3Ai9yuJ5gQoS84VkIUzoKjImoepEcoycrX36HfWRFi5BINedmOXUNs20bfjicTG\naD4tKipATc28hFg8hoPVcZcIi2ipLBs33oWTJz+H0zmCG24oialQFpILQX9/P/N6vWzTpk3C3194\n4QWWk5PDBgYGAt899dRTrKioyPCa8HtXzgZYBcBuBdhi/78VAFteURFKEWPOaHkkNTe3serqDayy\nso5VV28YFY8U8rayB83Nbayqan3Cet7apfyJ4o1LjE2SdT5NhnEXougUEqaash/+8IdYuHAhpk6d\nipMnT2LTpk3o7+/HPffcAwB4/PHHsXv3bvzhD38AANx5553YuHEjli9fjg0bNuDjjz/Gz372M9QH\n0XS5wG3HvgAPFOsDN/g/63BEFL0/FoyWdB8PjU8irFzGOnbV7ljdBrRT+RN9O55IbJJ1PqVxFxmm\nQtnRo0exdOlSnD59GhMnTsScOXOwa9cuTJ06FQA33u/q6gocn5OTg+3bt+Phhx/GrFmzMH78ePzw\nhz8U2p8pmQieUmkCZPuyLwA897vfRfRwsWIsb5GN5WdLBOzoJh6KoGWn8o+F7XgisUnG+ZTGXWSY\nCmX/8R//YXryyy+/rPuurKwMbSFqt875C8JN5nkoDCfCD4NBEImKHVeZoQhadip/IhgSE8RYg8Zd\nZNgi9+U48PAXklB2AMBQBGEwCCJRseMqMxRBy07lT9btI4KIJzTuIsMWQtl5RDcMBkEkKnZcZYYi\naNmt/Mm4fUQQ8YbGXfg4/J4E8SuAw4HbAAyBG/kPg4fE+J/4Fosg4kZLSzuee267YpU5L+5G/lqb\nspKSdYYBT+1WfiJy7BrvbTShOrAnZu0SqzZzOByIlehkC03ZrxX/fwCAON4xQSQHdltlhrodYbfy\nE5ERb49aOwhD8a4DQoxZuwBIyDazhaZsMeStyyEAgw4HWkZG4lksgiAIAjzvaGvrk4Lva/H225ti\nem+xlnY9GhqqR/XFGs86IIwxaxfGWMzaLJaaMtPcl6PFZQAu9f/7TwBSUimeCUEQhB2Ip0etXfLx\n2smrmJAxa5dEbTNbbF8qZdb7AVx1++3xKgpBEAmCHba1Rpt4PHM8PWrt8mK1k1dxuIzF8WLWLkaa\nLLu3mS2Esm8ByASPV5ZeWoqtr70W5xIRBGFnktHGJ17PHE+PWrsIQ3bzKg6VsTpegrVLIraZLWzK\nlAVYkp+P10+fjlt5CIKwP8lo4xNv2654eNSG6vkb67IkqlfxWB4vynY5d+4IABdycgqQnj6MOXMm\nY9eu41FvszHvfanE2d8f7yIQBGFz7LKtNZrE85nj5VFrp0CkiexVPJbHi9QuRtrA0XYKiRTbCWVf\nkFBGEEQQ7LKtNZok4zMDiS0M2YVk6Dt2yrsbCbbwvpR4AMAFChpLEEQQ1qypQknJetV33F5kXpxK\nFHuS8ZmJ6JAMfWesaANtoSlbDh6jrALAsfgWhSCIBMBO21qjRTI+MxEdkqHvjBVtoK0M/dcB2JWS\ngnd8iVWJBEEQBEHEj9F0Chnzhv71AHwAPgYw7aab4lsYgiAIgiASirGiDbSFUHYAwAUAVwFweTxx\nLg1BEARBEInGWHAKsYVQ9rri//UDA3ErB0EQBEEQRLywlfclAPjc7ngXgSAIgiAIYtSxlVD2jy4X\n5tXUxLsYBEEQBEEQo44tvC/rAOwHMFxcjF93dsazOARBEARBEIbE0vvSFpoyH4CHAXx16tR4F4Ug\nCIIgCCIu2EIo2wQeOJbsyQiCIAiCSFZsIZQBwP0AhsaPj3cxCIIgCIIg4oIthLJaAHcDONzaGu+i\nEARBEARBxAVbCGXS9qV7WJy7iiAIgiAIYqxjC6FM4vzISLyLQBAEQRAEERdsI5Q9AAATJ8a7GARB\nEARBEHHBFmmWloBvX56kkBgEQRAEQSQpttCUvQ5gFSgkBkEQBEEQyYsthDIAeMTrpRRLBEEQBEEk\nLbbYvqwFcC7ehSAs09LSjs2bWzE46ER6+jDWrKnCggUV8S4WQRAEQSQ0thDKNgFAdzdqn3sOFQsW\nxLs4hAktLe1Yu3YbOjufCnzX2bkeAEgwIwiCIIgIsM32JQCkDgzEuwhEEDZvblUJZADQ2fkUnntu\ne5xKRBAEQRBjA1toyiTI0N/+DA6Ku8zAQOool4QgCMJekGkHESm2EcrWlZRgPhn62570dHHWBbfb\nN8olIQiCsA9k2kFEA1tsX9ZWV2N+QwPZkyUAa9ZUoaRkveq7kpJ1qKmZF6cSEclAS0s7qqs3YO7c\nelRXb0BLS3u8i0QQKsi0g4gGttCUbXr77XgXgbCItOJ77rlaDAykwu32oaZmPq0EiZhBGggiESDT\nDiIa2EIoIxKLBQsq6GVIjBrGGoha6oeEbSDTDiIa2GL7kiAIwgjSQBCJAJl2ENGANGUEQdga0kAQ\niQCZdhDRwMEYY3EtgMOBOBeBIAgbI7IpKylZh4YGeuERBDH6xFJuIaGMIAjb09LSjuee267QQMwj\ngYwgiLhAQhlBEARBEIQNiKXcQob+BEEQBEEQNsAWQtmG6mq0t7TEuxgEQRAEQRBxwxbel0+2tmJ9\nZycAUFR/giAIgiCSEltoygDgqc5ObH/uuXhVAIf4AAALnklEQVQXgyAIgiAIIi7YRigDgNSBgXgX\ngSAIgiAIIi7YSijzud3xLgJBEARBEERcsI1Qtq6kBPNqauJdDIIgCIIgiLhgC0P/2upqzK+pISN/\ngiAIgiCSFgoeSxAEQRAEYREKHksQBEEQBDHGIaGMIAiCIAjCBpBQRhAEQRAEYQNIKCMIgiAIgrAB\nIQllP/nJT5CSkoIak9AVhw4dQkpKiu7T2toacWEJgiAIgiDGKpZDYuzatQsvvfQSrr76ajgcjqDH\nb9u2Dddcc03g77y8vPBKSBAEQRAEkQRY0pT19vZi2bJlePnlly0LV+PHj0dBQUHgk5aWFlFBk4l3\n33033kWwJVQvYqhexFC96KE6EUP1IobqZfSxJJStXLkSt99+OyorKy3H5rjtttswadIk3HTTTfj1\nr38dUSGTDRoIYqhexFC9iKF60UN1IobqRQzVy+gTdPvypZdeQldXF1577TUACLp1mZ2djZ///Of4\n+te/DqfTid/+9rdYvHgxmpqa8P3vfz86pSYIgiAIghhjmAplH3/8MdavX48dO3YgNTUVAMAYM9WW\n5efn45FHHgn8PXPmTJw5cwbPPPMMCWUEQRAEQRBGMBNefvll5nA4mNPpDHwcDgdLSUlhaWlpbGho\nyOz0AL/85S+Zx+MR/lZSUsIA0Ic+9KEPfehDH/rY/lNSUmJJ9gkHU03ZokWLcMMNNwT+Zozh3nvv\nxeWXX45169ZZNt7/4IMPMHnyZOFvn376qaVrEARBEARBjGVMhbLc3Fzk5uaqvsvIyEBeXh6uuuoq\nAMDjjz+O3bt34w9/+AMAoKmpCS6XC9deey1SUlLwu9/9Dlu2bMEzzzwTo0cgCIIgCIJIfCzHKZNw\nOBwqY//u7m50dXWpfn/yySdx+PBhpKam4oorrsDLL7+MO++8MzolJgiCIAiCGIM4GLMY44IgCIIg\nCIKIGXHLfbllyxZMnz4dHo8Hs2bNwo4dO+JVlJhTX1+vSzultbGrr6/HlClTkJGRgb/7u7/DRx99\npPp9cHAQNTU1mDhxIrKysvDtb38bR48eHc3HiJj29nYsXLgQRUVFSElJQVNTk+6YaNRDT08P7rrr\nLowbNw7jxo3D3Xffjd7e3pg+W7gEq5Ply5fr+s6NN96oOmas1QnAU7pdf/31yM3NRUFBARYuXIh9\n+/bpjku2/mKlXpKtzzQ2NuKaa64JmNvceOON+P3vf686Jtn6CRC8XpKtnxhhlD4ybn0mZi4EJrz+\n+ussLS2Nbd26lR04cIDV1NSwrKws9tlnn8WjODGnrq6OzZgxg504cSLwOX36dOD3n/70pyw7O5v9\n5je/YR0dHeyOO+5gkydPZufPnw8c8+CDD7LJkyezP/zhD+z9999nc+fOZddeey3z+XzxeKSw+P3v\nf8/Wr1/PfvWrX7GMjAzW1NSk+j1a9TB//nxWVlbGdu3axXbu3MlKS0vZt771rVF7zlAIVifLly9n\nVVVVqr7T09OjOmas1QljjFVXV7Nf/vKXbN++fezDDz9kixYtYl6vl33xxReBY5Kxv1ipl2TrM7/9\n7W/Z22+/zTo7O9knn3zC1q9fz9LS0tgHH3zAGEvOfsJY8HpJtn4iYufOnWz69OnsmmuuYTU1NYHv\n49ln4iKU3XDDDWzlypWq7y677DL2+OOPx6M4Maeuro6VlZUJfxsZGWFer5c9/fTTge/6+/tZdnY2\ne/HFFxljjJ09e5a5XC722muvBY75/PPPWUpKCtu2bVtsCx8jsrKyVAJItOrho48+Yg6Hg7333nuB\nY3bs2MEcDgf7+OOPY/1YEaGtE8YYu+eee9itt95qeM5YrxOJvr4+lpqaypqbmxlj1F8ktPXCGPUZ\nxhgbP348+5d/+RfqJxqkemGM+snZs2dZSUkJe/fdd9ncuXMDQlm8+8yob18ODQ3h/fffR1VVler7\nqqoqvPfee6NdnFGjq6sLU6ZMQXFxMZYuXYqDBw8CAA4ePIgTJ06o6sPtdqOioiJQH3/5y19w8eJF\n1TFFRUWYMWPGmKmzSOth586dAICdO3ciKysLc+bMCRxz4403IjMzM3BMIuFwOLBjxw5MmjQJV1xx\nBVauXIlTp04Ffk+WOjl37hxGRkYCuXepv3C09QIkd5/x+Xx4/fXXMTAwgIqKCuonfrT1AiR3PwGM\n00fGu8+E7H0ZKadPn4bP58OkSZNU3xcUFKC7u3u0izMqzJ49G01NTbjyyitx4sQJPPnkk7jxxhux\nb9++wDOL6uPYsWMAuIdramoq8vPzVcdMmjQJJ06cGJ2HiDGR1oN0fnd3NyZOnKj63eFwJGz/mj9/\nPr773e9i+vTpOHjwIDZs2ICbb74Zf/nLX+ByuZKmTtauXYvy8vLABEf9haOtFyA5+8yHH36IOXPm\nYHBwEB6PB//5n/+JK664IvASTdZ+YlQvQHL2Ewmz9JHxnltGXShLRubPnx/4f1lZGebMmYPp06ej\nqakJX/va1wzPC5ZnNFkIVg9sDDsQL168OPD/0tJSXHfddZg2bRpaWlqwaNEiw/PGUp08+uijeO+9\n97Bjxw5LYyJZ+otRvSRjn7nyyiuxd+9e9Pb24s0338SSJUvwxz/+0fScZOgnRvUya9aspOwnQHjp\nIyVGo8+M+vblhAkTkJqaqtPwnDhxAoWFhaNdnLiQkZGB0tJSfPrpp4FnFtWH1+sFAHi9Xvh8Ppw5\nc0Z1THd3d+CYREd6jnDqQXuMUgUP8IFy8uTJMVFXhYWFKCoqCmTCGOt18sgjj+CNN97AO++8g0sv\nvTTwfbL3F6N6EZEMfSYtLQ3FxcUoLy/H008/jdmzZ6OxsTGi+TWR60PCqF5EJEM/Afi24unTp1Fa\nWoq0tDSkpaWhvb0dW7ZsgcvlwoQJEwDEr8+MulDmcrlw3XXXobW1VfX99u3bde64Y5WBgQHs378f\nhYWFmD59Orxer6o+BgYGsGPHjkB9XHfddUhLS1Mdc+TIERw4cGDM1Fm06mHOnDno6+tT7dnv3LkT\nFy5cGBN1derUKRw9ejTwshnLdbJ27dqA4HH55Zerfkvm/mJWLyKSqc9I+Hw+jIyMJHU/ESHVi4hk\n6SeLFi1CR0cH/vrXv+Kvf/0rPvjgA8yaNQtLly7FBx98gMsuuyy+fSYS74VweeONN5jL5WJbt25l\nH330EVuzZg3Lzs4esyExfvCDH7C2tjbW1dXFdu3axRYsWMByc3MDz/uzn/2M5ebmst/85jfsww8/\nZIsXL2ZTpkxhfX19gWs89NBDrKioSOV+W15ezkZGRuL1WCHT19fH9uzZw/bs2cMyMjLYE088wfbs\n2RP1erjlllvYV7/6VbZz50723nvvsbKyMrZw4cJRf14rmNVJX18f+8EPfsB27tzJDh48yP74xz+y\n2bNns6lTp47pOmGMsVWrVrGcnBz2zjvvsOPHjwc+yudOxv4SrF6Ssc/86Ec/Yn/605/YwYMH2d69\ne9mPf/xjlpKSwlpbWxljydlPGDOvl2TsJ2ZUVlay1atXB/6OZ5+Ji1DGGGNbtmxhl156KUtPT2ez\nZs1if/rTn+JVlJizZMkSNnnyZOZyudiUKVPY9773PbZ//37VMfX19aywsJC53W42d+5ctm/fPtXv\ng4ODrKamhuXn57OMjAy2cOFCduTIkdF8jIj54x//yBwOB3M4HCwlJSXw/3vvvTdwTDTqoaenhy1b\ntozl5OSwnJwcdtddd7He3t5RecZQMauT/v5+Vl1dzQoKCpjL5WLTpk1j9957r+55x1qdMMZ09SF9\nNm7cqDou2fpLsHpJxj6zfPlyNm3aNJaens4KCgrYvHnzAgKZRLL1E8bM6yUZ+4kZypAYEvHqM5Rm\niSAIgiAIwgbELc0SQRAEQRAEIUNCGUEQBEEQhA0goYwgCIIgCMIGkFBGEARBEARhA0goIwiCIAiC\nsAEklBEEQRAEQdgAEsoIgiAIgiBsAAllBEEQBEEQNoCEMoIgCIIgCBvw/wGjsEjcNGJcbAAAAABJ\nRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x12c824a90>"
       ]
      }
     ],
     "prompt_number": 109
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Ridge Regression:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn import linear_model\n",
      "\n",
      "clfridge = linear_model.Ridge(alpha = .5)\n",
      "# printing fit and score\n",
      "clfridge.fit(Xtrain, Ytrain)\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictionridge = clfridge.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictionridge)\n",
      "\n",
      "xscale = list(np.arange(len(Ytest)))\n",
      "\n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predictionridge\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      "\n",
      "tempdf['xscale'] = xscale\n",
      "print tempdf.head()\n",
      "\n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "\n",
      "plt.title(linear_model.Ridge.__name__)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "lenght of actual 4000\n",
        "length of pred 4000\n",
        "      Ytest  prediction  xscale\n",
        "0  4.607742    5.682287       0\n",
        "1  4.723333    5.752684       1\n",
        "2  4.758696    5.677686       2\n",
        "3  4.779487    5.685412       3\n",
        "4  4.780000    5.600819       4\n",
        "5.66319023865"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "D:\\Anaconda\\lib\\site-packages\\pandas\\core\\config.py:570: DeprecationWarning: height has been deprecated.\n",
        "\n",
        "  warnings.warn(d.msg, DeprecationWarning)\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x12d40c4a8>"
       ]
      }
     ],
     "prompt_number": 130
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Not working (because features are continous values):"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import random\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "samplesize = len(Xtest)\n",
      "guessrange = [1,9]\n",
      " \n",
      "predictionrandom = [round(random.uniform(float(guessrange[0]), float(guessrange[1])),2) for r in xrange(samplesize)]\n",
      " \n",
      "#print predictionrandom\n",
      "#print round(random.uniform(float(guessrange[0], 9.),2)\n",
      " \n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictionrandom)\n",
      " \n",
      "xscale = list(np.arange(len(Ytest)))\n",
      " \n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predictionrandom\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      " \n",
      "tempdf['xscale'] = xscale\n",
      "print tempdf.head()\n",
      " \n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "plt.title('random predictor')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "NameError",
       "evalue": "name 'Xtest' is not defined",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-151-6de5165d4aeb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# use clf.predict() to get values predicted by the classifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0msamplesize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mguessrange\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;31mNameError\u001b[0m: name 'Xtest' is not defined"
       ]
      }
     ],
     "prompt_number": 151
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn.linear_model import SGDClassifier\n",
      "\n",
      "clfSGD = SGDClassifier(loss=\"hinge\", penalty=\"l2\")\n",
      "# printing fit and score\n",
      "clfSGD.fit(Xtrain, Ytrain)\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictionSGD = clfSGD.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictionSGD)\n",
      "\n",
      "xscale = list(np.arange(len(Ytest)))\n",
      "\n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predictionSGD\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      "\n",
      "tempdf['xscale'] = xscale\n",
      "print tempdf.head()\n",
      "\n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "plt.title(LDA.__name__)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "Unknown label type",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-129-8810a2bd4169>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mclfSGD\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mSGDClassifier\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"hinge\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpenalty\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"l2\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;31m# printing fit and score\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m \u001b[0mclfSGD\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mYtrain\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[1;31m# use clf.predict() to get values predicted by the classifier\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\stochastic_gradient.pyc\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, coef_init, intercept_init, class_weight, sample_weight)\u001b[0m\n\u001b[0;32m    517\u001b[0m                          \u001b[0mcoef_init\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcoef_init\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mintercept_init\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mintercept_init\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    518\u001b[0m                          \u001b[0mclass_weight\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 519\u001b[1;33m                          sample_weight=sample_weight)\n\u001b[0m\u001b[0;32m    520\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    521\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\stochastic_gradient.pyc\u001b[0m in \u001b[0;36m_fit\u001b[1;34m(self, X, y, alpha, C, loss, learning_rate, coef_init, intercept_init, class_weight, sample_weight)\u001b[0m\n\u001b[0;32m    416\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    417\u001b[0m         self._partial_fit(X, y, alpha, C, loss, learning_rate, self.n_iter,\n\u001b[1;32m--> 418\u001b[1;33m                           classes, sample_weight, coef_init, intercept_init)\n\u001b[0m\u001b[0;32m    419\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    420\u001b[0m         \u001b[1;31m# fitting is over, we can now transform coef_ to fortran order\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\sklearn\\linear_model\\stochastic_gradient.pyc\u001b[0m in \u001b[0;36m_partial_fit\u001b[1;34m(self, X, y, alpha, C, loss, learning_rate, n_iter, classes, sample_weight, coef_init, intercept_init)\u001b[0m\n\u001b[0;32m    346\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    347\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate_params\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 348\u001b[1;33m         \u001b[0m_check_partial_fit_first_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mclasses\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    349\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    350\u001b[0m         \u001b[0mn_classes\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\sklearn\\utils\\multiclass.pyc\u001b[0m in \u001b[0;36m_check_partial_fit_first_call\u001b[1;34m(clf, classes)\u001b[0m\n\u001b[0;32m    338\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    339\u001b[0m             \u001b[1;31m# This is the first call to partial_fit\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 340\u001b[1;33m             \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclasses_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0munique_labels\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mclasses\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    341\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    342\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\sklearn\\utils\\multiclass.pyc\u001b[0m in \u001b[0;36munique_labels\u001b[1;34m(*ys)\u001b[0m\n\u001b[0;32m     96\u001b[0m     \u001b[0m_unique_labels\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_FN_UNIQUE_LABELS\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabel_type\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     97\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0m_unique_labels\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 98\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Unknown label type\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     99\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    100\u001b[0m     \u001b[0mys_labels\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mset\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mchain\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfrom_iterable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_unique_labels\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mys\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mValueError\u001b[0m: Unknown label type"
       ]
      }
     ],
     "prompt_number": 129
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "clfmulti = MultinomialNB()\n",
      "\n",
      "# printing fit and score\n",
      "print Xtrain\n",
      "\n",
      "clfmulti.fit(XtrainR, YtrainR)\n",
      "#print Xtrain\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictionmulti = clfmulti.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictionmulti)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "TypeError",
       "evalue": "only length-1 arrays can be converted to Python scalars",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-79-5d80f5ffd8ef>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;31m# printing fit and score\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mprint\u001b[0m \u001b[0mXtrain\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m \u001b[0mXtrainR\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mround\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mXtrain\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m \u001b[0mXtrainR\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mround\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mYtrain\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mTypeError\u001b[0m: only length-1 arrays can be converted to Python scalars"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[   21.        5.      938.875   946.     1025.375   589.667]\n",
        " [   20.        4.55   1523.143  1772.667  1903.833  1910.8  ]\n",
        " [   13.        3.85    704.5     915.667   183.5    2048.25 ]\n",
        " ..., \n",
        " [   25.        4.72   1148.1    1680.111  1711.4    2003.875]\n",
        " [   26.        6.27   2154.6    1458.429  1480.     1493.8  ]\n",
        " [   27.        5.     1332.889   444.375  1220.778   866.25 ]]\n"
       ]
      }
     ],
     "prompt_number": 79
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "clfbernoulli = BernoulliNB()\n",
      "#NearestCentroid()\n",
      "\n",
      "# printing fit and score\n",
      "clfbernoulli.fit(Xtrain, Ytrain)\n",
      "\n",
      "# use clf.predict() to get values predicted by the classifier\n",
      "predictionbernoulli = clfbernoulli.predict(Xtest)\n",
      "\n",
      "print 'lenght of actual', len(Ytest)\n",
      "print 'length of pred', len(predictionbernoulli)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "Unknown label type",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-83-120fc3b92201>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;31m# printing fit and score\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mYtrain\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;31m# use clf.predict() to get values predicted by the classifier\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\sklearn\\naive_bayes.pyc\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight, class_prior)\u001b[0m\n\u001b[0;32m    311\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    312\u001b[0m         \u001b[0mlabelbin\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mLabelBinarizer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 313\u001b[1;33m         \u001b[0mY\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlabelbin\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    314\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclasses_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlabelbin\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    315\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mY\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\sklearn\\base.pyc\u001b[0m in \u001b[0;36mfit_transform\u001b[1;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[0;32m    406\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[1;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    407\u001b[0m             \u001b[1;31m# fit method of arity 1 (unsupervised transformation)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 408\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    409\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    410\u001b[0m             \u001b[1;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\sklearn\\preprocessing\\label.pyc\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, y)\u001b[0m\n\u001b[0;32m    239\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindicator_matrix_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0my_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'multilabel-indicator'\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    240\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 241\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclasses_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0munique_labels\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    242\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    243\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\sklearn\\utils\\multiclass.pyc\u001b[0m in \u001b[0;36munique_labels\u001b[1;34m(*ys)\u001b[0m\n\u001b[0;32m     96\u001b[0m     \u001b[0m_unique_labels\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_FN_UNIQUE_LABELS\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabel_type\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     97\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0m_unique_labels\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 98\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Unknown label type\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     99\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    100\u001b[0m     \u001b[0mys_labels\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mset\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mchain\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfrom_iterable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_unique_labels\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mys\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mValueError\u001b[0m: Unknown label type"
       ]
      }
     ],
     "prompt_number": 83
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#### CALCULATE POPULARITY WITH NYT\n",
      "\n",
      "<a href=\"#sf_make_data\">NYT Popularity</a>"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\n",
      "\"\"\"\n",
      "###split nyt dataframe into test and train df by splitting down middle. ##\n",
      "##Is there a better way to ensure balance between popularity? using make_xy gets rid of feature column names before input##\n",
      "features1 = [avg_word_length, FK_GradeLevel, google_rank, lexical_density, lyrics_rank, num_sentence, nyt_rank, post_length, twitter_rank, words_per_sentence]\n",
      "half = int(round(len(full_nytimes_prep_df)/2, -0))\n",
      "full = half*2\n",
      "trainnytdf = full_nytimes_prep_df[:half]\n",
      "testnytdf = full_nytimes_prep_df[half:full]\n",
      "\n",
      "\n",
      "This is code to run the gaussian NB for one feature combo. from javier's combo.\n",
      "X, Y = make_xy(full_nytimes_prep_df, 'popular', features1)\n",
      "\n",
      "Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y)\n",
      "\n",
      "clf = GaussianNB()\n",
      "\n",
      "clf.fit(Xtrain, Ytrain)\n",
      "print clf.score(Xtest, Ytest)\n",
      "\n",
      "#sim_df = pd.DataFrame(clf.predict(Xtest), columns=['predict'])\n",
      "#sim_df['actual'] = Ytest\n",
      "#sim_df['difference'] = sim_df.apply(lambda x: \n",
      "#            np.absolute(x['actual'] - x['predict']), axis=1)\n",
      "\n",
      "predicted = clf.predict(Xtest)\n",
      "actual = Ytest\n",
      "difference = abs(actual-predicted)\n",
      "rangeval = abs(1 - 0)\n",
      "accuracy = (100. - float(np.mean(difference) / float(rangeval) * 100.))\n",
      "print accuracy\n",
      "print \n",
      "\n",
      "xscale = list(np.arange(len(Ytest)))\n",
      "\n",
      "tempdf = pd.DataFrame(Ytest, columns = ['Ytest'])\n",
      "tempdf['prediction'] = predicted\n",
      "tempdf = tempdf.sort('Ytest').reset_index(drop = True)\n",
      "#tempdf = tempdf.sort('prediction').reset_index(drop = True)\n",
      "\n",
      "tempdf['xscale'] = xscale\n",
      "\n",
      "print len(tempdf)\n",
      "print tempdf.head()\n",
      "\n",
      "plt.plot(tempdf.xscale, tempdf.prediction, 'bo')\n",
      "plt.plot(tempdf.xscale, tempdf.Ytest, 'ro')\n",
      "\"\"\""
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#full_nytimes_df = pd.read_csv('all_nyt_articles_BIGSET_NoWhite.csv')\n",
      "full_nytimes_df = pd.read_csv('all_nyt_articles_BIGSET_NoWhite.csv')\n",
      "\n",
      "##clean dataframe and convert into prep df\n",
      "full_nytimes_clean_df = full_nytimes_df[~full_nytimes_df.text.isnull()]\n",
      "full_nytimes_clean_df = full_nytimes_clean_df[full_nytimes_clean_df.text != 'none']\n",
      "features = [avg_word_length, avg_senti_score, avg_senti_score_2, dyn_senti_score, FK_GradeLevel, google_rank, lexical_density, lyrics_rank, num_sentence, nyt_rank, post_length, twitter_rank, words_per_sentence]\n",
      "features2 = [avg_word_length, dyn_senti_score, FK_GradeLevel, google_rank, lexical_density, lyrics_rank, num_sentence, nyt_rank, post_length, twitter_rank, words_per_sentence]\n",
      "\n",
      "full_nytimes_prep_df = make_prep_df(full_nytimes_clean_df, 'text', features2)\n",
      "\n",
      "featurenamelist = [func.__name__ for func in features1]\n",
      "featurenamelist.append('text')\n",
      "\n",
      "##THIS IS CODE TO MAKE DATA COMPATIBLE WITH COMBO FUNCTION##\n",
      "\n",
      "##GET Y\n",
      "y_nyt_df = full_nytimes_prep_df['popular']\n",
      "##GET X\n",
      "x_nyt_df = full_nytimes_prep_df[featurenamelist]\n",
      "\n",
      "##Train_Test_Split\n",
      "xntrain, xntest, yntrain, yntest = train_test_split(x_nyt_df, y_nyt_df)\n",
      "\n",
      "#add column names back so that combinations function can interpret\n",
      "xntrain_df = pd.DataFrame(xntrain)\n",
      "xntrain_df.columns = featurenamelist\n",
      "yntrain_df = pd.DataFrame(yntrain)\n",
      "yntrain_df.columns = ['popular']\n",
      "\n",
      "xntest_df = pd.DataFrame(xntest)\n",
      "xntest_df.columns = featurenamelist\n",
      "yntest_df = pd.DataFrame(yntest)\n",
      "yntest_df.columns = ['popular']\n",
      "\n",
      "#join X and Y's so that combinations function can interpret\n",
      "nytest_df = xntest_df.join(yntest_df, how='right')\n",
      "nytrain_df = xntrain_df.join(yntrain_df, how='right')\n",
      "\n",
      "#requires this column order to function in combo function\n",
      "list2 = nytest_df.columns[-1:]\n",
      "reorderlist = list2.append(nytest_df.columns[:-1])\n",
      "nytest_df2 = nytest_df[reorderlist]\n",
      "nytrain_df2 = nytrain_df[reorderlist]\n",
      "\n",
      "nytest_df2.to_csv('nytest_df2.csv', index=False)\n",
      "nytrain_df2.to_csv('nytrain_df2.csv', index=False)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": "*"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "nytest_df2 = pd.read_csv('nytest_df2.csv')\n",
      "nytrain_df2 = pd.read_csv('nytrain_df2.csv')\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 227
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "features = [avg_word_length, FK_GradeLevel, google_rank, lexical_density, lyrics_rank, num_sentence, nyt_rank, post_length, twitter_rank, words_per_sentence]\n",
      "\n",
      "\n",
      "### TESTING COMBINATIONS OF FEATURES\n",
      "###\n",
      "###\n",
      "\n",
      "def test_features(train_df, test_df, all_features, min_max, output):\n",
      "    start = time.time()\n",
      "    #print 'start \\n', start\n",
      "    all_features_str = [i.__name__ for i in all_features]\n",
      "    \n",
      "    ### need to reorder features in dataframes to math all_features\n",
      "    ## training data\n",
      "    train_df_copy = train_df.copy()\n",
      "    train_df_copy = train_df_copy.rename(columns={'FK_GradeLevel': 'fk_gradelevel'}) ##need to sort to make lower case\n",
      "    \n",
      "    # pandas indexing is INCLUSIVE unlike normal indexing\n",
      "    nonfeatures_train_df = train_df_copy.ix[:,'text']\n",
      "    features_train_df = train_df_copy.ix[:, :-1]\n",
      "    sorted_features_train_df = features_train_df.sort_index(axis=1)\n",
      "    sorted_full_train_df = sorted_features_train_df.join(nonfeatures_train_df)\n",
      "\n",
      "    ## repeating same process above. testing data\n",
      "    test_df_copy = test_df.copy()\n",
      "    test_df_copy = test_df_copy.rename(columns={'FK_GradeLevel': 'fk_gradelevel'})\n",
      "    \n",
      "    # pandas indexing is INCLUSIVE unlike normal indexing\n",
      "    nonfeatures_test_df = test_df_copy.ix[:, 'text']\n",
      "    features_test_df = test_df_copy.ix[:, :-1]\n",
      "    sorted_features_test_df = features_test_df.sort_index(axis=1)\n",
      "    sorted_full_test_df = sorted_features_test_df.join(nonfeatures_test_df)\n",
      "        \n",
      "    xtrain, ytrain = make_xy(train_df, output, all_features)\n",
      "    xtest, ytest = make_xy(test_df, output, all_features)\n",
      "\n",
      "    feature_nums = list(np.arange(len(all_features)))\n",
      "    \n",
      "    num_combo_list = []\n",
      "    combo_list = []\n",
      "    combo_list_str = []\n",
      "\n",
      "    for i in xrange(len(all_features)):\n",
      "        \n",
      "        # getting a list of all possible feature/function combinations\n",
      "        combo = list(combinations(all_features, i+1))\n",
      "        combo_str = list(combinations(all_features_str, i+1))\n",
      "        combo_list.extend(combo)\n",
      "        combo_list_str.extend(combo_str)\n",
      "        \n",
      "        # making corresponding combinations of numbers\n",
      "        # these will match the order of the previous combos and will correspond\n",
      "        # to the column indices of the features in the modified df\n",
      "        \n",
      "        num_combo = list(combinations(feature_nums, i+1))\n",
      "        num_combo_list.extend(num_combo) #combinations that correspond \n",
      "\n",
      "    combo_list = [list(i) for i in combo_list]\n",
      "    combo_list_str = [list(i) for i in combo_list_str]\n",
      "    num_combo_list = [list(i) for i in num_combo_list]\n",
      "    \n",
      "    combo_list_str = np.array(combo_list_str)\n",
      "    combo_df = pd.DataFrame(combo_list_str, columns=['combo_features'])\n",
      "    \n",
      "    #print combo_df.combo_features\n",
      "    \n",
      "    actuallist=[]\n",
      "    predictedlist=[]\n",
      "    differencelist=[]\n",
      "    accuracylist=[]\n",
      "    stdlist=[]\n",
      "    \n",
      "    bestpredictedvaluelist = []\n",
      "    bestrealvaluelist=[]\n",
      "    bestpredictedtextlist=[]\n",
      "    worstpredictedvaluelist = []\n",
      "    worstrealvaluelist=[]\n",
      "    worstpredictedtextlist=[]\n",
      "    \n",
      "    \n",
      "    xtraindf = pd.DataFrame(xtrain)\n",
      "    \n",
      "    #print '\\n', xtraindf\n",
      "    \n",
      "    xtestdf = pd.DataFrame(xtest)\n",
      "    ytestdf = pd.DataFrame(ytest)\n",
      "    \n",
      "    for i, val in enumerate(combo_list):\n",
      "        now = time.time()\n",
      "        #print 'now:', now\n",
      "        print 'combo number', i\n",
      "        print 'time elapsed', float(now) - float(start)\n",
      "        \n",
      "        x_indices = num_combo_list[i]\n",
      "        \n",
      "        xtrainarray = np.array(xtraindf[x_indices])\n",
      "        xtestarray = np.array(xtestdf[x_indices])\n",
      "        \n",
      "        clf = GaussianNB()\n",
      "        clf.fit(xtrainarray, ytrain)\n",
      "        \n",
      "        #sum_df = pd.DataFrame(clf.predict(xtestarray))\n",
      "        #sum_df['actual'] = ytest \n",
      "        \n",
      "        predicted = clf.predict(xtestarray)\n",
      "        actual = ytest\n",
      "        difference = abs(actual-predicted)\n",
      "        rangeval = abs(min_max[1] - min_max[0])\n",
      "        accuracy = (100. - float(np.mean(difference) / float(rangeval) * 100.))\n",
      "        std = np.std(difference)\n",
      "        \n",
      "        bestindex = np.where(difference == min(abs(difference)))\n",
      "        bestrealvalue = actual[bestindex]\n",
      "        bestpredicted = predicted[bestindex]\n",
      "        bestpredictedtext = test_df.irow(bestindex).text\n",
      "        \n",
      "        worstindex = np.where(difference == max(abs(difference)))\n",
      "        worstrealvalue = actual[np.where(difference==max(abs(difference)))]\n",
      "        worstpredicted = predicted[worstindex]\n",
      "        worstpredictedtext = test_df.irow(worstindex).text\n",
      "\n",
      "        actuallist.append(actual)\n",
      "        predictedlist.append(predicted)\n",
      "        differencelist.append(difference)\n",
      "        accuracylist.append(accuracy)\n",
      "        stdlist.append(std)\n",
      "        \n",
      "        bestpredictedvaluelist.append(bestpredicted)\n",
      "        bestrealvaluelist.append(bestrealvalue)\n",
      "        bestpredictedtextlist.append(bestpredictedtext)  \n",
      "        \n",
      "        worstpredictedvaluelist.append(worstpredicted)\n",
      "        worstrealvaluelist.append(worstrealvalue)\n",
      "        worstpredictedtextlist.append(worstpredictedtext)\n",
      "        \n",
      "    combo_df['actual'] = actuallist\n",
      "    combo_df['predicted'] = predictedlist\n",
      "    combo_df['difference'] = differencelist\n",
      "    combo_df['accuracy'] = accuracylist\n",
      "    combo_df['std'] = stdlist\n",
      "    \n",
      "    combo_df['bestpredictedvalue'] = bestpredictedvaluelist\n",
      "    combo_df['bestpredictedrealvalue'] = bestrealvaluelist\n",
      "    combo_df['bestpredictedtext'] = bestpredictedtextlist\n",
      "    \n",
      "    combo_df['worstpredictedvalue'] = worstpredictedvaluelist\n",
      "    combo_df['worstpredictedrealvalue'] = worstrealvaluelist\n",
      "    combo_df['worstpredictedtext'] = worstpredictedtextlist \n",
      "    \n",
      "    return combo_df\n",
      "    \n",
      "nyt_accuracy_df = test_features(nytest_df2.head(), nytrain_df2.head(), features, min_max=[1,0], output='popular')\n",
      "nyt_accuracy_df.to_csv('nyt_accuracy_analysis.csv', index=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "combo number 0\n",
        "time elapsed 0.0339789390564\n",
        "combo number 1\n",
        "time elapsed 0.0358939170837\n",
        "combo number 2\n",
        "time elapsed 0.0375988483429\n",
        "combo number 3\n",
        "time elapsed 0.0393269062042\n",
        "combo number 4\n",
        "time elapsed 0.0410239696503\n",
        "combo number 5\n",
        "time elapsed 0.0427238941193\n",
        "combo number 6\n",
        "time elapsed 0.0444669723511\n",
        "combo number 7\n",
        "time elapsed 0.0461649894714\n",
        "combo number 8\n",
        "time elapsed 0.0478630065918\n",
        "combo number 9\n",
        "time elapsed 0.0496199131012\n",
        "combo number 10\n",
        "time elapsed 0.0513188838959\n",
        "combo number 11\n",
        "time elapsed 0.0530819892883\n",
        "combo number 12\n",
        "time elapsed 0.054790019989\n",
        "combo number 13\n",
        "time elapsed 0.0565128326416\n",
        "combo number 14\n",
        "time elapsed 0.0582258701324\n",
        "combo number 15\n",
        "time elapsed 0.0599598884583\n",
        "combo number 16\n",
        "time elapsed 0.0616698265076\n",
        "combo number 17\n",
        "time elapsed 0.0633928775787\n",
        "combo number 18\n",
        "time elapsed 0.0651588439941\n",
        "combo number 19\n",
        "time elapsed 0.067146062851\n",
        "combo number 20\n",
        "time elapsed 0.0691709518433\n",
        "combo number 21\n",
        "time elapsed 0.0710759162903\n",
        "combo number 22\n",
        "time elapsed 0.0728540420532\n",
        "combo number 23\n",
        "time elapsed 0.0746638774872\n",
        "combo number 24\n",
        "time elapsed 0.0765528678894\n",
        "combo number 25\n",
        "time elapsed 0.0784778594971\n",
        "combo number 26\n",
        "time elapsed 0.0804319381714\n",
        "combo number 27\n",
        "time elapsed 0.0823390483856\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 28\n",
        "time elapsed 0.084235906601\n",
        "combo number 29\n",
        "time elapsed 0.0868289470673\n",
        "combo number 30\n",
        "time elapsed 0.0886318683624\n",
        "combo number 31\n",
        "time elapsed 0.0905079841614\n",
        "combo number 32\n",
        "time elapsed 0.0923988819122\n",
        "combo number 33\n",
        "time elapsed 0.0942049026489\n",
        "combo number 34\n",
        "time elapsed 0.0959708690643\n",
        "combo number 35\n",
        "time elapsed 0.097895860672\n",
        "combo number 36\n",
        "time elapsed 0.0997278690338\n",
        "combo number 37\n",
        "time elapsed 0.101553916931\n",
        "combo number 38\n",
        "time elapsed 0.103358983994\n",
        "combo number 39\n",
        "time elapsed 0.105460882187\n",
        "combo number 40\n",
        "time elapsed 0.107607841492\n",
        "combo number 41\n",
        "time elapsed 0.109544038773\n",
        "combo number 42\n",
        "time elapsed 0.111991882324\n",
        "combo number 43\n",
        "time elapsed 0.113921880722\n",
        "combo number 44\n",
        "time elapsed 0.115695953369\n",
        "combo number 45\n",
        "time elapsed 0.117418050766\n",
        "combo number 46\n",
        "time elapsed 0.119122982025\n",
        "combo number 47\n",
        "time elapsed 0.12086391449\n",
        "combo number 48\n",
        "time elapsed 0.12257194519\n",
        "combo number 49\n",
        "time elapsed 0.124285936356\n",
        "combo number 50\n",
        "time elapsed 0.126025915146\n",
        "combo number 51\n",
        "time elapsed 0.127764940262\n",
        "combo number 52\n",
        "time elapsed 0.129475831985\n",
        "combo number 53\n",
        "time elapsed 0.131191968918\n",
        "combo number 54\n",
        "time elapsed 0.132905960083\n",
        "combo number 55\n",
        "time elapsed 0.13468503952\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 56\n",
        "time elapsed 0.136435985565\n",
        "combo number 57\n",
        "time elapsed 0.139008998871\n",
        "combo number 58\n",
        "time elapsed 0.140811920166\n",
        "combo number 59\n",
        "time elapsed 0.142603874207\n",
        "combo number 60\n",
        "time elapsed 0.144429922104\n",
        "combo number 61\n",
        "time elapsed 0.146251916885\n",
        "combo number 62\n",
        "time elapsed 0.148113012314\n",
        "combo number 63\n",
        "time elapsed 0.150117874146\n",
        "combo number 64\n",
        "time elapsed 0.152724981308\n",
        "combo number 65\n",
        "time elapsed 0.154502868652\n",
        "combo number 66\n",
        "time elapsed 0.156440019608\n",
        "combo number 67\n",
        "time elapsed 0.158669948578\n",
        "combo number 68\n",
        "time elapsed 0.160820960999\n",
        "combo number 69\n",
        "time elapsed 0.162703037262\n",
        "combo number 70\n",
        "time elapsed 0.164502859116\n",
        "combo number 71\n",
        "time elapsed 0.166226863861\n",
        "combo number 72\n",
        "time elapsed 0.16802406311\n",
        "combo number 73\n",
        "time elapsed 0.169802904129\n",
        "combo number 74\n",
        "time elapsed 0.171522855759\n",
        "combo number 75\n",
        "time elapsed 0.173239946365\n",
        "combo number 76\n",
        "time elapsed 0.175042867661\n",
        "combo number 77\n",
        "time elapsed 0.176853895187\n",
        "combo number 78\n",
        "time elapsed 0.178663015366\n",
        "combo number 79\n",
        "time elapsed 0.180433988571\n",
        "combo number 80\n",
        "time elapsed 0.182205915451\n",
        "combo number 81\n",
        "time elapsed 0.183924913406\n",
        "combo number 82\n",
        "time elapsed 0.185725927353\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 83\n",
        "time elapsed 0.18746304512\n",
        "combo number 84\n",
        "time elapsed 0.190095901489\n",
        "combo number 85\n",
        "time elapsed 0.192163944244\n",
        "combo number 86\n",
        "time elapsed 0.193975925446\n",
        "combo number 87\n",
        "time elapsed 0.195739984512\n",
        "combo number 88\n",
        "time elapsed 0.197502851486\n",
        "combo number 89\n",
        "time elapsed 0.199523925781\n",
        "combo number 90\n",
        "time elapsed 0.201407909393\n",
        "combo number 91\n",
        "time elapsed 0.203311920166\n",
        "combo number 92\n",
        "time elapsed 0.205132961273\n",
        "combo number 93\n",
        "time elapsed 0.206907987595\n",
        "combo number 94\n",
        "time elapsed 0.20868396759\n",
        "combo number 95\n",
        "time elapsed 0.210547924042\n",
        "combo number 96\n",
        "time elapsed 0.212453842163\n",
        "combo number 97\n",
        "time elapsed 0.214339971542\n",
        "combo number 98\n",
        "time elapsed 0.216234922409\n",
        "combo number 99\n",
        "time elapsed 0.218077898026\n",
        "combo number 100\n",
        "time elapsed 0.219894886017\n",
        "combo number 101\n",
        "time elapsed 0.221669912338\n",
        "combo number 102\n",
        "time elapsed 0.223453044891\n",
        "combo number 103\n",
        "time elapsed 0.225297927856\n",
        "combo number 104\n",
        "time elapsed 0.227228879929\n",
        "combo number 105\n",
        "time elapsed 0.229130983353\n",
        "combo number 106\n",
        "time elapsed 0.231328010559\n",
        "combo number 107\n",
        "time elapsed 0.233376979828\n",
        "combo number 108\n",
        "time elapsed 0.235287904739\n",
        "combo number 109\n",
        "time elapsed 0.237117052078\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 110\n",
        "time elapsed 0.238904953003\n",
        "combo number 111\n",
        "time elapsed 0.241790056229\n",
        "combo number 112\n",
        "time elapsed 0.24369597435\n",
        "combo number 113\n",
        "time elapsed 0.245619058609\n",
        "combo number 114\n",
        "time elapsed 0.247524023056\n",
        "combo number 115\n",
        "time elapsed 0.249454021454\n",
        "combo number 116\n",
        "time elapsed 0.251387834549\n",
        "combo number 117\n",
        "time elapsed 0.25341796875\n",
        "combo number 118\n",
        "time elapsed 0.255286931992\n",
        "combo number 119\n",
        "time elapsed 0.257065057755\n",
        "combo number 120\n",
        "time elapsed 0.258915901184\n",
        "combo number 121\n",
        "time elapsed 0.260732889175\n",
        "combo number 122\n",
        "time elapsed 0.262506961823\n",
        "combo number 123\n",
        "time elapsed 0.264279842377\n",
        "combo number 124\n",
        "time elapsed 0.266182899475\n",
        "combo number 125\n",
        "time elapsed 0.26810002327\n",
        "combo number 126\n",
        "time elapsed 0.270024061203\n",
        "combo number 127\n",
        "time elapsed 0.271827936172\n",
        "combo number 128\n",
        "time elapsed 0.274066925049\n",
        "combo number 129\n",
        "time elapsed 0.276046991348\n",
        "combo number 130\n",
        "time elapsed 0.277960062027\n",
        "combo number 131\n",
        "time elapsed 0.279748916626\n",
        "combo number 132\n",
        "time elapsed 0.281523942947\n",
        "combo number 133\n",
        "time elapsed 0.283242940903\n",
        "combo number 134\n",
        "time elapsed 0.284957885742\n",
        "combo number 135\n",
        "time elapsed 0.286676883698\n",
        "combo number 136\n",
        "time elapsed 0.288427829742\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 137\n",
        "time elapsed 0.290482997894\n",
        "combo number 138\n",
        "time elapsed 0.293117046356\n",
        "combo number 139\n",
        "time elapsed 0.295044898987\n",
        "combo number 140\n",
        "time elapsed 0.296900033951\n",
        "combo number 141\n",
        "time elapsed 0.298754930496\n",
        "combo number 142\n",
        "time elapsed 0.300559043884\n",
        "combo number 143\n",
        "time elapsed 0.302374839783\n",
        "combo number 144\n",
        "time elapsed 0.30423784256\n",
        "combo number 145\n",
        "time elapsed 0.306222915649\n",
        "combo number 146\n",
        "time elapsed 0.3080098629\n",
        "combo number 147\n",
        "time elapsed 0.309788942337\n",
        "combo number 148\n",
        "time elapsed 0.311646938324\n",
        "combo number 149\n",
        "time elapsed 0.313515901566\n",
        "combo number 150\n",
        "time elapsed 0.315414905548\n",
        "combo number 151\n",
        "time elapsed 0.317287921906\n",
        "combo number 152\n",
        "time elapsed 0.319125890732\n",
        "combo number 153\n",
        "time elapsed 0.321048021317\n",
        "combo number 154\n",
        "time elapsed 0.322950839996\n",
        "combo number 155\n",
        "time elapsed 0.325070858002\n",
        "combo number 156\n",
        "time elapsed 0.327218055725\n",
        "combo number 157\n",
        "time elapsed 0.329182863235\n",
        "combo number 158\n",
        "time elapsed 0.331105947495\n",
        "combo number 159\n",
        "time elapsed 0.33295083046\n",
        "combo number 160\n",
        "time elapsed 0.334666013718\n",
        "combo number 161\n",
        "time elapsed 0.336468935013\n",
        "combo number 162\n",
        "time elapsed 0.338342905045\n",
        "combo number 163\n",
        "time elapsed 0.340492010117\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 164\n",
        "time elapsed 0.342377901077\n",
        "combo number 165\n",
        "time elapsed 0.345099925995\n",
        "combo number 166\n",
        "time elapsed 0.347039937973\n",
        "combo number 167\n",
        "time elapsed 0.348970890045\n",
        "combo number 168\n",
        "time elapsed 0.350859880447\n",
        "combo number 169\n",
        "time elapsed 0.352735042572\n",
        "combo number 170\n",
        "time elapsed 0.354671001434\n",
        "combo number 171\n",
        "time elapsed 0.356699943542\n",
        "combo number 172\n",
        "time elapsed 0.358644962311\n",
        "combo number 173\n",
        "time elapsed 0.360754013062\n",
        "combo number 174\n",
        "time elapsed 0.363399028778\n",
        "combo number 175\n",
        "time elapsed 0.365288972855\n",
        "combo number 176\n",
        "time elapsed 0.367082834244\n",
        "combo number 177\n",
        "time elapsed 0.368988037109\n",
        "combo number 178\n",
        "time elapsed 0.371101856232\n",
        "combo number 179\n",
        "time elapsed 0.373106956482\n",
        "combo number 180\n",
        "time elapsed 0.374907016754\n",
        "combo number 181\n",
        "time elapsed 0.376958847046\n",
        "combo number 182\n",
        "time elapsed 0.379112958908\n",
        "combo number 183\n",
        "time elapsed 0.381058931351\n",
        "combo number 184\n",
        "time elapsed 0.382933855057\n",
        "combo number 185\n",
        "time elapsed 0.384783983231\n",
        "combo number 186\n",
        "time elapsed 0.386567831039\n",
        "combo number 187\n",
        "time elapsed 0.388442993164\n",
        "combo number 188\n",
        "time elapsed 0.390610933304\n",
        "combo number 189\n",
        "time elapsed 0.392526865005\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 190\n",
        "time elapsed 0.394373893738\n",
        "combo number 191\n",
        "time elapsed 0.397080898285\n",
        "combo number 192\n",
        "time elapsed 0.399014949799\n",
        "combo number 193\n",
        "time elapsed 0.400955915451\n",
        "combo number 194\n",
        "time elapsed 0.402876853943\n",
        "combo number 195\n",
        "time elapsed 0.404825925827\n",
        "combo number 196\n",
        "time elapsed 0.40677189827\n",
        "combo number 197\n",
        "time elapsed 0.408695936203\n",
        "combo number 198\n",
        "time elapsed 0.41069483757\n",
        "combo number 199\n",
        "time elapsed 0.41267991066\n",
        "combo number 200\n",
        "time elapsed 0.414569854736\n",
        "combo number 201\n",
        "time elapsed 0.416463851929\n",
        "combo number 202\n",
        "time elapsed 0.418392896652\n",
        "combo number 203\n",
        "time elapsed 0.420240879059\n",
        "combo number 204\n",
        "time elapsed 0.422148942947\n",
        "combo number 205\n",
        "time elapsed 0.42407989502\n",
        "combo number 206\n",
        "time elapsed 0.426031827927\n",
        "combo number 207\n",
        "time elapsed 0.427971839905\n",
        "combo number 208\n",
        "time elapsed 0.429903030396\n",
        "combo number 209\n",
        "time elapsed 0.432047843933\n",
        "combo number 210\n",
        "time elapsed 0.434185028076\n",
        "combo number 211\n",
        "time elapsed 0.436120986938\n",
        "combo number 212\n",
        "time elapsed 0.438029050827\n",
        "combo number 213\n",
        "time elapsed 0.439965009689\n",
        "combo number 214\n",
        "time elapsed 0.442085981369\n",
        "combo number 215\n",
        "time elapsed 0.443979978561\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 216\n",
        "time elapsed 0.445875883102\n",
        "combo number 217\n",
        "time elapsed 0.448693037033\n",
        "combo number 218\n",
        "time elapsed 0.4506919384\n",
        "combo number 219\n",
        "time elapsed 0.452643871307\n",
        "combo number 220\n",
        "time elapsed 0.454586029053\n",
        "combo number 221\n",
        "time elapsed 0.456645965576\n",
        "combo number 222\n",
        "time elapsed 0.458475828171\n",
        "combo number 223\n",
        "time elapsed 0.460345983505\n",
        "combo number 224\n",
        "time elapsed 0.462318897247\n",
        "combo number 225\n",
        "time elapsed 0.464398860931\n",
        "combo number 226\n",
        "time elapsed 0.466328859329\n",
        "combo number 227\n",
        "time elapsed 0.46814084053\n",
        "combo number 228\n",
        "time elapsed 0.469974994659\n",
        "combo number 229\n",
        "time elapsed 0.471915960312\n",
        "combo number 230\n",
        "time elapsed 0.473846912384\n",
        "combo number 231\n",
        "time elapsed 0.475685834885\n",
        "combo number 232\n",
        "time elapsed 0.47757601738\n",
        "combo number 233\n",
        "time elapsed 0.479477882385\n",
        "combo number 234\n",
        "time elapsed 0.481399059296\n",
        "combo number 235\n",
        "time elapsed 0.483453989029\n",
        "combo number 236\n",
        "time elapsed 0.485625982285\n",
        "combo number 237\n",
        "time elapsed 0.487596988678\n",
        "combo number 238\n",
        "time elapsed 0.489536046982\n",
        "combo number 239\n",
        "time elapsed 0.49169588089\n",
        "combo number 240\n",
        "time elapsed 0.493577003479\n",
        "combo number 241\n",
        "time elapsed 0.49537396431\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 242\n",
        "time elapsed 0.497143983841\n",
        "combo number 243\n",
        "time elapsed 0.49979186058\n",
        "combo number 244\n",
        "time elapsed 0.501746892929\n",
        "combo number 245\n",
        "time elapsed 0.503629922867\n",
        "combo number 246\n",
        "time elapsed 0.50562787056\n",
        "combo number 247\n",
        "time elapsed 0.507557868958\n",
        "combo number 248\n",
        "time elapsed 0.509474039078\n",
        "combo number 249\n",
        "time elapsed 0.511389017105\n",
        "combo number 250\n",
        "time elapsed 0.51332783699\n",
        "combo number 251\n",
        "time elapsed 0.515352010727\n",
        "combo number 252\n",
        "time elapsed 0.517139911652\n",
        "combo number 253\n",
        "time elapsed 0.519032001495\n",
        "combo number 254\n",
        "time elapsed 0.521167039871\n",
        "combo number 255\n",
        "time elapsed 0.523109912872\n",
        "combo number 256\n",
        "time elapsed 0.525045871735\n",
        "combo number 257\n",
        "time elapsed 0.526962041855\n",
        "combo number 258\n",
        "time elapsed 0.528892040253\n",
        "combo number 259\n",
        "time elapsed 0.530822992325\n",
        "combo number 260\n",
        "time elapsed 0.532701969147\n",
        "combo number 261\n",
        "time elapsed 0.53476190567\n",
        "combo number 262\n",
        "time elapsed 0.536907911301\n",
        "combo number 263\n",
        "time elapsed 0.538852930069\n",
        "combo number 264\n",
        "time elapsed 0.540783882141\n",
        "combo number 265\n",
        "time elapsed 0.542893886566\n",
        "combo number 266\n",
        "time elapsed 0.544680833817\n",
        "combo number 267\n",
        "time elapsed 0.546484947205\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 268\n",
        "time elapsed 0.548364877701\n",
        "combo number 269\n",
        "time elapsed 0.55121588707\n",
        "combo number 270\n",
        "time elapsed 0.553163051605\n",
        "combo number 271\n",
        "time elapsed 0.55508184433\n",
        "combo number 272\n",
        "time elapsed 0.557049036026\n",
        "combo number 273\n",
        "time elapsed 0.558847904205\n",
        "combo number 274\n",
        "time elapsed 0.560643911362\n",
        "combo number 275\n",
        "time elapsed 0.562469959259\n",
        "combo number 276\n",
        "time elapsed 0.56437087059\n",
        "combo number 277\n",
        "time elapsed 0.566452980042\n",
        "combo number 278\n",
        "time elapsed 0.56841802597\n",
        "combo number 279\n",
        "time elapsed 0.570240974426\n",
        "combo number 280\n",
        "time elapsed 0.572234869003\n",
        "combo number 281\n",
        "time elapsed 0.574187994003\n",
        "combo number 282\n",
        "time elapsed 0.576053857803\n",
        "combo number 283\n",
        "time elapsed 0.577882051468\n",
        "combo number 284\n",
        "time elapsed 0.580009937286\n",
        "combo number 285\n",
        "time elapsed 0.581959962845\n",
        "combo number 286\n",
        "time elapsed 0.583881855011\n",
        "combo number 287\n",
        "time elapsed 0.585963964462\n",
        "combo number 288\n",
        "time elapsed 0.588171958923\n",
        "combo number 289\n",
        "time elapsed 0.59016084671\n",
        "combo number 290\n",
        "time elapsed 0.592174053192\n",
        "combo number 291\n",
        "time elapsed 0.59388589859\n",
        "combo number 292\n",
        "time elapsed 0.595734834671\n",
        "combo number 293\n",
        "time elapsed 0.59755897522\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 294\n",
        "time elapsed 0.599334955215\n",
        "combo number 295\n",
        "time elapsed 0.60197687149\n",
        "combo number 296\n",
        "time elapsed 0.60387301445\n",
        "combo number 297\n",
        "time elapsed 0.607151985168\n",
        "combo number 298\n",
        "time elapsed 0.610334873199\n",
        "combo number 299\n",
        "time elapsed 0.61368393898\n",
        "combo number 300\n",
        "time elapsed 0.615928888321\n",
        "combo number 301\n",
        "time elapsed 0.617722988129\n",
        "combo number 302\n",
        "time elapsed 0.619883060455\n",
        "combo number 303\n",
        "time elapsed 0.621925830841\n",
        "combo number 304\n",
        "time elapsed 0.62388586998\n",
        "combo number 305\n",
        "time elapsed 0.625783920288\n",
        "combo number 306\n",
        "time elapsed 0.627641916275\n",
        "combo number 307\n",
        "time elapsed 0.629477977753\n",
        "combo number 308\n",
        "time elapsed 0.631366014481\n",
        "combo number 309\n",
        "time elapsed 0.633192062378\n",
        "combo number 310\n",
        "time elapsed 0.635025024414\n",
        "combo number 311\n",
        "time elapsed 0.636940956116\n",
        "combo number 312\n",
        "time elapsed 0.638879060745\n",
        "combo number 313\n",
        "time elapsed 0.641054868698\n",
        "combo number 314\n",
        "time elapsed 0.643159866333\n",
        "combo number 315\n",
        "time elapsed 0.645122051239\n",
        "combo number 316\n",
        "time elapsed 0.647331953049\n",
        "combo number 317\n",
        "time elapsed 0.649258852005\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 318\n",
        "time elapsed 0.651161909103\n",
        "combo number 319\n",
        "time elapsed 0.653878927231\n",
        "combo number 320\n",
        "time elapsed 0.655881881714\n",
        "combo number 321\n",
        "time elapsed 0.657814979553\n",
        "combo number 322\n",
        "time elapsed 0.659737825394\n",
        "combo number 323\n",
        "time elapsed 0.661607980728\n",
        "combo number 324\n",
        "time elapsed 0.663411855698\n",
        "combo number 325\n",
        "time elapsed 0.665220022202\n",
        "combo number 326\n",
        "time elapsed 0.667052984238\n",
        "combo number 327\n",
        "time elapsed 0.668982028961\n",
        "combo number 328\n",
        "time elapsed 0.671064853668\n",
        "combo number 329\n",
        "time elapsed 0.673069000244\n",
        "combo number 330\n",
        "time elapsed 0.674994945526\n",
        "combo number 331\n",
        "time elapsed 0.676884889603\n",
        "combo number 332\n",
        "time elapsed 0.678724050522\n",
        "combo number 333\n",
        "time elapsed 0.680513858795\n",
        "combo number 334\n",
        "time elapsed 0.682298898697\n",
        "combo number 335\n",
        "time elapsed 0.684170007706\n",
        "combo number 336\n",
        "time elapsed 0.686125040054\n",
        "combo number 337\n",
        "time elapsed 0.688097953796\n",
        "combo number 338\n",
        "time elapsed 0.690031051636\n",
        "combo number 339\n",
        "time elapsed 0.692286968231\n",
        "combo number 340\n",
        "time elapsed 0.694305896759\n",
        "combo number 341\n",
        "time elapsed 0.696457862854\n",
        "combo number 342\n",
        "time elapsed 0.698267936707\n",
        "combo number 343\n",
        "time elapsed 0.700129985809\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 344\n",
        "time elapsed 0.701941013336\n",
        "combo number 345\n",
        "time elapsed 0.704819917679\n",
        "combo number 346\n",
        "time elapsed 0.706788063049\n",
        "combo number 347\n",
        "time elapsed 0.708698987961\n",
        "combo number 348\n",
        "time elapsed 0.710618019104\n",
        "combo number 349\n",
        "time elapsed 0.712455034256\n",
        "combo number 350\n",
        "time elapsed 0.714315891266\n",
        "combo number 351\n",
        "time elapsed 0.71622800827\n",
        "combo number 352\n",
        "time elapsed 0.718128919601\n",
        "combo number 353\n",
        "time elapsed 0.720098018646\n",
        "combo number 354\n",
        "time elapsed 0.722126960754\n",
        "combo number 355\n",
        "time elapsed 0.724062919617\n",
        "combo number 356\n",
        "time elapsed 0.725930929184\n",
        "combo number 357\n",
        "time elapsed 0.727757930756\n",
        "combo number 358\n",
        "time elapsed 0.729568958282\n",
        "combo number 359\n",
        "time elapsed 0.731477975845\n",
        "combo number 360\n",
        "time elapsed 0.733394861221\n",
        "combo number 361\n",
        "time elapsed 0.735332965851\n",
        "combo number 362\n",
        "time elapsed 0.737144947052\n",
        "combo number 363\n",
        "time elapsed 0.739142894745\n",
        "combo number 364\n",
        "time elapsed 0.74126791954\n",
        "combo number 365\n",
        "time elapsed 0.743382930756\n",
        "combo number 366\n",
        "time elapsed 0.745321035385\n",
        "combo number 367\n",
        "time elapsed 0.748080968857\n",
        "combo number 368\n",
        "time elapsed 0.749888896942\n",
        "combo number 369\n",
        "time elapsed 0.751648902893\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 370\n",
        "time elapsed 0.75343298912\n",
        "combo number 371\n",
        "time elapsed 0.756268024445\n",
        "combo number 372\n",
        "time elapsed 0.758087873459\n",
        "combo number 373\n",
        "time elapsed 0.759887933731\n",
        "combo number 374\n",
        "time elapsed 0.761751890182\n",
        "combo number 375\n",
        "time elapsed 0.763658046722\n",
        "combo number 376\n",
        "time elapsed 0.765557050705\n",
        "combo number 377\n",
        "time elapsed 0.767340898514\n",
        "combo number 378\n",
        "time elapsed 0.769119977951\n",
        "combo number 379\n",
        "time elapsed 0.771020889282\n",
        "combo number 380\n",
        "time elapsed 0.773185968399\n",
        "combo number 381\n",
        "time elapsed 0.775146961212\n",
        "combo number 382\n",
        "time elapsed 0.776949882507\n",
        "combo number 383\n",
        "time elapsed 0.778868913651\n",
        "combo number 384\n",
        "time elapsed 0.780797958374\n",
        "combo number 385\n",
        "time elapsed 0.78262090683\n",
        "combo number 386\n",
        "time elapsed 0.784487962723\n",
        "combo number 387\n",
        "time elapsed 0.786300897598\n",
        "combo number 388\n",
        "time elapsed 0.788177967072\n",
        "combo number 389\n",
        "time elapsed 0.790112018585\n",
        "combo number 390\n",
        "time elapsed 0.792088985443\n",
        "combo number 391\n",
        "time elapsed 0.794435024261\n",
        "combo number 392\n",
        "time elapsed 0.797140836716\n",
        "combo number 393\n",
        "time elapsed 0.798931837082\n",
        "combo number 394\n",
        "time elapsed 0.800812005997\n",
        "combo number 395\n",
        "time elapsed 0.802707910538\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 396\n",
        "time elapsed 0.804594039917\n",
        "combo number 397\n",
        "time elapsed 0.807361841202\n",
        "combo number 398\n",
        "time elapsed 0.809294939041\n",
        "combo number 399\n",
        "time elapsed 0.811120986938\n",
        "combo number 400\n",
        "time elapsed 0.812893867493\n",
        "combo number 401\n",
        "time elapsed 0.814688920975\n",
        "combo number 402\n",
        "time elapsed 0.816555976868\n",
        "combo number 403\n",
        "time elapsed 0.818471908569\n",
        "combo number 404\n",
        "time elapsed 0.820348024368\n",
        "combo number 405\n",
        "time elapsed 0.822257041931\n",
        "combo number 406\n",
        "time elapsed 0.824190855026\n",
        "combo number 407\n",
        "time elapsed 0.826254844666\n",
        "combo number 408\n",
        "time elapsed 0.828193902969\n",
        "combo number 409\n",
        "time elapsed 0.830057859421\n",
        "combo number 410\n",
        "time elapsed 0.831887960434\n",
        "combo number 411\n",
        "time elapsed 0.833691835403\n",
        "combo number 412\n",
        "time elapsed 0.835477828979\n",
        "combo number 413\n",
        "time elapsed 0.837255001068\n",
        "combo number 414\n",
        "time elapsed 0.83917593956\n",
        "combo number 415\n",
        "time elapsed 0.841136932373\n",
        "combo number 416\n",
        "time elapsed 0.843047857285\n",
        "combo number 417\n",
        "time elapsed 0.844917058945\n",
        "combo number 418\n",
        "time elapsed 0.84751200676\n",
        "combo number 419\n",
        "time elapsed 0.849535942078\n",
        "combo number 420\n",
        "time elapsed 0.851443052292\n",
        "combo number 421\n",
        "time elapsed 0.853189945221\n",
        "combo number 422\n",
        "time elapsed 0.855020046234\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 423\n",
        "time elapsed 0.8569688797\n",
        "combo number 424\n",
        "time elapsed 0.859707832336\n",
        "combo number 425\n",
        "time elapsed 0.861635923386\n",
        "combo number 426\n",
        "time elapsed 0.863810062408\n",
        "combo number 427\n",
        "time elapsed 0.865879058838\n",
        "combo number 428\n",
        "time elapsed 0.867782831192\n",
        "combo number 429\n",
        "time elapsed 0.869566917419\n",
        "combo number 430\n",
        "time elapsed 0.871378898621\n",
        "combo number 431\n",
        "time elapsed 0.873420953751\n",
        "combo number 432\n",
        "time elapsed 0.875336885452\n",
        "combo number 433\n",
        "time elapsed 0.877254962921\n",
        "combo number 434\n",
        "time elapsed 0.879224061966\n",
        "combo number 435\n",
        "time elapsed 0.881238937378\n",
        "combo number 436\n",
        "time elapsed 0.883153915405\n",
        "combo number 437\n",
        "time elapsed 0.884975910187\n",
        "combo number 438\n",
        "time elapsed 0.886766910553\n",
        "combo number 439\n",
        "time elapsed 0.88866686821\n",
        "combo number 440\n",
        "time elapsed 0.890588998795\n",
        "combo number 441\n",
        "time elapsed 0.892441987991\n",
        "combo number 442\n",
        "time elapsed 0.894247055054\n",
        "combo number 443\n",
        "time elapsed 0.896363019943\n",
        "combo number 444\n",
        "time elapsed 0.89825797081\n",
        "combo number 445\n",
        "time elapsed 0.900426864624\n",
        "combo number 446\n",
        "time elapsed 0.902495861053\n",
        "combo number 447\n",
        "time elapsed 0.904451847076\n",
        "combo number 448\n",
        "time elapsed 0.906381845474\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 449\n",
        "time elapsed 0.908309936523\n",
        "combo number 450\n",
        "time elapsed 0.911106824875\n",
        "combo number 451\n",
        "time elapsed 0.913102865219\n",
        "combo number 452\n",
        "time elapsed 0.914976835251\n",
        "combo number 453\n",
        "time elapsed 0.916756868362\n",
        "combo number 454\n",
        "time elapsed 0.918638944626\n",
        "combo number 455\n",
        "time elapsed 0.920542001724\n",
        "combo number 456\n",
        "time elapsed 0.922658920288\n",
        "combo number 457\n",
        "time elapsed 0.92458987236\n",
        "combo number 458\n",
        "time elapsed 0.92654299736\n",
        "combo number 459\n",
        "time elapsed 0.928557872772\n",
        "combo number 460\n",
        "time elapsed 0.930444002151\n",
        "combo number 461\n",
        "time elapsed 0.932245016098\n",
        "combo number 462\n",
        "time elapsed 0.934098005295\n",
        "combo number 463\n",
        "time elapsed 0.936030864716\n",
        "combo number 464\n",
        "time elapsed 0.937933921814\n",
        "combo number 465\n",
        "time elapsed 0.939848899841\n",
        "combo number 466\n",
        "time elapsed 0.9417719841\n",
        "combo number 467\n",
        "time elapsed 0.943692922592\n",
        "combo number 468\n",
        "time elapsed 0.945601940155\n",
        "combo number 469\n",
        "time elapsed 0.947927951813\n",
        "combo number 470\n",
        "time elapsed 0.950151920319\n",
        "combo number 471\n",
        "time elapsed 0.952116966248\n",
        "combo number 472\n",
        "time elapsed 0.954061985016\n",
        "combo number 473\n",
        "time elapsed 0.956039905548\n",
        "combo number 474\n",
        "time elapsed 0.957983970642\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 475\n",
        "time elapsed 0.95995092392\n",
        "combo number 476\n",
        "time elapsed 0.962677955627\n",
        "combo number 477\n",
        "time elapsed 0.96463394165\n",
        "combo number 478\n",
        "time elapsed 0.966563940048\n",
        "combo number 479\n",
        "time elapsed 0.96847987175\n",
        "combo number 480\n",
        "time elapsed 0.970345020294\n",
        "combo number 481\n",
        "time elapsed 0.9722468853\n",
        "combo number 482\n",
        "time elapsed 0.974156856537\n",
        "combo number 483\n",
        "time elapsed 0.976078033447\n",
        "combo number 484\n",
        "time elapsed 0.977980852127\n",
        "combo number 485\n",
        "time elapsed 0.979784965515\n",
        "combo number 486\n",
        "time elapsed 0.98174405098\n",
        "combo number 487\n",
        "time elapsed 0.983670949936\n",
        "combo number 488\n",
        "time elapsed 0.985576868057\n",
        "combo number 489\n",
        "time elapsed 0.9873919487\n",
        "combo number 490\n",
        "time elapsed 0.989326953888\n",
        "combo number 491\n",
        "time elapsed 0.991245985031\n",
        "combo number 492\n",
        "time elapsed 0.993147850037\n",
        "combo number 493\n",
        "time elapsed 0.995028018951\n",
        "combo number 494\n",
        "time elapsed 0.997036933899\n",
        "combo number 495\n",
        "time elapsed 0.998919963837\n",
        "combo number 496\n",
        "time elapsed 1.00091695786\n",
        "combo number 497\n",
        "time elapsed 1.00309991837\n",
        "combo number 498\n",
        "time elapsed 1.00506782532\n",
        "combo number 499\n",
        "time elapsed 1.00699090958\n",
        "combo number 500\n",
        "time elapsed 1.00889587402\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 501\n",
        "time elapsed 1.01073503494\n",
        "combo number 502\n",
        "time elapsed 1.01345992088\n",
        "combo number 503\n",
        "time elapsed 1.01541686058\n",
        "combo number 504\n",
        "time elapsed 1.01724100113\n",
        "combo number 505\n",
        "time elapsed 1.01901602745\n",
        "combo number 506\n",
        "time elapsed 1.02086305618\n",
        "combo number 507\n",
        "time elapsed 1.02267503738\n",
        "combo number 508\n",
        "time elapsed 1.02445101738\n",
        "combo number 509\n",
        "time elapsed 1.02624988556\n",
        "combo number 510\n",
        "time elapsed 1.02801990509\n",
        "combo number 511\n",
        "time elapsed 1.02986693382\n",
        "combo number 512\n",
        "time elapsed 1.03172683716\n",
        "combo number 513\n",
        "time elapsed 1.03360390663\n",
        "combo number 514\n",
        "time elapsed 1.0353808403\n",
        "combo number 515\n",
        "time elapsed 1.03715205193\n",
        "combo number 516\n",
        "time elapsed 1.03899884224\n",
        "combo number 517\n",
        "time elapsed 1.04078197479\n",
        "combo number 518\n",
        "time elapsed 1.04254794121\n",
        "combo number 519\n",
        "time elapsed 1.04434895515\n",
        "combo number 520\n",
        "time elapsed 1.04642105103\n",
        "combo number 521\n",
        "time elapsed 1.04831194878\n",
        "combo number 522\n",
        "time elapsed 1.05019402504\n",
        "combo number 523\n",
        "time elapsed 1.05230998993\n",
        "combo number 524\n",
        "time elapsed 1.05435299873\n",
        "combo number 525\n",
        "time elapsed 1.05625987053\n",
        "combo number 526\n",
        "time elapsed 1.05813884735\n",
        "combo number 527\n",
        "time elapsed 1.05989384651\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 528\n",
        "time elapsed 1.06166791916\n",
        "combo number 529\n",
        "time elapsed 1.06427693367\n",
        "combo number 530\n",
        "time elapsed 1.06607604027\n",
        "combo number 531\n",
        "time elapsed 1.06787395477\n",
        "combo number 532\n",
        "time elapsed 1.06969285011\n",
        "combo number 533\n",
        "time elapsed 1.07161903381\n",
        "combo number 534\n",
        "time elapsed 1.07353687286\n",
        "combo number 535\n",
        "time elapsed 1.07536005974\n",
        "combo number 536\n",
        "time elapsed 1.07720303535\n",
        "combo number 537\n",
        "time elapsed 1.07915401459\n",
        "combo number 538\n",
        "time elapsed 1.08117198944\n",
        "combo number 539\n",
        "time elapsed 1.08308506012\n",
        "combo number 540\n",
        "time elapsed 1.08490991592\n",
        "combo number 541\n",
        "time elapsed 1.08681201935\n",
        "combo number 542\n",
        "time elapsed 1.08876800537\n",
        "combo number 543\n",
        "time elapsed 1.09068703651\n",
        "combo number 544\n",
        "time elapsed 1.09255695343\n",
        "combo number 545\n",
        "time elapsed 1.09467291832\n",
        "combo number 546\n",
        "time elapsed 1.09659004211\n",
        "combo number 547\n",
        "time elapsed 1.09845685959\n",
        "combo number 548\n",
        "time elapsed 1.10025691986\n",
        "combo number 549\n",
        "time elapsed 1.10245394707\n",
        "combo number 550\n",
        "time elapsed 1.10448288918\n",
        "combo number 551\n",
        "time elapsed 1.10642886162\n",
        "combo number 552\n",
        "time elapsed 1.10834884644\n",
        "combo number 553\n",
        "time elapsed 1.11026406288\n",
        "combo number 554\n",
        "time elapsed 1.11216902733\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 555\n",
        "time elapsed 1.11407899857\n",
        "combo number 556\n",
        "time elapsed 1.11721682549\n",
        "combo number 557\n",
        "time elapsed 1.1191380024\n",
        "combo number 558\n",
        "time elapsed 1.1210000515\n",
        "combo number 559\n",
        "time elapsed 1.12291097641\n",
        "combo number 560\n",
        "time elapsed 1.12481188774\n",
        "combo number 561\n",
        "time elapsed 1.12670493126\n",
        "combo number 562\n",
        "time elapsed 1.12859296799\n",
        "combo number 563\n",
        "time elapsed 1.13036704063\n",
        "combo number 564\n",
        "time elapsed 1.13222694397\n",
        "combo number 565\n",
        "time elapsed 1.13410592079\n",
        "combo number 566\n",
        "time elapsed 1.13600897789\n",
        "combo number 567\n",
        "time elapsed 1.1377928257\n",
        "combo number 568\n",
        "time elapsed 1.13985204697\n",
        "combo number 569\n",
        "time elapsed 1.14182186127\n",
        "combo number 570\n",
        "time elapsed 1.14362192154\n",
        "combo number 571\n",
        "time elapsed 1.14563894272\n",
        "combo number 572\n",
        "time elapsed 1.14746189117\n",
        "combo number 573\n",
        "time elapsed 1.14936900139\n",
        "combo number 574\n",
        "time elapsed 1.15126204491\n",
        "combo number 575\n",
        "time elapsed 1.15315389633\n",
        "combo number 576\n",
        "time elapsed 1.15507602692\n",
        "combo number 577\n",
        "time elapsed 1.15699982643\n",
        "combo number 578\n",
        "time elapsed 1.15890097618\n",
        "combo number 579\n",
        "time elapsed 1.16111898422\n",
        "combo number 580\n",
        "time elapsed 1.1631538868\n",
        "combo number 581\n",
        "time elapsed 1.16499996185\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 582\n",
        "time elapsed 1.16681289673\n",
        "combo number 583\n",
        "time elapsed 1.16953992844\n",
        "combo number 584\n",
        "time elapsed 1.17155504227\n",
        "combo number 585\n",
        "time elapsed 1.17354989052\n",
        "combo number 586\n",
        "time elapsed 1.17546105385\n",
        "combo number 587\n",
        "time elapsed 1.17730903625\n",
        "combo number 588\n",
        "time elapsed 1.17922592163\n",
        "combo number 589\n",
        "time elapsed 1.18113303185\n",
        "combo number 590\n",
        "time elapsed 1.18298888206\n",
        "combo number 591\n",
        "time elapsed 1.1848089695\n",
        "combo number 592\n",
        "time elapsed 1.1866710186\n",
        "combo number 593\n",
        "time elapsed 1.18861699104\n",
        "combo number 594\n",
        "time elapsed 1.19069290161\n",
        "combo number 595\n",
        "time elapsed 1.19259595871\n",
        "combo number 596\n",
        "time elapsed 1.19468092918\n",
        "combo number 597\n",
        "time elapsed 1.19659399986\n",
        "combo number 598\n",
        "time elapsed 1.19847798347\n",
        "combo number 599\n",
        "time elapsed 1.20037889481\n",
        "combo number 600\n",
        "time elapsed 1.20239305496\n",
        "combo number 601\n",
        "time elapsed 1.20425796509\n",
        "combo number 602\n",
        "time elapsed 1.20619392395\n",
        "combo number 603\n",
        "time elapsed 1.20809793472\n",
        "combo number 604\n",
        "time elapsed 1.21019983292\n",
        "combo number 605\n",
        "time elapsed 1.21234583855\n",
        "combo number 606\n",
        "time elapsed 1.21426296234\n",
        "combo number 607\n",
        "time elapsed 1.21616792679\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 608\n",
        "time elapsed 1.21808600426\n",
        "combo number 609\n",
        "time elapsed 1.22108602524\n",
        "combo number 610\n",
        "time elapsed 1.22321295738\n",
        "combo number 611\n",
        "time elapsed 1.22519683838\n",
        "combo number 612\n",
        "time elapsed 1.22712397575\n",
        "combo number 613\n",
        "time elapsed 1.22904205322\n",
        "combo number 614\n",
        "time elapsed 1.23091888428\n",
        "combo number 615\n",
        "time elapsed 1.23273491859\n",
        "combo number 616\n",
        "time elapsed 1.23459887505\n",
        "combo number 617\n",
        "time elapsed 1.23651504517\n",
        "combo number 618\n",
        "time elapsed 1.23844885826\n",
        "combo number 619\n",
        "time elapsed 1.24035406113\n",
        "combo number 620\n",
        "time elapsed 1.24242901802\n",
        "combo number 621\n",
        "time elapsed 1.24438500404\n",
        "combo number 622\n",
        "time elapsed 1.24644184113\n",
        "combo number 623\n",
        "time elapsed 1.24832105637\n",
        "combo number 624\n",
        "time elapsed 1.25023388863\n",
        "combo number 625\n",
        "time elapsed 1.25214004517\n",
        "combo number 626\n",
        "time elapsed 1.25403189659\n",
        "combo number 627\n",
        "time elapsed 1.2559709549\n",
        "combo number 628\n",
        "time elapsed 1.25788402557\n",
        "combo number 629\n",
        "time elapsed 1.25977683067\n",
        "combo number 630\n",
        "time elapsed 1.26174902916\n",
        "combo number 631\n",
        "time elapsed 1.26399087906\n",
        "combo number 632\n",
        "time elapsed 1.26595687866\n",
        "combo number 633\n",
        "time elapsed 1.26782798767\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 634\n",
        "time elapsed 1.26974201202\n",
        "combo number 635\n",
        "time elapsed 1.27252984047\n",
        "combo number 636\n",
        "time elapsed 1.27449798584\n",
        "combo number 637\n",
        "time elapsed 1.27644705772\n",
        "combo number 638\n",
        "time elapsed 1.27836084366\n",
        "combo number 639\n",
        "time elapsed 1.28016495705\n",
        "combo number 640\n",
        "time elapsed 1.28202199936\n",
        "combo number 641\n",
        "time elapsed 1.28390192986\n",
        "combo number 642\n",
        "time elapsed 1.28581786156\n",
        "combo number 643\n",
        "time elapsed 1.28763604164\n",
        "combo number 644\n",
        "time elapsed 1.28944206238\n",
        "combo number 645\n",
        "time elapsed 1.29134988785\n",
        "combo number 646\n",
        "time elapsed 1.29325985909\n",
        "combo number 647\n",
        "time elapsed 1.29553198814\n",
        "combo number 648\n",
        "time elapsed 1.29732394218\n",
        "combo number 649\n",
        "time elapsed 1.29908800125\n",
        "combo number 650\n",
        "time elapsed 1.30090284348\n",
        "combo number 651\n",
        "time elapsed 1.30269289017\n",
        "combo number 652\n",
        "time elapsed 1.30459189415\n",
        "combo number 653\n",
        "time elapsed 1.30650496483\n",
        "combo number 654\n",
        "time elapsed 1.3084218502\n",
        "combo number 655\n",
        "time elapsed 1.31021785736\n",
        "combo number 656\n",
        "time elapsed 1.31208491325\n",
        "combo number 657\n",
        "time elapsed 1.3140938282\n",
        "combo number 658\n",
        "time elapsed 1.31624388695\n",
        "combo number 659\n",
        "time elapsed 1.31818890572\n",
        "combo number 660\n",
        "time elapsed 1.3200969696\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 661\n",
        "time elapsed 1.32201385498\n",
        "combo number 662\n",
        "time elapsed 1.32470703125\n",
        "combo number 663\n",
        "time elapsed 1.32665395737\n",
        "combo number 664\n",
        "time elapsed 1.3285779953\n",
        "combo number 665\n",
        "time elapsed 1.33046388626\n",
        "combo number 666\n",
        "time elapsed 1.33237504959\n",
        "combo number 667\n",
        "time elapsed 1.33417701721\n",
        "combo number 668\n",
        "time elapsed 1.3360118866\n",
        "combo number 669\n",
        "time elapsed 1.33789396286\n",
        "combo number 670\n",
        "time elapsed 1.33980798721\n",
        "combo number 671\n",
        "time elapsed 1.34179592133\n",
        "combo number 672\n",
        "time elapsed 1.34374594688\n",
        "combo number 673\n",
        "time elapsed 1.34649395943\n",
        "combo number 674\n",
        "time elapsed 1.34840798378\n",
        "combo number 675\n",
        "time elapsed 1.35042405128\n",
        "combo number 676\n",
        "time elapsed 1.35230588913\n",
        "combo number 677\n",
        "time elapsed 1.35416984558\n",
        "combo number 678\n",
        "time elapsed 1.35609698296\n",
        "combo number 679\n",
        "time elapsed 1.35800886154\n",
        "combo number 680\n",
        "time elapsed 1.35987687111\n",
        "combo number 681\n",
        "time elapsed 1.36174583435\n",
        "combo number 682\n",
        "time elapsed 1.36366605759\n",
        "combo number 683\n",
        "time elapsed 1.36570286751\n",
        "combo number 684\n",
        "time elapsed 1.36788892746\n",
        "combo number 685\n",
        "time elapsed 1.36988186836\n",
        "combo number 686\n",
        "time elapsed 1.37211894989\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 687\n",
        "time elapsed 1.37407684326\n",
        "combo number 688\n",
        "time elapsed 1.37676596642\n",
        "combo number 689\n",
        "time elapsed 1.37871789932\n",
        "combo number 690\n",
        "time elapsed 1.38065505028\n",
        "combo number 691\n",
        "time elapsed 1.38249182701\n",
        "combo number 692\n",
        "time elapsed 1.38436102867\n",
        "combo number 693\n",
        "time elapsed 1.38627195358\n",
        "combo number 694\n",
        "time elapsed 1.3881778717\n",
        "combo number 695\n",
        "time elapsed 1.3901078701\n",
        "combo number 696\n",
        "time elapsed 1.39201998711\n",
        "combo number 697\n",
        "time elapsed 1.39393091202\n",
        "combo number 698\n",
        "time elapsed 1.39601302147\n",
        "combo number 699\n",
        "time elapsed 1.39781999588\n",
        "combo number 700\n",
        "time elapsed 1.39969801903\n",
        "combo number 701\n",
        "time elapsed 1.40173602104\n",
        "combo number 702\n",
        "time elapsed 1.40363192558\n",
        "combo number 703\n",
        "time elapsed 1.40546488762\n",
        "combo number 704\n",
        "time elapsed 1.40731692314\n",
        "combo number 705\n",
        "time elapsed 1.40923190117\n",
        "combo number 706\n",
        "time elapsed 1.41112494469\n",
        "combo number 707\n",
        "time elapsed 1.41300392151\n",
        "combo number 708\n",
        "time elapsed 1.41489696503\n",
        "combo number 709\n",
        "time elapsed 1.41686105728\n",
        "combo number 710\n",
        "time elapsed 1.41877698898\n",
        "combo number 711\n",
        "time elapsed 1.42066001892\n",
        "combo number 712\n",
        "time elapsed 1.42298483849\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 713\n",
        "time elapsed 1.42500686646\n",
        "combo number 714\n",
        "time elapsed 1.42773795128\n",
        "combo number 715\n",
        "time elapsed 1.42970299721\n",
        "combo number 716\n",
        "time elapsed 1.43164396286\n",
        "combo number 717\n",
        "time elapsed 1.43350505829\n",
        "combo number 718\n",
        "time elapsed 1.43531298637\n",
        "combo number 719\n",
        "time elapsed 1.43711090088\n",
        "combo number 720\n",
        "time elapsed 1.43891000748\n",
        "combo number 721\n",
        "time elapsed 1.44071292877\n",
        "combo number 722\n",
        "time elapsed 1.44252300262\n",
        "combo number 723\n",
        "time elapsed 1.44429087639\n",
        "combo number 724\n",
        "time elapsed 1.44628000259\n",
        "combo number 725\n",
        "time elapsed 1.44807386398\n",
        "combo number 726\n",
        "time elapsed 1.45017385483\n",
        "combo number 727\n",
        "time elapsed 1.45218491554\n",
        "combo number 728\n",
        "time elapsed 1.45413994789\n",
        "combo number 729\n",
        "time elapsed 1.45607805252\n",
        "combo number 730\n",
        "time elapsed 1.45805501938\n",
        "combo number 731\n",
        "time elapsed 1.45990204811\n",
        "combo number 732\n",
        "time elapsed 1.46167993546\n",
        "combo number 733\n",
        "time elapsed 1.46359992027\n",
        "combo number 734\n",
        "time elapsed 1.46554088593\n",
        "combo number 735\n",
        "time elapsed 1.46740984917\n",
        "combo number 736\n",
        "time elapsed 1.46919989586\n",
        "combo number 737\n",
        "time elapsed 1.47139406204\n",
        "combo number 738\n",
        "time elapsed 1.47340798378\n",
        "combo number 739\n",
        "time elapsed 1.47530603409\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 740\n",
        "time elapsed 1.47718000412\n",
        "combo number 741\n",
        "time elapsed 1.47986483574\n",
        "combo number 742\n",
        "time elapsed 1.48182702065\n",
        "combo number 743\n",
        "time elapsed 1.48375892639\n",
        "combo number 744\n",
        "time elapsed 1.48565387726\n",
        "combo number 745\n",
        "time elapsed 1.48743605614\n",
        "combo number 746\n",
        "time elapsed 1.48921585083\n",
        "combo number 747\n",
        "time elapsed 1.4910030365\n",
        "combo number 748\n",
        "time elapsed 1.49278092384\n",
        "combo number 749\n",
        "time elapsed 1.4947988987\n",
        "combo number 750\n",
        "time elapsed 1.49657487869\n",
        "combo number 751\n",
        "time elapsed 1.49833583832\n",
        "combo number 752\n",
        "time elapsed 1.50013184547\n",
        "combo number 753\n",
        "time elapsed 1.50190901756\n",
        "combo number 754\n",
        "time elapsed 1.50384283066\n",
        "combo number 755\n",
        "time elapsed 1.50568795204\n",
        "combo number 756\n",
        "time elapsed 1.50752305984\n",
        "combo number 757\n",
        "time elapsed 1.50942087173\n",
        "combo number 758\n",
        "time elapsed 1.51131796837\n",
        "combo number 759\n",
        "time elapsed 1.51313185692\n",
        "combo number 760\n",
        "time elapsed 1.5149409771\n",
        "combo number 761\n",
        "time elapsed 1.51676702499\n",
        "combo number 762\n",
        "time elapsed 1.51856803894\n",
        "combo number 763\n",
        "time elapsed 1.52035403252\n",
        "combo number 764\n",
        "time elapsed 1.52219104767\n",
        "combo number 765\n",
        "time elapsed 1.52444601059\n",
        "combo number 766\n",
        "time elapsed 1.52641391754\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 767\n",
        "time elapsed 1.52831697464\n",
        "combo number 768\n",
        "time elapsed 1.53099584579\n",
        "combo number 769\n",
        "time elapsed 1.53291106224\n",
        "combo number 770\n",
        "time elapsed 1.53482198715\n",
        "combo number 771\n",
        "time elapsed 1.53673887253\n",
        "combo number 772\n",
        "time elapsed 1.53860783577\n",
        "combo number 773\n",
        "time elapsed 1.54048299789\n",
        "combo number 774\n",
        "time elapsed 1.54238986969\n",
        "combo number 775\n",
        "time elapsed 1.54439401627\n",
        "combo number 776\n",
        "time elapsed 1.54619002342\n",
        "combo number 777\n",
        "time elapsed 1.54802703857\n",
        "combo number 778\n",
        "time elapsed 1.54991889\n",
        "combo number 779\n",
        "time elapsed 1.55180382729\n",
        "combo number 780\n",
        "time elapsed 1.55357599258\n",
        "combo number 781\n",
        "time elapsed 1.55536484718\n",
        "combo number 782\n",
        "time elapsed 1.55726885796\n",
        "combo number 783\n",
        "time elapsed 1.55909800529\n",
        "combo number 784\n",
        "time elapsed 1.56087994576\n",
        "combo number 785\n",
        "time elapsed 1.56270694733\n",
        "combo number 786\n",
        "time elapsed 1.56460905075\n",
        "combo number 787\n",
        "time elapsed 1.56651592255\n",
        "combo number 788\n",
        "time elapsed 1.56833100319\n",
        "combo number 789\n",
        "time elapsed 1.57015895844\n",
        "combo number 790\n",
        "time elapsed 1.5720000267\n",
        "combo number 791\n",
        "time elapsed 1.57378602028\n",
        "combo number 792\n",
        "time elapsed 1.5755610466\n",
        "combo number 793\n",
        "time elapsed 1.57771086693\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 794\n",
        "time elapsed 1.57974386215\n",
        "combo number 795\n",
        "time elapsed 1.58246302605\n",
        "combo number 796\n",
        "time elapsed 1.5844180584\n",
        "combo number 797\n",
        "time elapsed 1.58634901047\n",
        "combo number 798\n",
        "time elapsed 1.58827996254\n",
        "combo number 799\n",
        "time elapsed 1.59018588066\n",
        "combo number 800\n",
        "time elapsed 1.59224390984\n",
        "combo number 801\n",
        "time elapsed 1.59400200844\n",
        "combo number 802\n",
        "time elapsed 1.59584403038\n",
        "combo number 803\n",
        "time elapsed 1.59773492813\n",
        "combo number 804\n",
        "time elapsed 1.59959793091\n",
        "combo number 805\n",
        "time elapsed 1.60136890411\n",
        "combo number 806\n",
        "time elapsed 1.60314297676\n",
        "combo number 807\n",
        "time elapsed 1.60507082939\n",
        "combo number 808\n",
        "time elapsed 1.60697197914\n",
        "combo number 809\n",
        "time elapsed 1.60879087448\n",
        "combo number 810\n",
        "time elapsed 1.61072993279\n",
        "combo number 811\n",
        "time elapsed 1.61264705658\n",
        "combo number 812\n",
        "time elapsed 1.61456298828\n",
        "combo number 813\n",
        "time elapsed 1.61647987366\n",
        "combo number 814\n",
        "time elapsed 1.61881899834\n",
        "combo number 815\n",
        "time elapsed 1.62078905106\n",
        "combo number 816\n",
        "time elapsed 1.62271285057\n",
        "combo number 817\n",
        "time elapsed 1.62459087372\n",
        "combo number 818\n",
        "time elapsed 1.62649798393\n",
        "combo number 819\n",
        "time elapsed 1.62845206261\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 820\n",
        "time elapsed 1.63053798676\n",
        "combo number 821\n",
        "time elapsed 1.63370490074\n",
        "combo number 822\n",
        "time elapsed 1.635668993\n",
        "combo number 823\n",
        "time elapsed 1.63762593269\n",
        "combo number 824\n",
        "time elapsed 1.63955593109\n",
        "combo number 825\n",
        "time elapsed 1.64134383202\n",
        "combo number 826\n",
        "time elapsed 1.64337301254\n",
        "combo number 827\n",
        "time elapsed 1.64526200294\n",
        "combo number 828\n",
        "time elapsed 1.64715886116\n",
        "combo number 829\n",
        "time elapsed 1.64898395538\n",
        "combo number 830\n",
        "time elapsed 1.6507499218\n",
        "combo number 831\n",
        "time elapsed 1.65262889862\n",
        "combo number 832\n",
        "time elapsed 1.65453696251\n",
        "combo number 833\n",
        "time elapsed 1.65647602081\n",
        "combo number 834\n",
        "time elapsed 1.65838098526\n",
        "combo number 835\n",
        "time elapsed 1.66047286987\n",
        "combo number 836\n",
        "time elapsed 1.66241002083\n",
        "combo number 837\n",
        "time elapsed 1.66424703598\n",
        "combo number 838\n",
        "time elapsed 1.66602993011\n",
        "combo number 839\n",
        "time elapsed 1.66786289215\n",
        "combo number 840\n",
        "time elapsed 1.66963982582\n",
        "combo number 841\n",
        "time elapsed 1.67149496078\n",
        "combo number 842\n",
        "time elapsed 1.67342305183\n",
        "combo number 843\n",
        "time elapsed 1.67535686493\n",
        "combo number 844\n",
        "time elapsed 1.67725896835\n",
        "combo number 845\n",
        "time elapsed 1.67916202545\n",
        "combo number 846\n",
        "time elapsed"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 1.68143796921\n",
        "combo number 847\n",
        "time elapsed 1.68427705765\n",
        "combo number 848\n",
        "time elapsed 1.68623590469\n",
        "combo number 849\n",
        "time elapsed 1.68816804886\n",
        "combo number 850\n",
        "time elapsed 1.69011187553\n",
        "combo number 851\n",
        "time elapsed 1.69225382805\n",
        "combo number 852\n",
        "time elapsed 1.69414591789\n",
        "combo number 853\n",
        "time elapsed 1.69606304169\n",
        "combo number 854\n",
        "time elapsed 1.69783496857\n",
        "combo number 855\n",
        "time elapsed 1.69964289665\n",
        "combo number 856\n",
        "time elapsed 1.70155096054\n",
        "combo number 857\n",
        "time elapsed 1.70348000526\n",
        "combo number 858\n",
        "time elapsed 1.70540189743\n",
        "combo number 859\n",
        "time elapsed 1.70731902122\n",
        "combo number 860\n",
        "time elapsed 1.70924305916\n",
        "combo number 861\n",
        "time elapsed 1.71117305756\n",
        "combo number 862\n",
        "time elapsed 1.71327495575\n",
        "combo number 863\n",
        "time elapsed 1.71523404121\n",
        "combo number 864\n",
        "time elapsed 1.71717095375\n",
        "combo number 865\n",
        "time elapsed 1.7190990448\n",
        "combo number 866\n",
        "time elapsed 1.72098898888\n",
        "combo number 867\n",
        "time elapsed 1.72294187546\n",
        "combo number 868\n",
        "time elapsed 1.72485899925\n",
        "combo number 869\n",
        "time elapsed 1.7267370224\n",
        "combo number 870\n",
        "time elapsed 1.72858285904\n",
        "combo number 871\n",
        "time elapsed 1.73049783707\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 872\n",
        "time elapsed 1.7324359417\n",
        "combo number 873\n",
        "time elapsed 1.73563504219\n",
        "combo number 874\n",
        "time elapsed 1.73760795593\n",
        "combo number 875\n",
        "time elapsed 1.73957896233\n",
        "combo number 876\n",
        "time elapsed 1.74151301384\n",
        "combo number 877\n",
        "time elapsed 1.74354290962\n",
        "combo number 878\n",
        "time elapsed 1.74535989761\n",
        "combo number 879\n",
        "time elapsed 1.74722599983\n",
        "combo number 880\n",
        "time elapsed 1.7490439415\n",
        "combo number 881\n",
        "time elapsed 1.75082182884\n",
        "combo number 882\n",
        "time elapsed 1.7526910305\n",
        "combo number 883\n",
        "time elapsed 1.75460100174\n",
        "combo number 884\n",
        "time elapsed 1.756513834\n",
        "combo number 885\n",
        "time elapsed 1.75837182999\n",
        "combo number 886\n",
        "time elapsed 1.76014900208\n",
        "combo number 887\n",
        "time elapsed 1.7620279789\n",
        "combo number 888\n",
        "time elapsed 1.76394295692\n",
        "combo number 889\n",
        "time elapsed 1.76601791382\n",
        "combo number 890\n",
        "time elapsed 1.76797103882\n",
        "combo number 891\n",
        "time elapsed 1.76986384392\n",
        "combo number 892\n",
        "time elapsed 1.77173686028\n",
        "combo number 893\n",
        "time elapsed 1.77364993095\n",
        "combo number 894\n",
        "time elapsed 1.77555203438\n",
        "combo number 895\n",
        "time elapsed 1.77737188339\n",
        "combo number 896\n",
        "time elapsed 1.77930784225\n",
        "combo number 897\n",
        "time elapsed 1.78124094009\n",
        "combo number 898\n",
        "time elapsed 1.78305387497\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 899\n",
        "time elapsed 1.7848470211\n",
        "combo number 900\n",
        "time elapsed 1.78812098503\n",
        "combo number 901\n",
        "time elapsed 1.79007005692\n",
        "combo number 902\n",
        "time elapsed 1.79219388962\n",
        "combo number 903\n",
        "time elapsed 1.79402685165\n",
        "combo number 904\n",
        "time elapsed 1.79591393471\n",
        "combo number 905\n",
        "time elapsed 1.79783201218\n",
        "combo number 906\n",
        "time elapsed 1.79973292351\n",
        "combo number 907\n",
        "time elapsed 1.80151486397\n",
        "combo number 908\n",
        "time elapsed 1.80330395699\n",
        "combo number 909\n",
        "time elapsed 1.80520296097\n",
        "combo number 910\n",
        "time elapsed 1.80709886551\n",
        "combo number 911\n",
        "time elapsed 1.8089568615\n",
        "combo number 912\n",
        "time elapsed 1.81073999405\n",
        "combo number 913\n",
        "time elapsed 1.81263399124\n",
        "combo number 914\n",
        "time elapsed 1.81454491615\n",
        "combo number 915\n",
        "time elapsed 1.81653189659\n",
        "combo number 916\n",
        "time elapsed 1.81839203835\n",
        "combo number 917\n",
        "time elapsed 1.82027482986\n",
        "combo number 918\n",
        "time elapsed 1.8221988678\n",
        "combo number 919\n",
        "time elapsed 1.82412600517\n",
        "combo number 920\n",
        "time elapsed 1.8259780407\n",
        "combo number 921\n",
        "time elapsed 1.82788205147\n",
        "combo number 922\n",
        "time elapsed 1.82981395721\n",
        "combo number 923\n",
        "time elapsed 1.83176898956\n",
        "combo number 924\n",
        "time elapsed 1.83358883858\n",
        "combo number 925\n",
        "time elapsed 1.83544683456\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 926\n",
        "time elapsed 1.83773303032\n",
        "combo number 927\n",
        "time elapsed 1.84056591988\n",
        "combo number 928\n",
        "time elapsed 1.84272694588\n",
        "combo number 929\n",
        "time elapsed 1.84463596344\n",
        "combo number 930\n",
        "time elapsed 1.84651184082\n",
        "combo number 931\n",
        "time elapsed 1.84843301773\n",
        "combo number 932\n",
        "time elapsed 1.85033583641\n",
        "combo number 933\n",
        "time elapsed 1.85221385956\n",
        "combo number 934\n",
        "time elapsed 1.85399198532\n",
        "combo number 935\n",
        "time elapsed 1.85579991341\n",
        "combo number 936\n",
        "time elapsed 1.85757899284\n",
        "combo number 937\n",
        "time elapsed 1.85936284065\n",
        "combo number 938\n",
        "time elapsed 1.86117291451\n",
        "combo number 939\n",
        "time elapsed 1.86300396919\n",
        "combo number 940\n",
        "time elapsed 1.86498403549\n",
        "combo number 941\n",
        "time elapsed 1.86700391769\n",
        "combo number 942\n",
        "time elapsed 1.86928606033\n",
        "combo number 943\n",
        "time elapsed 1.87127494812\n",
        "combo number 944\n",
        "time elapsed 1.87309384346\n",
        "combo number 945\n",
        "time elapsed 1.87492704391\n",
        "combo number 946\n",
        "time elapsed 1.87671399117\n",
        "combo number 947\n",
        "time elapsed 1.8785200119\n",
        "combo number 948\n",
        "time elapsed 1.88032984734\n",
        "combo number 949\n",
        "time elapsed 1.88218593597\n",
        "combo number 950\n",
        "time elapsed 1.88397884369\n",
        "combo number 951\n",
        "time elapsed 1.88575696945\n",
        "combo number 952\n",
        "time elapsed 1.88797593117\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 953\n",
        "time elapsed 1.89002299309\n",
        "combo number 954\n",
        "time elapsed 1.89300394058\n",
        "combo number 955\n",
        "time elapsed 1.89491701126\n",
        "combo number 956\n",
        "time elapsed 1.89682602882\n",
        "combo number 957\n",
        "time elapsed 1.89868402481\n",
        "combo number 958\n",
        "time elapsed 1.90047287941\n",
        "combo number 959\n",
        "time elapsed 1.90230083466\n",
        "combo number 960\n",
        "time elapsed 1.90408301353\n",
        "combo number 961\n",
        "time elapsed 1.90588188171\n",
        "combo number 962\n",
        "time elapsed 1.9077270031\n",
        "combo number 963\n",
        "time elapsed 1.90960597992\n",
        "combo number 964\n",
        "time elapsed 1.91152191162\n",
        "combo number 965\n",
        "time elapsed 1.91344594955\n",
        "combo number 966\n",
        "time elapsed 1.9153649807\n",
        "combo number 967\n",
        "time elapsed 1.91728305817\n",
        "combo number 968\n",
        "time elapsed 1.9191198349\n",
        "combo number 969\n",
        "time elapsed 1.92093086243\n",
        "combo number 970\n",
        "time elapsed 1.92272090912\n",
        "combo number 971\n",
        "time elapsed 1.92461895943\n",
        "combo number 972\n",
        "time elapsed 1.9265730381\n",
        "combo number 973\n",
        "time elapsed 1.92848300934\n",
        "combo number 974\n",
        "time elapsed 1.93037486076\n",
        "combo number 975\n",
        "time elapsed 1.9321680069\n",
        "combo number 976\n",
        "time elapsed 1.93409395218\n",
        "combo number 977\n",
        "time elapsed 1.93594288826\n",
        "combo number 978\n",
        "time elapsed 1.93772602081\n",
        "combo number 979\n",
        "time elapsed 1.9395070076\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 980\n",
        "time elapsed 1.9413459301\n",
        "combo number 981\n",
        "time elapsed 1.94493794441\n",
        "combo number 982\n",
        "time elapsed 1.94684195518\n",
        "combo number 983\n",
        "time elapsed 1.94874095917\n",
        "combo number 984\n",
        "time elapsed 1.95087385178\n",
        "combo number 985\n",
        "time elapsed 1.95291090012\n",
        "combo number 986\n",
        "time elapsed 1.95488286018\n",
        "combo number 987\n",
        "time elapsed 1.95684289932\n",
        "combo number 988\n",
        "time elapsed 1.95884299278\n",
        "combo number 989\n",
        "time elapsed 1.96069502831\n",
        "combo number 990\n",
        "time elapsed 1.96248483658\n",
        "combo number 991\n",
        "time elapsed 1.96438002586\n",
        "combo number 992\n",
        "time elapsed 1.96633386612\n",
        "combo number 993\n",
        "time elapsed 1.96824097633\n",
        "combo number 994\n",
        "time elapsed 1.97002506256\n",
        "combo number 995\n",
        "time elapsed 1.97228002548\n",
        "combo number 996\n",
        "time elapsed 1.97436285019\n",
        "combo number 997\n",
        "time elapsed 1.97631192207\n",
        "combo number 998\n",
        "time elapsed 1.97812700272\n",
        "combo number 999\n",
        "time elapsed 1.9799618721\n",
        "combo number 1000\n",
        "time elapsed 1.98180699348\n",
        "combo number 1001\n",
        "time elapsed 1.98372888565\n",
        "combo number 1002\n",
        "time elapsed 1.98563885689\n",
        "combo number 1003\n",
        "time elapsed 1.98746705055\n",
        "combo number 1004\n",
        "time elapsed 1.9892449379\n",
        "combo number 1005\n",
        "time elapsed 1.99106287956\n",
        "combo number 1006\n",
        "time elapsed 1.99286699295\n",
        "combo number"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " 1007\n",
        "time elapsed 1.9946539402\n",
        "combo number 1008\n",
        "time elapsed 1.99754500389\n",
        "combo number 1009\n",
        "time elapsed 1.99944400787\n",
        "combo number 1010\n",
        "time elapsed 2.0013589859\n",
        "combo number 1011\n",
        "time elapsed 2.00320005417\n",
        "combo number 1012\n",
        "time elapsed 2.00501084328\n",
        "combo number 1013\n",
        "time elapsed 2.00692796707\n",
        "combo number 1014\n",
        "time elapsed 2.00883793831\n",
        "combo number 1015\n",
        "time elapsed 2.01075196266\n",
        "combo number 1016\n",
        "time elapsed 2.01254987717\n",
        "combo number 1017\n",
        "time elapsed 2.01435303688\n",
        "combo number 1018\n",
        "time elapsed 2.0161280632\n",
        "combo number 1019\n",
        "time elapsed 2.01792192459\n",
        "combo number 1020\n",
        "time elapsed 2.01973986626\n",
        "combo number 1021\n",
        "time elapsed 2.02152705193\n",
        "combo number 1022\n",
        "time elapsed 2.02331185341\n"
       ]
      }
     ],
     "prompt_number": 231
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "nyt_accuracy_df.head(20)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>combo_features</th>\n",
        "      <th>actual</th>\n",
        "      <th>predicted</th>\n",
        "      <th>difference</th>\n",
        "      <th>accuracy</th>\n",
        "      <th>std</th>\n",
        "      <th>bestpredictedvalue</th>\n",
        "      <th>bestpredictedrealvalue</th>\n",
        "      <th>bestpredictedtext</th>\n",
        "      <th>worstpredictedvalue</th>\n",
        "      <th>worstpredictedrealvalue</th>\n",
        "      <th>worstpredictedtext</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0 </th>\n",
        "      <td>                     [avg_word_length]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1 </th>\n",
        "      <td>                       [FK_GradeLevel]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 0]</td>\n",
        "      <td> [1, 0, 1, 1, 0]</td>\n",
        "      <td> 40</td>\n",
        "      <td> 0.489898</td>\n",
        "      <td> [1, 0]</td>\n",
        "      <td> [1, 0]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td>    [1, 1, 1]</td>\n",
        "      <td>    [0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2 </th>\n",
        "      <td>                         [google_rank]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3 </th>\n",
        "      <td>                     [lexical_density]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4 </th>\n",
        "      <td>                         [lyrics_rank]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5 </th>\n",
        "      <td>                        [num_sentence]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6 </th>\n",
        "      <td>                            [nyt_rank]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7 </th>\n",
        "      <td>                         [post_length]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8 </th>\n",
        "      <td>                        [twitter_rank]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9 </th>\n",
        "      <td>                  [words_per_sentence]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 0]</td>\n",
        "      <td> [1, 0, 1, 1, 0]</td>\n",
        "      <td> 40</td>\n",
        "      <td> 0.489898</td>\n",
        "      <td> [1, 0]</td>\n",
        "      <td> [1, 0]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td>    [1, 1, 1]</td>\n",
        "      <td>    [0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10</th>\n",
        "      <td>      [avg_word_length, FK_GradeLevel]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11</th>\n",
        "      <td>        [avg_word_length, google_rank]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12</th>\n",
        "      <td>    [avg_word_length, lexical_density]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13</th>\n",
        "      <td>        [avg_word_length, lyrics_rank]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14</th>\n",
        "      <td>       [avg_word_length, num_sentence]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15</th>\n",
        "      <td>           [avg_word_length, nyt_rank]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16</th>\n",
        "      <td>        [avg_word_length, post_length]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>17</th>\n",
        "      <td>       [avg_word_length, twitter_rank]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>18</th>\n",
        "      <td> [avg_word_length, words_per_sentence]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>19</th>\n",
        "      <td>          [FK_GradeLevel, google_rank]</td>\n",
        "      <td> [0, 1, 0, 0, 0]</td>\n",
        "      <td> [1, 1, 1, 1, 1]</td>\n",
        "      <td> [1, 0, 1, 1, 1]</td>\n",
        "      <td> 20</td>\n",
        "      <td> 0.400000</td>\n",
        "      <td>    [1]</td>\n",
        "      <td>    [1]</td>\n",
        "      <td> [The nation\ufffd\ufffd\ufffds leading heart organizations re...</td>\n",
        "      <td> [1, 1, 1, 1]</td>\n",
        "      <td> [0, 0, 0, 0]</td>\n",
        "      <td> [As a campaign for a school for students in gr...</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 232,
       "text": [
        "                           combo_features           actual        predicted       difference  accuracy       std bestpredictedvalue bestpredictedrealvalue                                  bestpredictedtext worstpredictedvalue worstpredictedrealvalue                                 worstpredictedtext\n",
        "0                       [avg_word_length]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "1                         [FK_GradeLevel]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 0]  [1, 0, 1, 1, 0]        40  0.489898             [1, 0]                 [1, 0]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...           [1, 1, 1]               [0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "2                           [google_rank]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "3                       [lexical_density]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "4                           [lyrics_rank]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "5                          [num_sentence]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "6                              [nyt_rank]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "7                           [post_length]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "8                          [twitter_rank]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "9                    [words_per_sentence]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 0]  [1, 0, 1, 1, 0]        40  0.489898             [1, 0]                 [1, 0]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...           [1, 1, 1]               [0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "10       [avg_word_length, FK_GradeLevel]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "11         [avg_word_length, google_rank]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "12     [avg_word_length, lexical_density]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "13         [avg_word_length, lyrics_rank]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "14        [avg_word_length, num_sentence]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "15            [avg_word_length, nyt_rank]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "16         [avg_word_length, post_length]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "17        [avg_word_length, twitter_rank]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "18  [avg_word_length, words_per_sentence]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr...\n",
        "19           [FK_GradeLevel, google_rank]  [0, 1, 0, 0, 0]  [1, 1, 1, 1, 1]  [1, 0, 1, 1, 1]        20  0.400000                [1]                    [1]  [The nation\ufffd\ufffd\ufffds leading heart organizations re...        [1, 1, 1, 1]            [0, 0, 0, 0]  [As a campaign for a school for students in gr..."
       ]
      }
     ],
     "prompt_number": 232
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\"\"\"OLD\n",
      "features = [avg_word_length, FK_GradeLevel, google_rank, lexical_density, lyrics_rank, num_sentence, nyt_rank, post_length, twitter_rank, words_per_sentence]\n",
      "\n",
      "\n",
      "### TESTING COMBINATIONS OF FEATURES\n",
      "###\n",
      "###\n",
      "\n",
      "def test_features(train_df, test_df, all_features, min_max, output):\n",
      "    start = time.time()\n",
      "    #print 'start \\n', start\n",
      "    all_features_str = [i.__name__ for i in all_features]\n",
      "    \n",
      "    ### need to reorder features in dataframes to math all_features\n",
      "    ## training data\n",
      "    train_df_copy = train_df.copy()\n",
      "    train_df_copy = train_df_copy.rename(columns={'FK_GradeLevel': 'fk_gradelevel'}) ##need to sort to make lower case\n",
      "    \n",
      "    # pandas indexing is INCLUSIVE unlike normal indexing\n",
      "    nonfeatures_train_df = train_df_copy.ix[:, :'review']\n",
      "    features_train_df = train_df_copy.ix[:, 'post_length':]\n",
      "    sorted_features_train_df = features_train_df.sort_index(axis=1)\n",
      "    sorted_full_train_df = sorted_features_train_df.join(nonfeatures_train_df)\n",
      "\n",
      "    ## repeating same process above. testing data\n",
      "    test_df_copy = test_df.copy()\n",
      "    test_df_copy = test_df_copy.rename(columns={'FK_GradeLevel': 'fk_gradelevel'})\n",
      "    \n",
      "    # pandas indexing is INCLUSIVE unlike normal indexing\n",
      "    nonfeatures_test_df = test_df_copy.ix[:, :'review']\n",
      "    features_test_df = test_df_copy.ix[:, 'post_length':]\n",
      "    sorted_features_test_df = features_test_df.sort_index(axis=1)\n",
      "    sorted_full_test_df = sorted_features_test_df.join(nonfeatures_test_df)\n",
      "        \n",
      "    xtrain, ytrain = make_xy(train_df, output, all_features)\n",
      "    xtest, ytest = make_xy(test_df, output, all_features)\n",
      "\n",
      "    feature_nums = list(np.arange(len(all_features)))\n",
      "    \n",
      "    num_combo_list = []\n",
      "    combo_list = []\n",
      "    combo_list_str = []\n",
      "\n",
      "    for i in xrange(len(all_features)):\n",
      "        \n",
      "        # getting a list of all possible feature/function combinations\n",
      "        combo = list(combinations(all_features, i+1))\n",
      "        combo_str = list(combinations(all_features_str, i+1))\n",
      "        combo_list.extend(combo)\n",
      "        combo_list_str.extend(combo_str)\n",
      "        \n",
      "        # making corresponding combinations of numbers\n",
      "        # these will match the order of the previous combos and will correspond\n",
      "        # to the column indices of the features in the modified df\n",
      "        \n",
      "        num_combo = list(combinations(feature_nums, i+1))\n",
      "        num_combo_list.extend(num_combo) #combinations that correspond \n",
      "\n",
      "    combo_list = [list(i) for i in combo_list]\n",
      "    combo_list_str = [list(i) for i in combo_list_str]\n",
      "    num_combo_list = [list(i) for i in num_combo_list]\n",
      "    \n",
      "    combo_list_str = np.array(combo_list_str)\n",
      "    combo_df = pd.DataFrame(combo_list_str, columns=['combo_features'])\n",
      "    \n",
      "    #print combo_df.combo_features\n",
      "    \n",
      "    actuallist=[]\n",
      "    predictedlist=[]\n",
      "    differencelist=[]\n",
      "    accuracylist=[]\n",
      "    stdlist=[]\n",
      "    \n",
      "    bestpredictedvaluelist = []\n",
      "    bestrealvaluelist=[]\n",
      "    bestpredictedtextlist=[]\n",
      "    worstpredictedvaluelist = []\n",
      "    worstrealvaluelist=[]\n",
      "    worstpredictedtextlist=[]\n",
      "    \n",
      "    \n",
      "    xtraindf = pd.DataFrame(xtrain)\n",
      "    \n",
      "    #print '\\n', xtraindf\n",
      "    \n",
      "    xtestdf = pd.DataFrame(xtest)\n",
      "    ytestdf = pd.DataFrame(ytest)\n",
      "    \n",
      "    for i, val in enumerate(combo_list):\n",
      "        now = time.time()\n",
      "        #print 'now:', now\n",
      "        print 'combo number', i\n",
      "        print 'time elapsed', float(now) - float(start)\n",
      "        \n",
      "        x_indices = num_combo_list[i]\n",
      "        \n",
      "        xtrainarray = np.array(xtraindf[x_indices])\n",
      "        xtestarray = np.array(xtestdf[x_indices])\n",
      "        \n",
      "        clf = GaussianNB()\n",
      "        clf.fit(xtrainarray, ytrain)\n",
      "        \n",
      "        #sum_df = pd.DataFrame(clf.predict(xtestarray))\n",
      "        #sum_df['actual'] = ytest \n",
      "        \n",
      "        predicted = clf.predict(xtestarray)\n",
      "        actual = ytest\n",
      "        difference = abs(actual-predicted)\n",
      "        rangeval = abs(min_max[1] - min_max[0])\n",
      "        accuracy = (100. - float(np.mean(difference) / float(rangeval) * 100.))\n",
      "        std = np.std(difference)\n",
      "        \n",
      "        bestindex = np.where(difference == min(abs(difference)))\n",
      "        bestrealvalue = actual[bestindex]\n",
      "        bestpredicted = predicted[bestindex]\n",
      "        bestpredictedtext = test_df.irow(bestindex).review\n",
      "        \n",
      "        worstindex = np.where(difference == max(abs(difference)))\n",
      "        worstrealvalue = actual[np.where(difference==max(abs(difference)))]\n",
      "        worstpredicted = predicted[worstindex]\n",
      "        worstpredictedtext = test_df.irow(worstindex).review\n",
      "\n",
      "        actuallist.append(actual)\n",
      "        predictedlist.append(predicted)\n",
      "        differencelist.append(difference)\n",
      "        accuracylist.append(accuracy)\n",
      "        stdlist.append(std)\n",
      "        \n",
      "        bestpredictedvaluelist.append(bestpredicted)\n",
      "        bestrealvaluelist.append(bestrealvalue)\n",
      "        bestpredictedtextlist.append(bestpredictedtext)  \n",
      "        \n",
      "        worstpredictedvaluelist.append(worstpredicted)\n",
      "        worstrealvaluelist.append(worstrealvalue)\n",
      "        worstpredictedtextlist.append(worstpredictedtext)\n",
      "        \n",
      "    combo_df['actual'] = actuallist\n",
      "    combo_df['predicted'] = predictedlist\n",
      "    combo_df['difference'] = differencelist\n",
      "    combo_df['accuracy'] = accuracylist\n",
      "    combo_df['std'] = stdlist\n",
      "    \n",
      "    combo_df['bestpredictedvalue'] = bestpredictedvaluelist\n",
      "    combo_df['bestpredictedrealvalue'] = bestrealvaluelist\n",
      "    combo_df['bestpredictedtext'] = bestpredictedtextlist\n",
      "    \n",
      "    combo_df['worstpredictedvalue'] = worstpredictedvaluelist\n",
      "    combo_df['worstpredictedrealvalue'] = worstrealvaluelist\n",
      "    combo_df['worstpredictedtext'] = worstpredictedtextlist \n",
      "    \n",
      "    return combo_df\n",
      "    \n",
      "nyt_accuracy_df = test_features(nytest_df, nytrain_df, features, min_max=[1,0], output='popular').head(20)\n",
      "nyt_accuracy_df.to_csv('nyt_accuracy_analysis.csv', index=False)\n",
      "\"\"\""
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "KeyError",
       "evalue": "'review'",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-103-b96601dd3d2e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    151\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcombo_df\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m \u001b[0mnyt_accuracy_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnytest_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnytrain_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmin_max\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'popular'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m \u001b[0mnyt_accuracy_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'nyt_accuracy_analysis.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m<ipython-input-103-b96601dd3d2e>\u001b[0m in \u001b[0;36mtest_features\u001b[0;34m(train_df, test_df, all_features, min_max, output)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0;31m# pandas indexing is INCLUSIVE unlike normal indexing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     \u001b[0mnonfeatures_train_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_df_copy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m'review'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m     \u001b[0mfeatures_train_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_df_copy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'post_length'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0msorted_features_train_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfeatures_train_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/indexing.pyc\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m     44\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/indexing.pyc\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    270\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    271\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m             \u001b[0mretval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretval\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mretval\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/indexing.pyc\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m    389\u001b[0m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    390\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 391\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_slice_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    392\u001b[0m         elif _is_list_like(key) and not (isinstance(key, tuple) and\n\u001b[1;32m    393\u001b[0m                                          isinstance(labels, MultiIndex)):\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/indexing.pyc\u001b[0m in \u001b[0;36m_get_slice_axis\u001b[0;34m(self, slice_obj, axis)\u001b[0m\n\u001b[1;32m    636\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 638\u001b[0;31m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslice_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    639\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    640\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0m_is_index_slice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mslice_obj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/index.pyc\u001b[0m in \u001b[0;36mslice_indexer\u001b[0;34m(self, start, end, step)\u001b[0m\n\u001b[1;32m   1178\u001b[0m         \u001b[0mThis\u001b[0m \u001b[0mfunction\u001b[0m \u001b[0massumes\u001b[0m \u001b[0mthat\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mso\u001b[0m \u001b[0muse\u001b[0m \u001b[0mat\u001b[0m \u001b[0myour\u001b[0m \u001b[0mown\u001b[0m \u001b[0mperil\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m         \"\"\"\n\u001b[0;32m-> 1180\u001b[0;31m         \u001b[0mstart_slice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslice_locs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1181\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_slice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_slice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1182\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/index.pyc\u001b[0m in \u001b[0;36mslice_locs\u001b[0;34m(self, start, end)\u001b[0m\n\u001b[1;32m   1217\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1218\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1219\u001b[0;31m                 \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1220\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend_slice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m                     \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mend_slice\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/core/index.pyc\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    753\u001b[0m         \u001b[0mloc\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0munique\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpossibly\u001b[0m \u001b[0mslice\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mmask\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    754\u001b[0m         \"\"\"\n\u001b[0;32m--> 755\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    756\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseries\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/index.so\u001b[0m in \u001b[0;36mpandas.index.IndexEngine.get_loc (pandas/index.c:3231)\u001b[0;34m()\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/index.so\u001b[0m in \u001b[0;36mpandas.index.IndexEngine.get_loc (pandas/index.c:3111)\u001b[0;34m()\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/hashtable.so\u001b[0m in \u001b[0;36mpandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:10491)\u001b[0;34m()\u001b[0m\n",
        "\u001b[0;32m//anaconda/python.app/Contents/lib/python2.7/site-packages/pandas/hashtable.so\u001b[0m in \u001b[0;36mpandas.hashtable.PyObjectHashTable.get_item (pandas/hashtable.c:10445)\u001b[0;34m()\u001b[0m\n",
        "\u001b[0;31mKeyError\u001b[0m: 'review'"
       ]
      }
     ],
     "prompt_number": 103
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### 6. Predict from Data\n",
      "\n",
      "Predict outcome of given data source.\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### 7. Prediction Visualization\n",
      "\n",
      "Prepare datasources with neccessary extension including required featurelist. Result will be stored in local CSV files.\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "---\n",
      "*css tweaks in this cell*\n",
      "<style>\n",
      "div.text_cell_render {\n",
      "    line-height: 150%;\n",
      "    font-size: 110%;\n",
      "    width: 800px;\n",
      "    margin-left:50px;\n",
      "    margin-right:auto;\n",
      "    }\n",
      "</style>"
     ]
    }
   ],
   "metadata": {}
  }
 ]
}